[
  {
    "name": "triangle_properties.get",
    "description": "Retrieve the dimensions, such as area and perimeter, of a triangle if lengths of three sides are given.",
    "parameters": {
      "type": "dict",
      "properties": {
        "side1": {
          "type": "integer",
          "description": "The length of first side of the triangle."
        },
        "side2": {
          "type": "integer",
          "description": "The length of second side of the triangle."
        },
        "side3": {
          "type": "integer",
          "description": "The length of third side of the triangle."
        },
        "get_area": {
          "type": "boolean",
          "description": "A flag to determine whether to calculate the area of triangle. Default is true.",
          "default": true,
          "optional": true
        },
        "get_perimeter": {
          "type": "boolean",
          "description": "A flag to determine whether to calculate the perimeter of triangle. Default is true.",
          "default": true,
          "optional": true
        },
        "get_angles": {
          "type": "boolean",
          "description": "A flag to determine whether to calculate the internal angles of triangle. Default is true.",
          "default": true,
          "optional": true
        }
      },
      "required": [
        "side1",
        "side2",
        "side3"
      ]
    }
  },
  {
    "name": "circle_properties.get",
    "description": "Retrieve the dimensions, such as area and circumference, of a circle if radius is given.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "float",
          "description": "The length of radius of the circle."
        },
        "get_area": {
          "type": "boolean",
          "description": "A flag to determine whether to calculate the area of circle. Default is true.",
          "default": true,
          "optional": true
        },
        "get_circumference": {
          "type": "boolean",
          "description": "A flag to determine whether to calculate the circumference of circle. Default is true.",
          "default": true,
          "optional": true
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "math.triangle_area_heron",
    "description": "Calculates the area of a triangle using Heron's formula, given the lengths of its three sides.",
    "parameters": {
      "type": "dict",
      "properties": {
        "side1": {
          "type": "integer",
          "description": "Length of the first side of the triangle."
        },
        "side2": {
          "type": "integer",
          "description": "Length of the second side of the triangle."
        },
        "side3": {
          "type": "integer",
          "description": "Length of the third side of the triangle."
        }
      },
      "required": [
        "side1",
        "side2",
        "side3"
      ]
    }
  },
  {
    "name": "math.circle_area",
    "description": "Calculates the area of a circle given its radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "float",
          "description": "The radius of the circle."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "math.triangle_area_base_height",
    "description": "Calculates the area of a triangle using the formula (1/2)base*height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "float",
          "description": "The base length of the triangle."
        },
        "height": {
          "type": "float",
          "description": "The height of the triangle."
        }
      },
      "required": [
        "base",
        "height"
      ]
    }
  },
  {
    "name": "country_info.largest_city",
    "description": "Fetch the largest city of a specified country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "Name of the country."
        }
      },
      "required": [
        "country"
      ]
    }
  },
  {
    "name": "country_info.capital",
    "description": "Fetch the capital city of a specified country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "Name of the country."
        }
      },
      "required": [
        "country"
      ]
    }
  },
  {
    "name": "country_info.population",
    "description": "Fetch the current population of a specified country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "Name of the country."
        }
      },
      "required": [
        "country"
      ]
    }
  },
  {
    "name": "EuclideanDistance.calculate",
    "description": "Calculate the Euclidean distance between two points.",
    "parameters": {
      "type": "dict",
      "properties": {
        "pointA": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Coordinates for Point A."
        },
        "pointB": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Coordinates for Point B."
        },
        "rounding": {
          "type": "integer",
          "description": "Optional: The number of decimals to round off the result. Default 0"
        }
      },
      "required": [
        "pointA",
        "pointB"
      ]
    }
  },
  {
    "name": "angleToXAxis.calculate",
    "description": "Calculate the angle between two points with respect to x-axis.",
    "parameters": {
      "type": "dict",
      "properties": {
        "pointA": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Coordinates for Point A."
        },
        "pointB": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Coordinates for Point B."
        },
        "rounding": {
          "type": "integer",
          "description": "Optional: The number of decimals to round off the result. Default 0"
        }
      },
      "required": [
        "pointA",
        "pointB"
      ]
    }
  },
  {
    "name": "kinematics.calculate_displacement",
    "description": "Calculate displacement based on initial speed, acceleration, and time interval for a motion along a straight line.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_speed": {
          "type": "integer",
          "description": "The initial speed of the moving object in m/s."
        },
        "acceleration": {
          "type": "integer",
          "description": "The rate of change of speed, m/s^2."
        },
        "time": {
          "type": "integer",
          "description": "The time interval during which the acceleration is applied, in seconds."
        },
        "rounding": {
          "type": "integer",
          "description": "The number of decimals to round off the result (optional).",
          "default": 2
        }
      },
      "required": [
        "initial_speed",
        "acceleration",
        "time"
      ]
    }
  },
  {
    "name": "kinematics.calculate_final_speed",
    "description": "Calculate the final speed of an object that starts from an initial speed and then accelerates for a certain duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_speed": {
          "type": "float",
          "description": "The initial speed of the moving object in m/s."
        },
        "acceleration": {
          "type": "float",
          "description": "The rate of change of speed, m/s^2."
        },
        "time": {
          "type": "float",
          "description": "The time interval during which the acceleration is applied, in seconds."
        },
        "rounding": {
          "type": "integer",
          "description": "The number of decimals to round off the result (optional).",
          "default": 2
        }
      },
      "required": [
        "initial_speed",
        "acceleration",
        "time"
      ]
    }
  },
  {
    "name": "weather.get_by_city_date",
    "description": "Retrieves the historical weather data based on city and date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city for which to retrieve the weather."
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date for which to retrieve the historical weather data in the format YYYY-MM-DD."
        }
      },
      "required": [
        "city",
        "date"
      ]
    }
  },
  {
    "name": "weather.get_forecast_by_coordinates",
    "description": "Get the weather forecast for a specific geographical coordinates.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coordinates": {
          "type": "tuple",
          "items": {
            "type": "float"
          },
          "description": "The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude."
        },
        "days_ahead": {
          "type": "integer",
          "description": "Number of days to forecast from current date (optional, default is 7)."
        }
      },
      "required": [
        "coordinates"
      ]
    }
  },
  {
    "name": "weather.get_by_coordinates_date",
    "description": "Retrieves the historical weather data based on coordinates and date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coordinates": {
          "type": "tuple",
          "items": {
            "type": "float"
          },
          "description": "The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude."
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date for which to retrieve the historical weather data in the format YYYY-MM-DD."
        }
      },
      "required": [
        "coordinates",
        "date"
      ]
    }
  },
  {
    "name": "resistance_calculator.calculate",
    "description": "Calculate the resistance of an electrical circuit based on current and voltage.",
    "parameters": {
      "type": "dict",
      "properties": {
        "I": {
          "type": "float",
          "description": "The electric current flowing in Amperes."
        },
        "V": {
          "type": "float",
          "description": "The voltage difference in Volts."
        }
      },
      "required": [
        "I",
        "V"
      ]
    }
  },
  {
    "name": "capacitance_calculator.calculate",
    "description": "Calculate the capacitance of a parallel plate capacitor based on the area, distance and dielectric constant using the equation C = \u03b5\u2080KA/d.",
    "parameters": {
      "type": "dict",
      "properties": {
        "A": {
          "type": "integer",
          "description": "The area of one plate of the capacitor in square meters."
        },
        "d": {
          "type": "float",
          "description": "The distance between the two plates in meters."
        },
        "K": {
          "type": "float",
          "description": "The dielectric constant (default is 1.0 for free space, optional)."
        }
      },
      "required": [
        "A",
        "d"
      ]
    }
  },
  {
    "name": "magnetic_field.calculate",
    "description": "Calculate the magnetic field based on the current flowing and the radial distance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "I": {
          "type": "float",
          "description": "The electric current flowing in Amperes."
        },
        "r": {
          "type": "float",
          "description": "The radial distance from the line of current in meters."
        }
      },
      "required": [
        "I",
        "r"
      ]
    }
  },
  {
    "name": "wildlife_population.assess_growth",
    "description": "Assesses the population growth of a specific species in a specified location over a period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "species": {
          "type": "string",
          "description": "The species for which the growth is to be calculated."
        },
        "location": {
          "type": "string",
          "description": "The area where the species is present."
        },
        "duration": {
          "type": "integer",
          "description": "The time period for which the population growth should be calculated in years."
        }
      },
      "required": [
        "species",
        "location",
        "duration"
      ]
    }
  },
  {
    "name": "ecological_impact.analyze",
    "description": "Analyzes the impact of a species on a particular ecosystem.",
    "parameters": {
      "type": "dict",
      "properties": {
        "species": {
          "type": "string",
          "description": "The species whose impact is to be calculated."
        },
        "ecosystem": {
          "type": "string",
          "description": "The ecosystem being affected."
        },
        "location": {
          "type": "string",
          "description": "The area where the impact is analyzed."
        },
        "timeframe": {
          "type": "integer",
          "description": "The time period for which the impact analysis should be carried out in years.",
          "default": 5
        }
      },
      "required": [
        "species",
        "ecosystem",
        "location"
      ]
    }
  },
  {
    "name": "property_valuation.get",
    "description": "Get estimated value of a property based on location, specifications and age",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "City and state where the property is located, e.g. San Diego, CA."
        },
        "propertyType": {
          "type": "string",
          "description": "Type of property such as villa, condo, apartment, etc."
        },
        "bedrooms": {
          "type": "integer",
          "description": "Number of bedrooms required in the property."
        },
        "age": {
          "type": "integer",
          "description": "Age of the property in years."
        }
      },
      "required": [
        "location",
        "propertyType",
        "bedrooms",
        "age"
      ]
    }
  },
  {
    "name": "realestate.find_properties",
    "description": "Find properties based on location, budget, and specifications",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "City and state where the property is located, e.g. San Diego, CA."
        },
        "propertyType": {
          "type": "string",
          "description": "Type of property such as villa, condo, apartment, etc."
        },
        "bedrooms": {
          "type": "integer",
          "description": "Number of bedrooms required in the property."
        },
        "budget": {
          "type": "dict",
          "properties": {
            "min": {
              "type": "float",
              "description": "Minimum budget limit."
            },
            "max": {
              "type": "float",
              "description": "Maximum budget limit."
            }
          },
          "description": "Budget range for the property."
        }
      },
      "required": [
        "location",
        "propertyType",
        "bedrooms",
        "budget"
      ]
    }
  },
  {
    "name": "calculate_standard_deviation",
    "description": "This function calculates the standard deviation across different scores for a specific student.",
    "parameters": {
      "type": "dict",
      "properties": {
        "gradeDict": {
          "type": "dict",
          "description": "A dictionary where keys represent subjects and values represent scores"
        }
      },
      "required": [
        "gradeDict"
      ]
    }
  },
  {
    "name": "calculate_average",
    "description": "This function calculates the average grade across different subjects for a specific student.",
    "parameters": {
      "type": "dict",
      "properties": {
        "gradeDict": {
          "type": "dict",
          "description": "A dictionary where keys represent subjects and values represent scores"
        }
      },
      "required": [
        "gradeDict"
      ]
    }
  },
  {
    "name": "highest_grade",
    "description": "This function finds the subject where the student got the highest score.",
    "parameters": {
      "type": "dict",
      "properties": {
        "gradeDict": {
          "type": "dict",
          "description": "A dictionary where keys represent subjects and values represent scores"
        }
      },
      "required": [
        "gradeDict"
      ]
    }
  },
  {
    "name": "database.modify_columns",
    "description": "This function allows deletion or addition of columns in a database",
    "parameters": {
      "type": "dict",
      "properties": {
        "db_name": {
          "type": "string",
          "description": "The name of the database to modify."
        },
        "table": {
          "type": "string",
          "description": "The name of the table to modify."
        },
        "operation": {
          "type": "string",
          "description": "The operation to carry out on the table. Can be 'delete' or 'add'."
        },
        "columns": {
          "type": "array",
          "description": "List of the columns to add or delete from the table.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "db_name",
        "table",
        "operation",
        "columns"
      ]
    }
  },
  {
    "name": "database.create_backup",
    "description": "This function creates a backup of the database before modification",
    "parameters": {
      "type": "dict",
      "properties": {
        "db_name": {
          "type": "string",
          "description": "The name of the database to create a backup of."
        },
        "backup_location": {
          "type": "string",
          "description": "The file path where the backup should be stored."
        },
        "timestamp": {
          "type": "boolean",
          "description": "Option to append a timestamp to the backup file name.",
          "default": "False"
        }
      },
      "required": [
        "db_name",
        "backup_location"
      ]
    }
  },
  {
    "name": "math_roots.quadratic",
    "description": "Calculate the roots of a quadratic equation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "a": {
          "type": "integer",
          "description": "Coefficient of the second-degree term."
        },
        "b": {
          "type": "integer",
          "description": "Coefficient of the first-degree term."
        },
        "c": {
          "type": "integer",
          "description": "Constant term."
        }
      },
      "required": [
        "a",
        "b",
        "c"
      ]
    }
  },
  {
    "name": "math.roots.cubic",
    "description": "Calculate the roots of a cubic equation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "a": {
          "type": "float",
          "description": "Coefficient of the third-degree term."
        },
        "b": {
          "type": "float",
          "description": "Coefficient of the second-degree term."
        },
        "c": {
          "type": "float",
          "description": "Coefficient of the first-degree term."
        },
        "d": {
          "type": "float",
          "description": "Constant term."
        }
      },
      "required": [
        "a",
        "b",
        "c",
        "d"
      ]
    }
  },
  {
    "name": "math.roots.polynomial",
    "description": "Calculate the roots of a polynomial equation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coefficients": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "Array of coefficients of the polynomial equation starting from highest degree term."
        },
        "degree": {
          "type": "integer",
          "description": "Degree of the polynomial equation. Default 0"
        }
      },
      "required": [
        "coefficients"
      ]
    }
  },
  {
    "name": "corporate_finance.calculate_YOY_growth_rate",
    "description": "Calculate the year over year (YOY) growth rate for a company.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company for which to calculate the YOY growth rate."
        },
        "year1": {
          "type": "integer",
          "description": "The initial year."
        },
        "year1_revenue": {
          "type": "integer",
          "description": "The revenue for the initial year."
        },
        "year2": {
          "type": "integer",
          "description": "The subsequent year."
        },
        "year2_revenue": {
          "type": "integer",
          "description": "The revenue for the subsequent year."
        }
      },
      "required": [
        "company_name",
        "year1",
        "year1_revenue",
        "year2",
        "year2_revenue"
      ]
    }
  },
  {
    "name": "financial_ratios.calculate_ROE",
    "description": "Calculate the return on equity (ROE) for a company.",
    "parameters": {
      "type": "dict",
      "properties": {
        "net_income": {
          "type": "float",
          "description": "Net income for the period."
        },
        "shareholder_equity": {
          "type": "float",
          "description": "Average shareholder equity for the period."
        }
      },
      "required": [
        "net_income",
        "shareholder_equity"
      ]
    }
  },
  {
    "name": "financial_ratios.calculate_ROA",
    "description": "Calculate the return on assets (ROA) for a company.",
    "parameters": {
      "type": "dict",
      "properties": {
        "net_income": {
          "type": "float",
          "description": "Net income for the period."
        },
        "total_assets": {
          "type": "float",
          "description": "Total average assets for the period."
        }
      },
      "required": [
        "net_income",
        "total_assets"
      ]
    }
  },
  {
    "name": "corporate_finance.product_price",
    "description": "Fetch the current selling price of the product.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company that sells the product."
        },
        "product": {
          "type": "string",
          "description": "The product whose price we want to fetch."
        }
      },
      "required": [
        "company",
        "product"
      ]
    }
  },
  {
    "name": "corporate_finance.revenue_forecast",
    "description": "Estimate the revenue of a company by multiplying the sales units of the product with its selling price.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company that you want to calculate the revenue for."
        },
        "product": {
          "type": "string",
          "description": "The product sold by the company."
        },
        "sales_units_increase_percentage": {
          "type": "integer",
          "description": "Percentage increase in the sales units. This value is optional and defaults to zero if not provided."
        }
      },
      "required": [
        "company",
        "product"
      ]
    }
  },
  {
    "name": "finance.property_depreciation",
    "description": "Calculates the depreciated value of a property given its initial cost, depreciation rate, and the number of years.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_cost": {
          "type": "integer",
          "description": "The initial cost of the property."
        },
        "depreciation_rate": {
          "type": "integer",
          "description": "The annual depreciation rate in percentage."
        },
        "years": {
          "type": "integer",
          "description": "The number of years for which to calculate the depreciation."
        },
        "monthly": {
          "type": "boolean",
          "description": "If set to true, it will calculate monthly depreciation instead of annually. (optional)",
          "default": false
        }
      },
      "required": [
        "initial_cost",
        "depreciation_rate",
        "years"
      ]
    }
  },
  {
    "name": "finance.loan_repayment",
    "description": "Calculates the monthly repayment for a loan.",
    "parameters": {
      "type": "dict",
      "properties": {
        "loan_amount": {
          "type": "float",
          "description": "The amount borrowed or loaned."
        },
        "interest_rate": {
          "type": "float",
          "description": "The annual interest rate."
        },
        "loan_term": {
          "type": "integer",
          "description": "The term of the loan in years."
        }
      },
      "required": [
        "loan_amount",
        "interest_rate",
        "loan_term"
      ]
    }
  },
  {
    "name": "finance.inflation_adjustment",
    "description": "Adjusts a sum of money for inflation based on the consumer price index (CPI).",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_sum": {
          "type": "float",
          "description": "The initial sum of money."
        },
        "years": {
          "type": "integer",
          "description": "The number of years over which inflation is calculated."
        },
        "inflation_rate": {
          "type": "float",
          "description": "The annual rate of inflation. Default 0.0"
        }
      },
      "required": [
        "initial_sum",
        "years"
      ]
    }
  },
  {
    "name": "solarFarm.potential",
    "description": "Estimate the energy output of a solar farm given its location and panel area for a particular month.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coordinates": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "The geographic coordinates of the location of the solar farm."
        },
        "panelArea": {
          "type": "integer",
          "description": "The total solar panel area in square feet at the location."
        },
        "month": {
          "type": "string",
          "description": "The month for which to calculate the potential energy output. Default to January",
          "optional": true
        }
      },
      "required": [
        "coordinates",
        "panelArea"
      ]
    }
  },
  {
    "name": "windFarm.potential",
    "description": "Estimate the energy output of a wind farm given its location and turbine count for a particular month.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coordinates": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "The geographic coordinates of the location of the wind farm."
        },
        "turbineCount": {
          "type": "integer",
          "description": "The total number of wind turbines at the location."
        },
        "month": {
          "type": "string",
          "description": "The month for which to calculate the potential energy output. Default to January",
          "optional": true
        }
      },
      "required": [
        "coordinates",
        "turbineCount"
      ]
    }
  },
  {
    "name": "species_distribution_modeling.project_range_shift",
    "description": "Predict the potential future geographic distribution of a species under a specified climate change scenario.",
    "parameters": {
      "type": "dict",
      "properties": {
        "species": {
          "type": "string",
          "description": "The species of animal."
        },
        "climate_scenario": {
          "type": "string",
          "description": "The name of the climate change scenario."
        },
        "future_time": {
          "type": "integer",
          "description": "The future time in years for the prediction.",
          "default": 100
        }
      },
      "required": [
        "species",
        "climate_scenario"
      ]
    }
  },
  {
    "name": "population_genetics.calculate_ne",
    "description": "Calculate the effective population size necessary to maintain genetic diversity in a wild animal population for a specified number of generations with a given probability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "species": {
          "type": "string",
          "description": "The species of wild animal."
        },
        "generations": {
          "type": "integer",
          "description": "The number of generations for which to maintain the genetic diversity."
        },
        "probability": {
          "type": "float",
          "description": "The probability of maintaining genetic diversity."
        }
      },
      "required": [
        "species",
        "generations",
        "probability"
      ]
    }
  },
  {
    "name": "ecology.calculate_carrying_capacity",
    "description": "Calculate the maximum population size of the species that the environment can sustain indefinitely.",
    "parameters": {
      "type": "dict",
      "properties": {
        "habitat_area": {
          "type": "float",
          "description": "The area of the habitat in square kilometers."
        },
        "species": {
          "type": "string",
          "description": "The species of animal."
        },
        "productivity": {
          "type": "float",
          "description": "The biological productivity of the habitat in animals per square kilometer per year."
        }
      },
      "required": [
        "habitat_area",
        "species",
        "productivity"
      ]
    }
  },
  {
    "name": "currency_conversion.convert",
    "description": "Converts a specified amount of money from one currency to another at the latest rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "from_currency": {
          "type": "string",
          "description": "The currency that you want to convert from."
        },
        "to_currency": {
          "type": "string",
          "description": "The currency that you want to convert to."
        },
        "amount": {
          "type": "float",
          "description": "The amount of money that you want to convert."
        }
      },
      "required": [
        "from_currency",
        "to_currency",
        "amount"
      ]
    }
  },
  {
    "name": "currency_conversion.get_latest_rate",
    "description": "Get the latest currency conversion rate from one currency to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "from_currency": {
          "type": "string",
          "description": "The currency that you want to convert from."
        },
        "to_currency": {
          "type": "string",
          "description": "The currency that you want to convert to."
        }
      },
      "required": [
        "from_currency",
        "to_currency"
      ]
    }
  },
  {
    "name": "currency_conversion.get_rate",
    "description": "Get the currency conversion rate from one currency to another at a specified date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "from_currency": {
          "type": "string",
          "description": "The currency that you want to convert from."
        },
        "to_currency": {
          "type": "string",
          "description": "The currency that you want to convert to."
        },
        "date": {
          "type": "string",
          "description": "The date at which the conversion rate applies. Default is the current date.",
          "default": "today"
        }
      },
      "required": [
        "from_currency",
        "to_currency"
      ]
    }
  },
  {
    "name": "european_history.war_details",
    "description": "Get details of a specific historical European war.",
    "parameters": {
      "type": "dict",
      "properties": {
        "war": {
          "type": "string",
          "description": "Name of the war"
        }
      },
      "required": [
        "war"
      ]
    }
  },
  {
    "name": "european_history.leader_info",
    "description": "Get information about a specific historical leader in European history.",
    "parameters": {
      "type": "dict",
      "properties": {
        "leader": {
          "type": "string",
          "description": "Name of the leader"
        }
      },
      "required": [
        "leader"
      ]
    }
  },
  {
    "name": "european_history.battle_details",
    "description": "Get details of a specific historical European battle.",
    "parameters": {
      "type": "dict",
      "properties": {
        "battle": {
          "type": "string",
          "description": "Name of the battle"
        }
      },
      "required": [
        "battle"
      ]
    }
  },
  {
    "name": "religion_history.get_councils",
    "description": "Retrieves a list of major councils in a specified religion.",
    "parameters": {
      "type": "dict",
      "properties": {
        "religion": {
          "type": "string",
          "description": "Name of the religion for which to retrieve the councils."
        },
        "count": {
          "type": "integer",
          "description": "Number of top councils to retrieve.",
          "default": 3
        }
      },
      "required": [
        "religion",
        "count"
      ]
    }
  },
  {
    "name": "religion_history.get_reformations",
    "description": "Retrieves a list of major reformations in a specified religion.",
    "parameters": {
      "type": "dict",
      "properties": {
        "religion": {
          "type": "string",
          "description": "Name of the religion for which to retrieve the reformations."
        },
        "count": {
          "type": "integer",
          "description": "Number of top reformations to retrieve.",
          "default": 3
        }
      },
      "required": [
        "religion",
        "count"
      ]
    }
  },
  {
    "name": "religion_history.get_schisms",
    "description": "Retrieves a list of major schisms in a specified religion.",
    "parameters": {
      "type": "dict",
      "properties": {
        "religion": {
          "type": "string",
          "description": "Name of the religion for which to retrieve the schisms."
        },
        "count": {
          "type": "integer",
          "description": "Number of top schisms to retrieve."
        }
      },
      "required": [
        "religion",
        "count"
      ]
    }
  },
  {
    "name": "sculptor_info.get",
    "description": "Get information about a specific sculptor.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the sculptor."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "sculpture_price.calculate",
    "description": "Calculate the estimated price to commission a sculpture based on the material and size.",
    "parameters": {
      "type": "dict",
      "properties": {
        "material": {
          "type": "string",
          "description": "The material used for the sculpture."
        },
        "size": {
          "type": "integer",
          "description": "The size of the sculpture in feet."
        },
        "complexity": {
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ],
          "description": "The complexity level of the sculpture. Default is 'medium'.",
          "default": "medium"
        }
      },
      "required": [
        "material",
        "size"
      ]
    }
  },
  {
    "name": "sculpture_availability.check",
    "description": "Check the availability of a specific sculpture in the inventory.",
    "parameters": {
      "type": "dict",
      "properties": {
        "sculpture_name": {
          "type": "string",
          "description": "The name of the sculpture."
        },
        "material": {
          "type": "string",
          "description": "The material of the sculpture."
        }
      },
      "required": [
        "sculpture_name",
        "material"
      ]
    }
  },
  {
    "name": "play_sound_wave",
    "description": "This function is for playing a sound wave file.",
    "parameters": {
      "type": "dict",
      "properties": {
        "wave_file": {
          "type": "string",
          "description": "The filename of the sound wave file to be played."
        },
        "volume": {
          "type": "float",
          "description": "The volume level at which the sound is to be played (1 is 100%).",
          "default": 1
        }
      },
      "required": [
        "wave_file"
      ]
    }
  },
  {
    "name": "generate_sound_wave",
    "description": "This function is for generating a sinusoidal sound wave file of a certain frequency for a specific duration and save it to a WAV file.",
    "parameters": {
      "type": "dict",
      "properties": {
        "frequency": {
          "type": "integer",
          "description": "The frequency of the sound wave in Hz."
        },
        "duration": {
          "type": "integer",
          "description": "The duration of the sound in seconds."
        },
        "wave_type": {
          "type": "string",
          "enum": [
            "sine",
            "square",
            "sawtooth"
          ],
          "description": "The waveform to be used to generate the sound.",
          "default": "sine"
        }
      },
      "required": [
        "frequency",
        "duration"
      ]
    }
  },
  {
    "name": "sports_data.basketball.most_points_single_season",
    "description": "Returns the record for the most points scored by a single player in one season of NBA, including the player name, points scored, and season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "league": {
          "type": "string",
          "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."
        }
      },
      "required": [
        "league"
      ]
    }
  },
  {
    "name": "sports_data.basketball.most_points_career",
    "description": "Returns the record for the most points scored by a player in his career in NBA, including the player name, total points scored, and career span.",
    "parameters": {
      "type": "dict",
      "properties": {
        "league": {
          "type": "string",
          "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."
        }
      },
      "required": [
        "league"
      ]
    }
  },
  {
    "name": "sports_data.basketball.most_points_single_game",
    "description": "Returns the record for the most points scored by a single player in one game of NBA, including the player name, points scored, and game date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "league": {
          "type": "string",
          "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."
        }
      },
      "required": [
        "league"
      ]
    }
  },
  {
    "name": "basketball.player_stats.get",
    "description": "Get current statistics for a specified basketball player",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The name of the player."
        },
        "stats_fields": {
          "type": "array",
          "description": "List of statistical categories to be fetched, including points, assists, rebounds, minutes.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "player_name",
        "stats_fields"
      ]
    }
  },
  {
    "name": "basketball.game_stats.get",
    "description": "Get the detailed statistical data from a specific basketball game",
    "parameters": {
      "type": "dict",
      "properties": {
        "team1": {
          "type": "string",
          "description": "One of the competing teams in the game."
        },
        "team2": {
          "type": "string",
          "description": "One of the competing teams in the game."
        },
        "date": {
          "type": "string",
          "description": "The date when the game occurred."
        },
        "stats_fields": {
          "type": "array",
          "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, turnovers. Default to empty list",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "team1",
        "team2",
        "date"
      ]
    }
  },
  {
    "name": "basketball.team_stats.get",
    "description": "Get current statistics for a specific basketball team",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the team."
        },
        "stats_fields": {
          "type": "array",
          "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, win rate.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "team_name",
        "stats_fields"
      ]
    }
  },
  {
    "name": "route_planner.calculate_route",
    "description": "Determines the best route between two points.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start": {
          "type": "string",
          "description": "The starting point of the journey."
        },
        "destination": {
          "type": "string",
          "description": "The destination of the journey."
        },
        "method": {
          "type": "string",
          "enum": [
            "fastest",
            "shortest",
            "balanced"
          ],
          "description": "The method to use when calculating the route (default is 'fastest').",
          "default": "fastest"
        }
      },
      "required": [
        "start",
        "destination"
      ]
    }
  },
  {
    "name": "chess_club_details.find",
    "description": "Provides details about a chess club, including location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the chess club."
        },
        "city": {
          "type": "string",
          "description": "The city in which the chess club is located."
        },
        "event": {
          "type": "string",
          "description": "The event hosted by the club.",
          "default": "null"
        }
      },
      "required": [
        "name",
        "city"
      ]
    }
  },
  {
    "name": "video_games.store_currency",
    "description": "Fetches the currency used in a specific region in a gaming platform store.",
    "parameters": {
      "type": "dict",
      "properties": {
        "platform": {
          "type": "string",
          "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"
        },
        "region": {
          "type": "string",
          "description": "The region e.g. United States, United Kingdom, Japan",
          "default": "True"
        }
      },
      "required": [
        "platform"
      ]
    }
  },
  {
    "name": "video_games.on_sale",
    "description": "Checks if a particular game is currently on sale in a specific gaming platform store and in a specific region.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game_title": {
          "type": "string",
          "description": "The title of the video game"
        },
        "platform": {
          "type": "string",
          "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"
        },
        "region": {
          "type": "string",
          "description": "The region e.g. United States, United Kingdom, Japan. Default United States",
          "optional": "True"
        }
      },
      "required": [
        "game_title",
        "platform"
      ]
    }
  },
  {
    "name": "video_games.store_price",
    "description": "Fetches the selling price of a specified game in a particular gaming platform store and in a specific region.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game_title": {
          "type": "string",
          "description": "The title of the video game"
        },
        "platform": {
          "type": "string",
          "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"
        },
        "region": {
          "type": "string",
          "description": "The region e.g. United States, United Kingdom, Japan. Default to United States"
        }
      },
      "required": [
        "game_title",
        "platform"
      ]
    }
  },
  {
    "name": "game_scores.get",
    "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The name of the game."
        },
        "platform": {
          "type": "string",
          "description": "The gaming platform e.g. Xbox, Playstation, PC"
        },
        "level": {
          "type": "integer",
          "description": "The level of the game for which you want to retrieve the scores."
        },
        "player": {
          "type": "string",
          "description": "The name of the player for whom you want to retrieve scores. Default ''",
          "optional": true
        }
      },
      "required": [
        "game",
        "platform",
        "level"
      ]
    }
  },
  {
    "name": "game_rewards.get",
    "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The name of the game."
        },
        "platform": {
          "type": "string",
          "description": "The gaming platform e.g. Xbox, Playstation, PC"
        },
        "mission": {
          "type": "string",
          "description": "The mission for which you want to know the rewards. Default to ''",
          "optional": true
        },
        "trophy": {
          "type": "string",
          "description": "The trophy level for which you want to know the rewards. Default to ''",
          "optional": true
        }
      },
      "required": [
        "game",
        "platform"
      ]
    }
  },
  {
    "name": "game_missions.list",
    "description": "List all missions for a certain game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The name of the game."
        }
      },
      "required": [
        "game"
      ]
    }
  },
  {
    "name": "maps.route_times",
    "description": "Estimates the time it will take to travel from one location to another by a specific mode of transportation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "route": {
          "type": "string",
          "description": "The string representation of the route."
        },
        "mode": {
          "type": "string",
          "description": "The mode of transportation (walk, bike, transit, drive).",
          "default": "walk"
        }
      },
      "required": [
        "route"
      ]
    }
  },
  {
    "name": "maps.shortest_path",
    "description": "Find the shortest path from one location to another by using a specific mode of transportation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The name or coordinates of the start location."
        },
        "end_location": {
          "type": "string",
          "description": "The name or coordinates of the end location."
        },
        "mode": {
          "type": "string",
          "description": "The mode of transportation (walk, bike, transit, drive).",
          "default": "walk"
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "solve.quadratic_equation",
    "description": "Solve a quadratic equation with given coefficients a, b, and c.",
    "parameters": {
      "type": "dict",
      "properties": {
        "a": {
          "type": "integer",
          "description": "Coefficient of x^2."
        },
        "b": {
          "type": "integer",
          "description": "Coefficient of x."
        },
        "c": {
          "type": "integer",
          "description": "Constant term."
        }
      },
      "required": [
        "a",
        "b",
        "c"
      ]
    }
  },
  {
    "name": "convert.rgb_to_hex",
    "description": "Converts RGB values to Hexadecimal color code.",
    "parameters": {
      "type": "dict",
      "properties": {
        "r": {
          "type": "integer",
          "description": "The Red component."
        },
        "g": {
          "type": "integer",
          "description": "The Green component."
        },
        "b": {
          "type": "integer",
          "description": "The Blue component."
        }
      },
      "required": [
        "r",
        "g",
        "b"
      ]
    }
  },
  {
    "name": "perform.string_reverse",
    "description": "Reverses a given string.",
    "parameters": {
      "type": "dict",
      "properties": {
        "input_string": {
          "type": "string",
          "description": "The string to be reversed."
        }
      },
      "required": [
        "input_string"
      ]
    }
  },
  {
    "name": "functions.zero",
    "description": "Find the zero points of a function.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "Function given as a string with x as the variable, e.g. 3x+2"
        }
      },
      "required": [
        "function"
      ]
    }
  },
  {
    "name": "functions.intersect",
    "description": "Locate the intersection points of two functions.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function1": {
          "type": "string",
          "description": "First function given as a string with x as the variable, e.g. 3x+2"
        },
        "function2": {
          "type": "string",
          "description": "Second function given as a string with x as the variable, e.g. 2x+3"
        }
      },
      "required": [
        "function1",
        "function2"
      ]
    }
  },
  {
    "name": "rectangle.area",
    "description": "Calculate the area of a rectangle with given length and width",
    "parameters": {
      "type": "dict",
      "properties": {
        "length": {
          "type": "integer",
          "description": "Length of the rectangle"
        },
        "width": {
          "type": "integer",
          "description": "Width of the rectangle"
        }
      },
      "required": [
        "length",
        "width"
      ]
    }
  },
  {
    "name": "circle.area",
    "description": "Calculate the area of a circle with given radius",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "float",
          "description": "Radius of the circle"
        },
        "isDiameter": {
          "type": "boolean",
          "description": "Whether the given length is the diameter of the circle, default is false",
          "default": false
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "triangle.area",
    "description": "Calculate the area of a triangle with given base and height",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "float",
          "description": "Base of the triangle"
        },
        "height": {
          "type": "float",
          "description": "Height of the triangle"
        }
      },
      "required": [
        "base",
        "height"
      ]
    }
  },
  {
    "name": "geometry_square.calculate",
    "description": "Calculates the area and perimeter of a square given the side length.",
    "parameters": {
      "type": "dict",
      "properties": {
        "side": {
          "type": "integer",
          "description": "The length of a side of the square."
        }
      },
      "required": [
        "side"
      ]
    }
  },
  {
    "name": "geometry_circle.calculate",
    "description": "Calculates the area and circumference of a circle given the radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "The radius of the circle."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "geometry_rectangle.calculate",
    "description": "Calculates the area and perimeter of a rectangle given the width and length.",
    "parameters": {
      "type": "dict",
      "properties": {
        "width": {
          "type": "integer",
          "description": "The width of the rectangle."
        },
        "length": {
          "type": "integer",
          "description": "The length of the rectangle."
        }
      },
      "required": [
        "width",
        "length"
      ]
    }
  },
  {
    "name": "geometry.calculate_cone_volume",
    "description": "Calculate the volume of a cone given the radius and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "Radius of the cone base."
        },
        "height": {
          "type": "integer",
          "description": "Height of the cone."
        },
        "round_off": {
          "type": "integer",
          "description": "Number of decimal places to round off the answer. Default 0"
        }
      },
      "required": [
        "radius",
        "height"
      ]
    }
  },
  {
    "name": "physics.calculate_cone_mass",
    "description": "Calculate the mass of a cone given the radius, height, and density.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "float",
          "description": "Radius of the cone base."
        },
        "height": {
          "type": "float",
          "description": "Height of the cone."
        },
        "density": {
          "type": "float",
          "description": "Density of the material the cone is made of."
        }
      },
      "required": [
        "radius",
        "height",
        "density"
      ]
    }
  },
  {
    "name": "calculate_derivative",
    "description": "Calculate the derivative of a single-variable function.",
    "parameters": {
      "type": "dict",
      "properties": {
        "func": {
          "type": "string",
          "description": "The function to be differentiated."
        },
        "x_value": {
          "type": "integer",
          "description": "The x-value at which the derivative should be calculated."
        },
        "order": {
          "type": "integer",
          "description": "The order of the derivative (optional). Default is 1st order.",
          "default": 1
        }
      },
      "required": [
        "func",
        "x_value"
      ]
    }
  },
  {
    "name": "calculate_integral",
    "description": "Calculate the definite integral of a single-variable function.",
    "parameters": {
      "type": "dict",
      "properties": {
        "func": {
          "type": "string",
          "description": "The function to be integrated."
        },
        "a": {
          "type": "integer",
          "description": "The lower bound of the integration."
        },
        "b": {
          "type": "integer",
          "description": "The upper bound of the integration."
        }
      },
      "required": [
        "func",
        "a",
        "b"
      ]
    }
  },
  {
    "name": "math.gcd",
    "description": "Calculates the greatest common divisor of two numbers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num1": {
          "type": "integer",
          "description": "The first number."
        },
        "num2": {
          "type": "integer",
          "description": "The second number."
        }
      },
      "required": [
        "num1",
        "num2"
      ]
    }
  },
  {
    "name": "math.sqrt",
    "description": "Calculates the square root of a number.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num": {
          "type": "float",
          "description": "The number."
        },
        "accuracy": {
          "type": "integer",
          "description": "The number of decimal places in the result. Default to 0",
          "optional": true
        }
      },
      "required": [
        "num"
      ]
    }
  },
  {
    "name": "math.lcm",
    "description": "Calculates the least common multiple of two numbers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num1": {
          "type": "integer",
          "description": "The first number."
        },
        "num2": {
          "type": "integer",
          "description": "The second number."
        }
      },
      "required": [
        "num1",
        "num2"
      ]
    }
  },
  {
    "name": "calculate_lcm",
    "description": "Calculate the least common multiple (lcm) between two integers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num1": {
          "type": "integer",
          "description": "First number to calculate lcm for."
        },
        "num2": {
          "type": "integer",
          "description": "Second number to calculate lcm for."
        },
        "method": {
          "type": "string",
          "description": "The specific method to use in the calculation. Supported values: 'standard', 'reduced'. Default 'standard'"
        }
      },
      "required": [
        "num1",
        "num2"
      ]
    }
  },
  {
    "name": "calculate_gcd",
    "description": "Calculate the greatest common divisor (gcd) between two integers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num1": {
          "type": "integer",
          "description": "First number to calculate gcd for."
        },
        "num2": {
          "type": "integer",
          "description": "Second number to calculate gcd for."
        },
        "algorithm": {
          "type": "string",
          "description": "The specific algorithm to use in the calculation. Supported values: 'euclidean', 'binary'. Default 'euclidean'",
          "enum": [
            "euclidean",
            "binary"
          ]
        }
      },
      "required": [
        "num1",
        "num2"
      ]
    }
  },
  {
    "name": "kinematics.calculate_acceleration",
    "description": "Calculates the acceleration of an object under given conditions.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_speed": {
          "type": "float",
          "description": "The initial speed of the object."
        },
        "final_speed": {
          "type": "float",
          "description": "The final speed of the object."
        },
        "time": {
          "type": "float",
          "description": "The time in seconds it took the object to reach the final speed."
        },
        "distance": {
          "type": "float",
          "description": "The distance in meters the object has traveled.",
          "default": 0
        }
      },
      "required": [
        "initial_speed",
        "final_speed",
        "time"
      ]
    }
  },
  {
    "name": "kinematics.calculate_speed_from_rest",
    "description": "Calculates the speed of an object that starts from rest under a constant acceleration over a specified distance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "distance": {
          "type": "integer",
          "description": "The distance in meters the object has traveled."
        },
        "time": {
          "type": "integer",
          "description": "The time in seconds it took the object to travel."
        },
        "initial_speed": {
          "type": "integer",
          "description": "The initial speed of the object.",
          "default": 0
        }
      },
      "required": [
        "distance",
        "time"
      ]
    }
  },
  {
    "name": "physics.wave_velocity",
    "description": "Calculate the velocity of a wave based on its frequency and wavelength.",
    "parameters": {
      "type": "dict",
      "properties": {
        "frequency": {
          "type": "float",
          "description": "The frequency of the wave in Hz."
        },
        "wavelength": {
          "type": "float",
          "description": "The wavelength of the wave in m."
        }
      },
      "required": [
        "frequency",
        "wavelength"
      ]
    }
  },
  {
    "name": "kinematics.final_velocity",
    "description": "Find the final velocity of an object moving under constant acceleration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "integer",
          "description": "The initial velocity of the object in m/s."
        },
        "time": {
          "type": "integer",
          "description": "The time in seconds the object has been moving."
        },
        "acceleration": {
          "type": "float",
          "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"
        }
      },
      "required": [
        "initial_velocity",
        "time"
      ]
    }
  },
  {
    "name": "kinematics.distance",
    "description": "Find the distance traveled by an object moving under constant acceleration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "float",
          "description": "The initial velocity of the object in m/s."
        },
        "time": {
          "type": "integer",
          "description": "The time in seconds the object has been moving."
        },
        "acceleration": {
          "type": "float",
          "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"
        }
      },
      "required": [
        "initial_velocity",
        "time"
      ]
    }
  },
  {
    "name": "library.reserve_book",
    "description": "Reserves a book in the library if available.",
    "parameters": {
      "type": "dict",
      "properties": {
        "book_id": {
          "type": "string",
          "description": "The id of the book to reserve."
        },
        "branch_id": {
          "type": "string",
          "description": "The id of the library branch to reserve from."
        },
        "return_date": {
          "type": "string",
          "description": "The date the book is to be returned (optional). Default is ''"
        }
      },
      "required": [
        "book_id",
        "branch_id"
      ]
    }
  },
  {
    "name": "library.search_book",
    "description": "Searches for a book in the library within the specified city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "book_name": {
          "type": "string",
          "description": "The name of the book to search for."
        },
        "city": {
          "type": "string",
          "description": "The city to search within."
        },
        "availability": {
          "type": "boolean",
          "description": "If true, search for available copies. If false or omitted, search for any copy regardless of availability. Default is false"
        },
        "genre": {
          "type": "string",
          "description": "The genre of the book to filter search (optional). Default is ''"
        }
      },
      "required": [
        "book_name",
        "city"
      ]
    }
  },
  {
    "name": "grocery_delivery.order",
    "description": "Order grocery items from a specific location with optional delivery price limit",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the grocery store"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of items to order"
        },
        "max_delivery_cost": {
          "type": "float",
          "description": "The maximum delivery cost. It is optional. Default 1000000"
        }
      },
      "required": [
        "location",
        "items"
      ]
    }
  },
  {
    "name": "ride_hailing.get_rides",
    "description": "Find ride from source to destination with an optional cost limit",
    "parameters": {
      "type": "dict",
      "properties": {
        "source": {
          "type": "string",
          "description": "The starting point of the journey"
        },
        "destination": {
          "type": "string",
          "description": "The endpoint of the journey"
        },
        "max_cost": {
          "type": "integer",
          "description": "The maximum cost of the ride. It is optional. Default is 1000000"
        }
      },
      "required": [
        "source",
        "destination"
      ]
    }
  },
  {
    "name": "electromagnetism.ampere_law",
    "description": "Calculate magnetic field strength using Ampere's Circuital Law. Input the current enclosed by a circular path and the distance from the center of the circle. Can be applied to a cylindrical or spherical symmetry of consistent magnetic field. ",
    "parameters": {
      "type": "dict",
      "properties": {
        "enclosed_current": {
          "type": "float",
          "description": "The total current enclosed by the loop. In Amperes."
        },
        "radius": {
          "type": "float",
          "description": "The radius of the circle or the distance from the center of the circular path. In meters."
        },
        "mu0": {
          "type": "float",
          "description": "Permeability of free space. Its value is default approximated to be 0.000001256 H/m. Optional"
        }
      },
      "required": [
        "enclosed_current",
        "radius"
      ]
    }
  },
  {
    "name": "electromagnetism.biot_savart_law",
    "description": "Calculate magnetic field strength using Biot-Savart law. Input the current in Ampere and the distance in meters.",
    "parameters": {
      "type": "dict",
      "properties": {
        "current": {
          "type": "integer",
          "description": "The current in the conductor, in Amperes."
        },
        "distance": {
          "type": "integer",
          "description": "Distance from the current carrying conductor, in meters."
        },
        "mu0": {
          "type": "float",
          "description": "Permeability of free space. Its value is default approximated to be 0.000001256 H/m. Optional"
        }
      },
      "required": [
        "current",
        "distance"
      ]
    }
  },
  {
    "name": "electric_field.calculate",
    "description": "Calculate the electric field based on the amount of charge and distance from the charge",
    "parameters": {
      "type": "dict",
      "properties": {
        "Q": {
          "type": "float",
          "description": "The amount of charge in coulombs."
        },
        "r": {
          "type": "float",
          "description": "The distance from the charge in meters."
        }
      },
      "required": [
        "Q",
        "r"
      ]
    }
  },
  {
    "name": "magnetic_field.calculate",
    "description": "Calculate the magnetic field based on the current flowing and the radial distance using Ampere\u2019s law",
    "parameters": {
      "type": "dict",
      "properties": {
        "I": {
          "type": "integer",
          "description": "The electric current flowing in Amperes."
        },
        "r": {
          "type": "float",
          "description": "The radial distance from the line of current in meters."
        }
      },
      "required": [
        "I",
        "r"
      ]
    }
  },
  {
    "name": "electric_force.calculate",
    "description": "Calculate the electric force between two charges at a distance",
    "parameters": {
      "type": "dict",
      "properties": {
        "Q1": {
          "type": "float",
          "description": "The amount of the first charge in coulombs."
        },
        "Q2": {
          "type": "float",
          "description": "The amount of the second charge in coulombs."
        },
        "r": {
          "type": "float",
          "description": "The distance between the two charges in meters."
        }
      },
      "required": [
        "Q1",
        "Q2",
        "r"
      ]
    }
  },
  {
    "name": "calculate_final_temperature",
    "description": "Calculate the final temperature when different quantities of the same gas at different temperatures are mixed.",
    "parameters": {
      "type": "dict",
      "properties": {
        "quantity1": {
          "type": "integer",
          "description": "The quantity of the first sample of gas."
        },
        "temperature1": {
          "type": "integer",
          "description": "The temperature of the first sample of gas."
        },
        "quantity2": {
          "type": "integer",
          "description": "The quantity of the second sample of gas."
        },
        "temperature2": {
          "type": "integer",
          "description": "The temperature of the second sample of gas."
        }
      },
      "required": [
        "quantity1",
        "temperature1",
        "quantity2",
        "temperature2"
      ]
    }
  },
  {
    "name": "calculate_mass",
    "description": "Calculate the mass of a gas given its quantity and molar mass.",
    "parameters": {
      "type": "dict",
      "properties": {
        "quantity": {
          "type": "integer",
          "description": "The quantity of the gas."
        },
        "molar_mass": {
          "type": "integer",
          "description": "The molar mass of the gas."
        }
      },
      "required": [
        "quantity",
        "molar_mass"
      ]
    }
  },
  {
    "name": "biological.calc_biomass",
    "description": "Calculate the biomass from the energy given the energy conversion efficiency.",
    "parameters": {
      "type": "dict",
      "properties": {
        "energy": {
          "type": "float",
          "description": "The total energy produced."
        },
        "efficiency": {
          "type": "float",
          "description": "The conversion efficiency, default value is 10%.",
          "default": 0.1
        }
      },
      "required": [
        "energy"
      ]
    }
  },
  {
    "name": "biological.calc_energy",
    "description": "Calculate energy from amount of substance based on its molecular composition.",
    "parameters": {
      "type": "dict",
      "properties": {
        "mols": {
          "type": "integer",
          "description": "Amount of substance in moles."
        },
        "substance": {
          "type": "string",
          "description": "The chemical formula of the substance."
        },
        "joules_per_mol": {
          "type": "integer",
          "description": "The energy produced or required for the reaction, default value for glucose is 2800 kJ/mol",
          "default": 2800
        }
      },
      "required": [
        "mols",
        "substance"
      ]
    }
  },
  {
    "name": "physical.calc_work",
    "description": "Calculate the work from energy.",
    "parameters": {
      "type": "dict",
      "properties": {
        "energy": {
          "type": "float",
          "description": "The total energy produced."
        },
        "distance": {
          "type": "float",
          "description": "The distance over which the work is done."
        }
      },
      "required": [
        "energy",
        "distance"
      ]
    }
  },
  {
    "name": "unit_conversion.convert",
    "description": "Convert a value from one unit to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "value": {
          "type": "float",
          "description": "The value to be converted."
        },
        "from_unit": {
          "type": "string",
          "description": "The unit to convert from."
        },
        "to_unit": {
          "type": "string",
          "description": "The unit to convert to."
        }
      },
      "required": [
        "value",
        "from_unit",
        "to_unit"
      ]
    }
  },
  {
    "name": "currency_conversion",
    "description": "Convert a value from one currency to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "amount": {
          "type": "float",
          "description": "The amount to be converted."
        },
        "from_currency": {
          "type": "string",
          "description": "The currency to convert from."
        },
        "to_currency": {
          "type": "string",
          "description": "The currency to convert to."
        }
      },
      "required": [
        "amount",
        "from_currency",
        "to_currency"
      ]
    }
  },
  {
    "name": "calculate.weight_in_space",
    "description": "Calculate your weight on different planets given your weight on earth",
    "parameters": {
      "type": "dict",
      "properties": {
        "weight_earth_kg": {
          "type": "integer",
          "description": "Your weight on Earth in Kilograms."
        },
        "planet": {
          "type": "string",
          "description": "The planet you want to know your weight on."
        }
      },
      "required": [
        "weight_earth_kg",
        "planet"
      ]
    }
  },
  {
    "name": "geology.get_era",
    "description": "Get the estimated date of a geological era.",
    "parameters": {
      "type": "dict",
      "properties": {
        "era_name": {
          "type": "string",
          "description": "The name of the geological era. e.g Ice age"
        },
        "calculate_years_ago": {
          "type": "boolean",
          "description": "True if years ago is to be calculated. False by default"
        }
      },
      "required": [
        "era_name"
      ]
    }
  },
  {
    "name": "history.get_event_date",
    "description": "Get the date of an historical event.",
    "parameters": {
      "type": "dict",
      "properties": {
        "event_name": {
          "type": "string",
          "description": "The name of the event."
        },
        "calculate_years_ago": {
          "type": "boolean",
          "description": "True if years ago is to be calculated. False by default"
        }
      },
      "required": [
        "event_name"
      ]
    }
  },
  {
    "name": "filter_list",
    "description": "Filters elements of a list based on a given condition",
    "parameters": {
      "type": "dict",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of elements to filter."
        },
        "condition": {
          "type": "string",
          "description": "The condition to filter the elements on."
        }
      },
      "required": [
        "elements",
        "condition"
      ]
    }
  },
  {
    "name": "sum_elements",
    "description": "Add all elements of a numeric list",
    "parameters": {
      "type": "dict",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The list of numeric elements to add."
        }
      },
      "required": [
        "elements"
      ]
    }
  },
  {
    "name": "sort_list",
    "description": "Sort the elements of a list in ascending or descending order",
    "parameters": {
      "type": "dict",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of elements to sort."
        },
        "order": {
          "type": "string",
          "description": "The order in which to sort the elements. This can be 'asc' for ascending order, or 'desc' for descending order.",
          "default": "asc"
        }
      },
      "required": [
        "elements"
      ]
    }
  },
  {
    "name": "cosine_similarity.calculate",
    "description": "Calculate the cosine similarity between two vectors.",
    "parameters": {
      "type": "dict",
      "properties": {
        "vector1": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The first vector for calculating cosine similarity."
        },
        "vector2": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The second vector for calculating cosine similarity."
        },
        "rounding": {
          "type": "integer",
          "description": "Optional: The number of decimals to round off the result. Default 0"
        }
      },
      "required": [
        "vector1",
        "vector2"
      ]
    }
  },
  {
    "name": "correlation.calculate",
    "description": "Calculate the correlation coefficient between two arrays of numbers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "array1": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The first array of numbers."
        },
        "array2": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The second array of numbers."
        },
        "type": {
          "type": "string",
          "enum": [
            "pearson",
            "spearman"
          ],
          "description": "Optional: The type of correlation coefficient to calculate. Default is 'pearson'."
        }
      },
      "required": [
        "array1",
        "array2"
      ]
    }
  },
  {
    "name": "store.find_nearby",
    "description": "Locate nearby stores based on specific preferences such as being pet-friendly and having disabled access facilities.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city, for example, New York City, NY"
        },
        "preferences": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Pet-friendly",
              "Disabled Access",
              "24 hours",
              "Cafe Inside"
            ]
          },
          "description": "Your preferences for the store."
        }
      },
      "required": [
        "location",
        "preferences"
      ]
    }
  },
  {
    "name": "library.find_nearby",
    "description": "Locate nearby libraries based on specific preferences such as being pet-friendly and having disabled access facilities.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city, for example, New York City, NY"
        },
        "preferences": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Pet-friendly",
              "Disabled Access",
              "24 hours",
              "Cafe Inside"
            ]
          },
          "description": "Your preferences for the library."
        }
      },
      "required": [
        "location",
        "preferences"
      ]
    }
  },
  {
    "name": "calc_Compound_Interest",
    "description": "Compute compound interest.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principle_amount": {
          "type": "integer",
          "description": "The principle amount that is invested."
        },
        "duration": {
          "type": "integer",
          "description": "Duration of time period in years."
        },
        "annual_rate": {
          "type": "float",
          "description": "Interest rate in percentage."
        },
        "compound_freq": {
          "type": "integer",
          "default": 1,
          "description": "The number of times that interest is compounded per unit time."
        }
      },
      "required": [
        "principle_amount",
        "duration",
        "annual_rate"
      ]
    }
  },
  {
    "name": "future_value",
    "description": "Calculates the future value of an investment given an interest rate and time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_investment": {
          "type": "float",
          "description": "The initial investment amount."
        },
        "interest_rate": {
          "type": "float",
          "description": "The annual interest rate (as a decimal)."
        },
        "time": {
          "type": "integer",
          "description": "The number of time periods the money is invested for."
        },
        "num_compoundings": {
          "type": "integer",
          "default": 1,
          "description": "The number of times that interest is compounded per time period."
        }
      },
      "required": [
        "initial_investment",
        "interest_rate",
        "time"
      ]
    }
  },
  {
    "name": "calc_Simple_Interest",
    "description": "Compute simple interest.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principle_amount": {
          "type": "float",
          "description": "The principle amount that is invested."
        },
        "duration": {
          "type": "float",
          "description": "Duration of time period in years."
        },
        "annual_rate": {
          "type": "float",
          "description": "Interest rate in percentage."
        }
      },
      "required": [
        "principle_amount",
        "duration",
        "annual_rate"
      ]
    }
  },
  {
    "name": "house_price_forecast",
    "description": "Predict the house prices for a specific location and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the house price prediction for."
        },
        "months": {
          "type": "integer",
          "description": "Number of future months for the prediction."
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SqFt",
              "Bedrooms",
              "Bathrooms",
              "Location"
            ]
          },
          "description": "Additional features considered for prediction. Not required. Default empty array",
          "optional": true
        }
      },
      "required": [
        "location",
        "months"
      ]
    }
  },
  {
    "name": "weather_forecast",
    "description": "Retrieve a weather forecast for a specific location and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the weather for."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for the forecast."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "stock_market_forecast",
    "description": "Predict the stock prices for a specific company and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company that you want to get the stock price prediction for."
        },
        "days": {
          "type": "integer",
          "description": "Number of future days for the prediction."
        }
      },
      "required": [
        "company",
        "days"
      ]
    }
  },
  {
    "name": "dice_roll_probability",
    "description": "Calculate the probability of a specific sum appearing from rolling two dice.",
    "parameters": {
      "type": "dict",
      "properties": {
        "desired_sum": {
          "type": "integer",
          "description": "The sum for which to calculate the probability."
        },
        "n_rolls": {
          "type": "integer",
          "description": "Number of dice to be rolled. Default is 1",
          "optional": true
        },
        "sides_per_die": {
          "type": "integer",
          "description": "Number of sides on each die."
        }
      },
      "required": [
        "desired_sum",
        "sides_per_die"
      ]
    }
  },
  {
    "name": "flip_coin_probability",
    "description": "Calculate the probability of a specific outcome appearing from flipping a coin.",
    "parameters": {
      "type": "dict",
      "properties": {
        "desired_outcome": {
          "type": "string",
          "description": "The outcome for which to calculate the probability."
        },
        "n_flips": {
          "type": "integer",
          "description": "Number of coins to be flipped. Default 1",
          "optional": true
        }
      },
      "required": [
        "desired_outcome"
      ]
    }
  },
  {
    "name": "shuffle_card_probability",
    "description": "Calculate the probability of a specific card appearing from a shuffled deck.",
    "parameters": {
      "type": "dict",
      "properties": {
        "desired_card": {
          "type": "string",
          "description": "The card for which to calculate the probability."
        },
        "n_decks": {
          "type": "integer",
          "description": "Number of decks to shuffle. Default 1",
          "optional": true
        }
      },
      "required": [
        "desired_card"
      ]
    }
  },
  {
    "name": "unit_conversion",
    "description": "Convert a value from one unit to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "value": {
          "type": "float",
          "description": "The value to be converted."
        },
        "from_unit": {
          "type": "string",
          "description": "The unit to convert from."
        },
        "to_unit": {
          "type": "string",
          "description": "The unit to convert to."
        }
      },
      "required": [
        "value",
        "from_unit",
        "to_unit"
      ]
    }
  },
  {
    "name": "currency_conversion",
    "description": "Convert a value from one currency to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "amount": {
          "type": "integer",
          "description": "The amount to be converted."
        },
        "from_currency": {
          "type": "string",
          "description": "The currency to convert from."
        },
        "to_currency": {
          "type": "string",
          "description": "The currency to convert to."
        }
      },
      "required": [
        "amount",
        "from_currency",
        "to_currency"
      ]
    }
  },
  {
    "name": "linear_regression",
    "description": "Applies linear regression to a given set of independent variables to make a prediction.",
    "parameters": {
      "type": "dict",
      "properties": {
        "independent_var": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The independent variables."
        },
        "dependent_var": {
          "type": "string",
          "description": "The dependent variable."
        },
        "forecast_period": {
          "type": "integer",
          "description": "The number of years to forecast the prices. Default 1",
          "optional": true
        }
      },
      "required": [
        "independent_var",
        "dependent_var"
      ]
    }
  },
  {
    "name": "random_forest_regression",
    "description": "Applies Random Forest Regression to a given set of independent variables to make a prediction.",
    "parameters": {
      "type": "dict",
      "properties": {
        "independent_var": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The independent variables."
        },
        "dependent_var": {
          "type": "string",
          "description": "The dependent variable."
        },
        "n_estimators": {
          "type": "integer",
          "description": "The number of trees in the forest. Default 1",
          "optional": true
        },
        "forecast_period": {
          "type": "integer",
          "description": "The number of years to forecast the prices. Default 1",
          "optional": true
        }
      },
      "required": [
        "independent_var",
        "dependent_var"
      ]
    }
  },
  {
    "name": "corporate_finance.dividend_data",
    "description": "Get historical dividend data of a specific company within a particular duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company that you want to get the dividend data for."
        },
        "years": {
          "type": "integer",
          "description": "Number of past years for which to retrieve the data."
        },
        "frequency": {
          "type": "string",
          "enum": [
            "quarterly",
            "annually"
          ],
          "description": "The frequency of the dividend payment. Default annually"
        }
      },
      "required": [
        "company",
        "years"
      ]
    }
  },
  {
    "name": "stock_market_data",
    "description": "Retrieve stock market data for a specific company and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company that you want to get the stock market data for."
        },
        "days": {
          "type": "integer",
          "description": "Number of past days for which to retrieve the data."
        }
      },
      "required": [
        "company",
        "days"
      ]
    }
  },
  {
    "name": "stock_forecast",
    "description": "Predict the future stock price for a specific company and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company that you want to get the stock price prediction for."
        },
        "days": {
          "type": "integer",
          "description": "Number of future days for which to predict the stock price."
        },
        "model": {
          "type": "string",
          "description": "The model to use for prediction. Default 'regression'"
        }
      },
      "required": [
        "company",
        "days"
      ]
    }
  },
  {
    "name": "volume_traded",
    "description": "Calculate the total volume of stocks traded over a certain period of time",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "Name of the company to get data for"
        },
        "days": {
          "type": "integer",
          "description": "Number of past days to calculate volume traded for"
        },
        "data_source": {
          "type": "string",
          "description": "Source to fetch the financial data. default is 'yahoo finance'"
        }
      },
      "required": [
        "company",
        "days"
      ]
    }
  },
  {
    "name": "total_revenue",
    "description": "Calculate the total revenue of a company over a specific period of time",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "Name of the company to get data for"
        },
        "days": {
          "type": "integer",
          "description": "Number of past days to calculate total revenue for"
        },
        "data_source": {
          "type": "string",
          "description": "Source to fetch the financial data. default is 'google finance'"
        }
      },
      "required": [
        "company",
        "days"
      ]
    }
  },
  {
    "name": "avg_closing_price",
    "description": "Calculate the average closing price of a specific company over a given period of time",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "Name of the company to get data for"
        },
        "days": {
          "type": "integer",
          "description": "Number of past days to calculate average closing price for"
        },
        "data_source": {
          "type": "string",
          "description": "Source to fetch the stock data. default is 'yahoo finance'"
        }
      },
      "required": [
        "company",
        "days"
      ]
    }
  },
  {
    "name": "financial.compound_interest",
    "description": "Calculates compound interest.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principle": {
          "type": "integer",
          "description": "The initial amount of money that is being compounded."
        },
        "rate": {
          "type": "float",
          "description": "The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05."
        },
        "time": {
          "type": "integer",
          "description": "The amount of time, in years, that the money is to be compounded for."
        },
        "n": {
          "type": "integer",
          "description": "The number of times interest applied per time period."
        }
      },
      "required": [
        "principle",
        "rate",
        "time",
        "n"
      ]
    }
  },
  {
    "name": "financial.simple_interest",
    "description": "Calculates simple interest.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principle": {
          "type": "float",
          "description": "The initial amount of money that interest is being calculated for."
        },
        "rate": {
          "type": "float",
          "description": "The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05."
        },
        "time": {
          "type": "integer",
          "description": "The amount of time, in years, that the money is to be compounded for."
        }
      },
      "required": [
        "principle",
        "rate",
        "time"
      ]
    }
  },
  {
    "name": "doctor.search",
    "description": "Search for a doctor based on area of expertise and location",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Los Angeles, CA"
        },
        "specialization": {
          "type": "string",
          "description": "Medical specialization. For example, 'Cardiology', 'Orthopedics', 'Gynecology'."
        }
      },
      "required": [
        "location",
        "specialization"
      ]
    }
  },
  {
    "name": "lawyer.search",
    "description": "Search for a lawyer based on area of expertise and location",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Los Angeles, CA"
        },
        "expertise": {
          "type": "string",
          "description": "Area of legal expertise. For example, 'Marriage', 'Criminal', 'Business'."
        }
      },
      "required": [
        "location",
        "expertise"
      ]
    }
  },
  {
    "name": "car_rental",
    "description": "Rent a car near you based on your preference.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Your location"
        },
        "car_type": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Type of cars that you want to rent."
        },
        "fuel_type": {
          "type": "string",
          "description": "Preferred fuel type of car. Gas, diesel, electric, hybrid etc. Default 'gas'"
        }
      },
      "required": [
        "location",
        "car_type"
      ]
    }
  },
  {
    "name": "lawyer_finder",
    "description": "Locate lawyers near you based on their specialization.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Your location"
        },
        "specialization": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specializations of lawyer that you are looking for."
        },
        "experience": {
          "type": "integer",
          "description": "Experience in years that lawyer has. Default 1"
        }
      },
      "required": [
        "location",
        "specialization"
      ]
    }
  },
  {
    "name": "event_search",
    "description": "Search for events happening in a specific location for a future date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the event information for."
        },
        "days": {
          "type": "integer",
          "description": "Number of future days for which to retrieve the event information."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "movie_showtimes",
    "description": "Retrieve movie showtimes for a specific location and for a future date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the movie showtimes for."
        },
        "days": {
          "type": "integer",
          "description": "Number of future days for which to retrieve the showtimes."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "humidity_temperature_forecast",
    "description": "Retrieve forecast of humidity and temperature for a specific location and for a future date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the humidity and temperature forecast for."
        },
        "days": {
          "type": "integer",
          "description": "Number of future days for which to retrieve the forecast."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "home_renovation_expert.find_specialty",
    "description": "Search for a home renovation expert based on the location and specialization",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "City and state where the professional is based, e.g. Portland, OR."
        },
        "specialization": {
          "type": "string",
          "description": "A specific area of expertise, such as kitchen or bathroom renovation."
        },
        "years_experience": {
          "type": "integer",
          "description": "Number of years the professional has been practicing in their field. (optional)",
          "default": 0
        }
      },
      "required": [
        "location",
        "specialization"
      ]
    }
  },
  {
    "name": "landscape_architect.find_specialty",
    "description": "Search for a landscape architect based on the location and specialization",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "City and state where the professional is based, e.g. Portland, OR."
        },
        "specialization": {
          "type": "string",
          "description": "A specific area of expertise. Common areas include residential design, commercial design, urban design, and park design."
        },
        "years_experience": {
          "type": "integer",
          "description": "Number of years the professional has been practicing in their field. (optional)",
          "default": 0
        }
      },
      "required": [
        "location",
        "specialization"
      ]
    }
  },
  {
    "name": "nature_park.find_nearby",
    "description": "Locate nearby nature parks based on specific criteria like camping availability and scenic views.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Boston, MA."
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Camping",
              "Scenic View",
              "Trails",
              "Picnic Areas"
            ]
          },
          "description": "Preferred features in nature park."
        }
      },
      "required": [
        "location",
        "features"
      ]
    }
  },
  {
    "name": "restaurant.find_nearby",
    "description": "Locate nearby restaurants based on specific criteria.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Boston, MA."
        },
        "amenities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Delivery",
              "Outdoor Seating",
              "Vegetarian Options"
            ]
          },
          "description": "Preferred amenities in restaurant. Default empty array []"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "air_quality_forecast",
    "description": "Retrieve an air quality forecast for a specific location and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the air quality forecast for."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for the forecast."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "news",
    "description": "Retrieve news articles for a specific topic.",
    "parameters": {
      "type": "dict",
      "properties": {
        "topic": {
          "type": "string",
          "description": "The topic that you want to get the news for."
        },
        "days": {
          "type": "integer",
          "description": "Number of past days for which to retrieve the news."
        }
      },
      "required": [
        "topic",
        "days"
      ]
    }
  },
  {
    "name": "uv_index.get_future",
    "description": "Retrieve UV index data for a specified location and date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location to retrieve the UV index for."
        },
        "date": {
          "type": "string",
          "description": "The date for the UV index, in the format mm-dd-yyyy."
        }
      },
      "required": [
        "location",
        "date"
      ]
    }
  },
  {
    "name": "rainfall_prediction",
    "description": "Retrieve rainfall data for a specified location and date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location to retrieve the rainfall prediction for."
        },
        "date": {
          "type": "string",
          "description": "The date for the rainfall prediction, in the format mm/dd/yyyy.'"
        }
      },
      "required": [
        "location",
        "date"
      ]
    }
  },
  {
    "name": "snowfall_prediction",
    "description": "Retrieve snowfall data for a specified location and date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location to retrieve the snowfall prediction for."
        },
        "date": {
          "type": "string",
          "description": "The date for the snowfall prediction, in the format mm-dd-yyyy."
        }
      },
      "required": [
        "location",
        "date"
      ]
    }
  },
  {
    "name": "timezones.get_difference",
    "description": "Find the time difference between two cities.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city1": {
          "type": "string",
          "description": "The first city."
        },
        "city2": {
          "type": "string",
          "description": "The second city."
        }
      },
      "required": [
        "city1",
        "city2"
      ]
    }
  },
  {
    "name": "geodistance.find",
    "description": "Find the distance between two cities on the globe.",
    "parameters": {
      "type": "dict",
      "properties": {
        "origin": {
          "type": "string",
          "description": "The originating city for the distance calculation."
        },
        "destination": {
          "type": "string",
          "description": "The destination city for the distance calculation."
        },
        "unit": {
          "type": "string",
          "default": "miles",
          "description": "The unit of measure for the distance calculation."
        }
      },
      "required": [
        "origin",
        "destination"
      ]
    }
  },
  {
    "name": "flights.search",
    "description": "Find flights between two cities.",
    "parameters": {
      "type": "dict",
      "properties": {
        "from_city": {
          "type": "string",
          "description": "The city to depart from."
        },
        "to_city": {
          "type": "string",
          "description": "The city to arrive at."
        },
        "date": {
          "type": "string",
          "default": "next monday",
          "description": "The date to fly."
        }
      },
      "required": [
        "from_city",
        "to_city"
      ]
    }
  },
  {
    "name": "calculate_distance",
    "description": "Calculate distance between two locations.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_point": {
          "type": "string",
          "description": "Starting point of the journey."
        },
        "end_point": {
          "type": "string",
          "description": "Ending point of the journey."
        }
      },
      "required": [
        "start_point",
        "end_point"
      ]
    }
  },
  {
    "name": "traffic_estimate",
    "description": "Estimate traffic from one location to another for a specific time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "Starting location for the journey."
        },
        "end_location": {
          "type": "string",
          "description": "Ending location for the journey."
        },
        "time_period": {
          "type": "string",
          "description": "Specify a time frame to estimate the traffic, 'now' for current, 'weekend' for the coming weekend. Default 'now'"
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "translate",
    "description": "Translate text from a specified source language to a specified target language.",
    "parameters": {
      "type": "dict",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text to be translated."
        },
        "source_language": {
          "type": "string",
          "description": "The language the text is currently in."
        },
        "target_language": {
          "type": "string",
          "description": "The language the text will be translated to."
        }
      },
      "required": [
        "text",
        "source_language",
        "target_language"
      ]
    }
  },
  {
    "name": "sentiment_analysis",
    "description": "Analyze the sentiment of a specified text.",
    "parameters": {
      "type": "dict",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text whose sentiment is to be analyzed."
        }
      },
      "required": [
        "text"
      ]
    }
  },
  {
    "name": "word_count",
    "description": "Count the number of words in the given text.",
    "parameters": {
      "type": "dict",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text that the number of words is to be calculated."
        }
      },
      "required": [
        "text"
      ]
    }
  },
  {
    "name": "library.search_books",
    "description": "Search for a book in a given library with optional parameters",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Name or city of library"
        },
        "genre": {
          "type": "string",
          "description": "Genre of the book"
        },
        "title": {
          "type": "string",
          "description": "Title of the book. Default ''"
        }
      },
      "required": [
        "location",
        "genre"
      ]
    }
  },
  {
    "name": "google.books_search",
    "description": "Search for a book in the Google Books library with optional parameters",
    "parameters": {
      "type": "dict",
      "properties": {
        "genre": {
          "type": "string",
          "description": "Genre of the book"
        },
        "title": {
          "type": "string",
          "description": "Title of the book. Default ''"
        }
      },
      "required": [
        "genre"
      ]
    }
  },
  {
    "name": "openlibrary.books_search",
    "description": "Search for a book in the Open Library with optional parameters",
    "parameters": {
      "type": "dict",
      "properties": {
        "genre": {
          "type": "string",
          "description": "Genre of the book"
        },
        "title": {
          "type": "string",
          "description": "Title of the book. Default ''"
        }
      },
      "required": [
        "genre"
      ]
    }
  },
  {
    "name": "MBTI.analyse",
    "description": "Analyse personality based on the Myers-Briggs Type Indicator (MBTI) which sorts for preferences and generates a 4-letter personality type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "thinking_vs_feeling": {
          "type": "string",
          "description": "Preference of user between thinking and feeling."
        },
        "introverted_vs_extroverted": {
          "type": "string",
          "description": "Preference of user between introverted and extroverted."
        },
        "judging_vs_perceiving": {
          "type": "string",
          "description": "Preference of user between judging and perceiving."
        },
        "sensing_vs_intuition": {
          "type": "string",
          "description": "Preference of user between sensing and intuition."
        }
      },
      "required": [
        "thinking_vs_feeling",
        "introverted_vs_extroverted",
        "judging_vs_perceiving",
        "sensing_vs_intuition"
      ]
    }
  },
  {
    "name": "five_factor_model.analyse",
    "description": "Analyse personality based on the five-factor model, also known as the Big Five, which measures openness, conscientiousness, extraversion, agreeableness, and neuroticism.",
    "parameters": {
      "type": "dict",
      "properties": {
        "talkative": {
          "type": "boolean",
          "description": "Indicates if the user is talkative."
        },
        "nervous": {
          "type": "boolean",
          "description": "Indicates if the user gets nervous easily."
        },
        "artistic_interests": {
          "type": "boolean",
          "description": "Indicates if the user has many artistic interests."
        },
        "lazy": {
          "type": "boolean",
          "description": "Indicates if the user tends to be lazy."
        },
        "forgiving": {
          "type": "boolean",
          "description": "Indicates if the user is forgiving."
        }
      },
      "required": [
        "talkative",
        "nervous",
        "artistic_interests",
        "lazy",
        "forgiving"
      ]
    }
  },
  {
    "name": "european_history.get_events",
    "description": "Provides a list of major historical events based on the specified country and century.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "Country name."
        },
        "century": {
          "type": "integer",
          "description": "Century as an integer. For example, for the 1700s, input '18'."
        },
        "event_type": {
          "type": "string",
          "description": "Type of the event such as 'war', 'invention', 'revolution' etc. This field is optional. Default is 'all'"
        }
      },
      "required": [
        "country",
        "century"
      ]
    }
  },
  {
    "name": "european_history.get_culture",
    "description": "Provides information on cultural trends, art movements, philosophical ideas based on the specified country and century.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "Country name."
        },
        "century": {
          "type": "integer",
          "description": "Century as an integer. For example, for the 1700s, input '18'."
        },
        "aspect": {
          "type": "string",
          "description": "Aspect of culture such as 'literature', 'art', 'philosophy' etc. This field is optional. Default 'any'"
        }
      },
      "required": [
        "country",
        "century"
      ]
    }
  },
  {
    "name": "european_history.get_monarchs",
    "description": "Provides a list of monarchs based on the specified country and century.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "Country name."
        },
        "century": {
          "type": "integer",
          "description": "Century as an integer. For example, for the 1700s, input '18'."
        }
      },
      "required": [
        "country",
        "century"
      ]
    }
  },
  {
    "name": "get_bureau_statistics",
    "description": "Retrieve statistical data for a specific year and statistical category",
    "parameters": {
      "type": "dict",
      "properties": {
        "year": {
          "type": "integer",
          "description": "The year for which to retrieve the statistical data"
        },
        "category": {
          "type": "string",
          "description": "The statistical category (e.g., employment, crime, health)"
        }
      },
      "required": [
        "year",
        "category"
      ]
    }
  },
  {
    "name": "get_population",
    "description": "Retrieve population data for a specific year and population category",
    "parameters": {
      "type": "dict",
      "properties": {
        "year": {
          "type": "integer",
          "description": "The year for which to retrieve the population data"
        },
        "category": {
          "type": "string",
          "description": "The population category (e.g., total, veterans, women)"
        }
      },
      "required": [
        "year",
        "category"
      ]
    }
  },
  {
    "name": "get_demographics",
    "description": "Retrieve demographic data for a specific year and demographic category",
    "parameters": {
      "type": "dict",
      "properties": {
        "year": {
          "type": "integer",
          "description": "The year for which to retrieve the demographic data"
        },
        "category": {
          "type": "string",
          "description": "The demographic category (e.g., gender, race, age)"
        }
      },
      "required": [
        "year",
        "category"
      ]
    }
  },
  {
    "name": "us_history.population_by_state_year",
    "description": "Retrieve historical population data for a specific U.S. state and year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "state": {
          "type": "string",
          "description": "The U.S. state for which to retrieve the population."
        },
        "year": {
          "type": "integer",
          "description": "The year for which to retrieve the population."
        }
      },
      "required": [
        "state",
        "year"
      ]
    }
  },
  {
    "name": "us_economy.gdp_by_state_year",
    "description": "Retrieve historical GDP data for a specific U.S. state and year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "state": {
          "type": "string",
          "description": "The U.S. state for which to retrieve the GDP."
        },
        "year": {
          "type": "integer",
          "description": "The year for which to retrieve the GDP."
        },
        "adjustment": {
          "type": "string",
          "description": "The type of adjustment for inflation, 'Real' or 'Nominal'. Optional, 'Nominal' by default.",
          "enum": [
            "Real",
            "Nominal"
          ]
        }
      },
      "required": [
        "state",
        "year"
      ]
    }
  },
  {
    "name": "religion.get_core_beliefs",
    "description": "Retrieves the core beliefs and practices of a specified religion.",
    "parameters": {
      "type": "dict",
      "properties": {
        "religion": {
          "type": "string",
          "description": "Name of the religion for which to retrieve the core beliefs and practices."
        }
      },
      "required": [
        "religion"
      ]
    }
  },
  {
    "name": "religion.get_origin",
    "description": "Retrieves the origin and founder information of a specified religion.",
    "parameters": {
      "type": "dict",
      "properties": {
        "religion": {
          "type": "string",
          "description": "Name of the religion for which to retrieve the founder and origin."
        }
      },
      "required": [
        "religion"
      ]
    }
  },
  {
    "name": "art_auction.fetch_artwork_price",
    "description": "Fetch the price of a specific artwork on the auction platform.",
    "parameters": {
      "type": "dict",
      "properties": {
        "artwork_name": {
          "type": "string",
          "description": "The name of the artwork to be searched."
        },
        "artist": {
          "type": "string",
          "description": "The artist's name to ensure the precise artwork is fetched."
        },
        "platform": {
          "type": "string",
          "description": "The platform where the artwork's price should be fetched from.",
          "default": "all"
        }
      },
      "required": [
        "artwork_name",
        "artist"
      ]
    }
  },
  {
    "name": "library.search_book",
    "description": "Search for a specific book in the library.",
    "parameters": {
      "type": "dict",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the book to be searched."
        },
        "author": {
          "type": "string",
          "description": "The author of the book to ensure the precise book is fetched."
        },
        "platform": {
          "type": "string",
          "description": "The library where the book should be fetched from.",
          "default": "all"
        }
      },
      "required": [
        "title",
        "author"
      ]
    }
  },
  {
    "name": "paint_color.trends",
    "description": "Find the most popular paint color for a specific area in the home.",
    "parameters": {
      "type": "dict",
      "properties": {
        "room": {
          "type": "string",
          "description": "Type of the room e.g. Living room, Bathroom etc."
        },
        "period": {
          "type": "string",
          "enum": [
            "Daily",
            "Weekly",
            "Monthly",
            "Yearly"
          ],
          "description": "The period over which to check the paint color trend. Default 'Daily'"
        }
      },
      "required": [
        "room"
      ]
    }
  },
  {
    "name": "house_price_trends",
    "description": "Find the average house price in a specific area.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "City and state, e.g. New York, NY."
        },
        "period": {
          "type": "string",
          "enum": [
            "Daily",
            "Weekly",
            "Monthly",
            "Yearly"
          ],
          "description": "The period over which to check the price trend. Default 'Yearly'"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "painting.create_custom",
    "description": "Order a custom painting with your preferred color.",
    "parameters": {
      "type": "dict",
      "properties": {
        "subject": {
          "type": "string",
          "description": "The subject of the painting, e.g. horse"
        },
        "color": {
          "type": "string",
          "enum": [
            "Red",
            "Blue",
            "Green",
            "Yellow",
            "Black"
          ],
          "description": "Preferred main color for the painting."
        },
        "size": {
          "type": "integer",
          "description": "The desired size for the painting in inches. This parameter is optional. Default 12"
        }
      },
      "required": [
        "subject",
        "color"
      ]
    }
  },
  {
    "name": "sculpture.create_custom",
    "description": "Order a custom sculpture with your preferred material.",
    "parameters": {
      "type": "dict",
      "properties": {
        "item": {
          "type": "string",
          "description": "The subject of the sculpture, e.g. horse"
        },
        "material": {
          "type": "string",
          "enum": [
            "Bronze",
            "Marble",
            "Terracotta",
            "Wood",
            "Stone"
          ],
          "description": "Preferred material for the sculpture."
        },
        "size": {
          "type": "integer",
          "description": "The desired size for the sculpture in inches. This parameter is optional. Default 12"
        }
      },
      "required": [
        "item",
        "material"
      ]
    }
  },
  {
    "name": "tourist_attraction.find",
    "description": "Search for tourist attractions based on type and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "attractionType": {
          "type": "string",
          "description": "Type of the attraction. E.g., monument, museum, park."
        },
        "location": {
          "type": "string",
          "description": "Location or city where the attraction is."
        }
      },
      "required": [
        "attractionType",
        "location"
      ]
    }
  },
  {
    "name": "artwork_search.find",
    "description": "Search for artworks based on type and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the artwork. E.g., painting, sculpture, installation."
        },
        "location": {
          "type": "string",
          "description": "Location or city where the artwork is."
        },
        "era": {
          "type": "string",
          "description": "Time period of the artwork, can be 'contemporary', 'modern', 'renaissance', etc. Default 'contemporary'",
          "optional": "True"
        }
      },
      "required": [
        "type",
        "location"
      ]
    }
  },
  {
    "name": "park_search.find",
    "description": "Search for parks based on facilities and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "facilities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of facilities in the park."
        },
        "location": {
          "type": "string",
          "description": "Location or city where the park is."
        }
      },
      "required": [
        "facilities",
        "location"
      ]
    }
  },
  {
    "name": "tourist_spot_info",
    "description": "Retrieve information about a specific tourist spot.",
    "parameters": {
      "type": "dict",
      "properties": {
        "spot": {
          "type": "string",
          "description": "The name of the tourist spot you want to get information for."
        },
        "city": {
          "type": "string",
          "description": "The city where the tourist spot is located."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "timing",
              "attractions",
              "tickets",
              "accessibility",
              "history"
            ]
          },
          "description": "Details of the tourist spot to get information on. For multiple details, separate them by comma.",
          "default": "timing, attractions"
        }
      },
      "required": [
        "spot",
        "city"
      ]
    }
  },
  {
    "name": "museum_info",
    "description": "Retrieve information about a specific museum.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum": {
          "type": "string",
          "description": "The name of the museum you want to get information for."
        },
        "city": {
          "type": "string",
          "description": "The city where the museum is located."
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "timings",
              "exhibitions",
              "accessibility",
              "events",
              "history"
            ]
          },
          "description": "Features of the museum to get information on. For multiple features, separate them by comma.",
          "default": "timings, exhibitions"
        }
      },
      "required": [
        "museum",
        "city"
      ]
    }
  },
  {
    "name": "restaurant_info",
    "description": "Get restaurant information for a specific area.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location for which to find restaurants."
        },
        "food_type": {
          "type": "string",
          "description": "Type of cuisine for which to find restaurants. Default 'any'",
          "enum": [
            "Italian",
            "Chinese",
            "Mexican",
            "American"
          ]
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "exhibition_info",
    "description": "Get exhibition information for a specific museum.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum_name": {
          "type": "string",
          "description": "Name of the museum for which to find exhibitions."
        },
        "month": {
          "type": "integer",
          "description": "Number of upcoming months for which to retrieve exhibition details. Default 1"
        }
      },
      "required": [
        "museum_name"
      ]
    }
  },
  {
    "name": "music_shop.find_nearby",
    "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Nashville, TN"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Guitar Lessons",
              "Violin Lessons",
              "Piano Lessons",
              "Ukulele Lessons"
            ]
          },
          "description": "Types of instrument lessons offered in the shop. Default empty array"
        },
        "instruments": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Guitars",
              "Violins",
              "Pianos",
              "Drums"
            ]
          },
          "description": "Types of instruments sold in the shop. Default empty array"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "gym.find_nearby",
    "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Nashville, TN"
        },
        "classes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Yoga",
              "Spin",
              "Zumba",
              "CrossFit"
            ]
          },
          "description": "Types of fitness classes offered in the gym. Default empty array"
        },
        "equipment": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Treadmills",
              "Ellipticals",
              "Weight Machines",
              "Free Weights"
            ]
          },
          "description": "Types of gym equipment available. Default empty array"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "concert.book_ticket",
    "description": "Book a ticket for a concert at a specific location with various add-ons like backstage pass.",
    "parameters": {
      "type": "dict",
      "properties": {
        "artist": {
          "type": "string",
          "description": "Name of the artist for the concert."
        },
        "location": {
          "type": "string",
          "description": "City where the concert will take place."
        },
        "add_ons": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Backstage Pass",
              "VIP Seating",
              "Parking Pass"
            ]
          },
          "description": "Add-ons for the concert. Default empty array"
        }
      },
      "required": [
        "artist",
        "location"
      ]
    }
  },
  {
    "name": "festival.book_ticket",
    "description": "Book a ticket for a festival at a specific location with various add-ons like camping access.",
    "parameters": {
      "type": "dict",
      "properties": {
        "festival": {
          "type": "string",
          "description": "Name of the festival."
        },
        "location": {
          "type": "string",
          "description": "City where the festival will take place."
        },
        "add_ons": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Camping Pass",
              "VIP Seating",
              "Parking Pass"
            ]
          },
          "description": "Add-ons for the festival. Default empty array"
        }
      },
      "required": [
        "festival",
        "location"
      ]
    }
  },
  {
    "name": "music.generate",
    "description": "Generate a piece of music given a key, tempo, and time signature.",
    "parameters": {
      "type": "dict",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the piece, e.g., C Major."
        },
        "tempo": {
          "type": "integer",
          "description": "Tempo of the piece in beats per minute."
        },
        "time_signature": {
          "type": "string",
          "description": "Time signature of the piece, e.g., 4/4. Default '4/4'",
          "optional": true
        }
      },
      "required": [
        "key",
        "tempo"
      ]
    }
  },
  {
    "name": "audio.generate",
    "description": "Generate an audio signal given a frequency, amplitude, and duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "frequency": {
          "type": "float",
          "description": "Frequency of the audio signal in Hz."
        },
        "amplitude": {
          "type": "float",
          "description": "Amplitude of the audio signal."
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the audio signal in seconds. Default 1",
          "optional": true
        }
      },
      "required": [
        "frequency",
        "amplitude"
      ]
    }
  },
  {
    "name": "team_stats.get_top_scorer",
    "description": "Fetch the top scorer of a specified football team.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the football team."
        },
        "competition": {
          "type": "string",
          "description": "Competition for which to fetch stats (optional). Default ''"
        }
      },
      "required": [
        "team_name"
      ]
    }
  },
  {
    "name": "league_stats.get_top_scorer",
    "description": "Fetch the top scorer of a specified football league.",
    "parameters": {
      "type": "dict",
      "properties": {
        "league_name": {
          "type": "string",
          "description": "The name of the football league."
        },
        "season": {
          "type": "string",
          "description": "Season for which to fetch stats (optional). Default ''"
        }
      },
      "required": [
        "league_name"
      ]
    }
  },
  {
    "name": "player_stats.get_all_time_goals",
    "description": "Fetch all-time goals scored by a particular football player for a specified team.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The name of the football player."
        },
        "team_name": {
          "type": "string",
          "description": "The name of the team for which player has played."
        },
        "competition": {
          "type": "string",
          "description": "Competition for which to fetch stats (optional). Default ''"
        }
      },
      "required": [
        "player_name",
        "team_name"
      ]
    }
  },
  {
    "name": "getTopGoalScorers",
    "description": "Returns the top goal scorers for a specific competition and team",
    "parameters": {
      "type": "dict",
      "properties": {
        "competition": {
          "type": "string",
          "description": "The name of the competition (for example, 'UEFA Champions League')."
        },
        "team": {
          "type": "string",
          "description": "The name of the team (for example, 'Barcelona')."
        },
        "number": {
          "type": "integer",
          "description": "The number of top goal scorers to retrieve."
        }
      },
      "required": [
        "competition",
        "team",
        "number"
      ]
    }
  },
  {
    "name": "getTopAssists",
    "description": "Returns the top assist makers for a specific competition and team",
    "parameters": {
      "type": "dict",
      "properties": {
        "competition": {
          "type": "string",
          "description": "The name of the competition (for example, 'UEFA Champions League')."
        },
        "team": {
          "type": "string",
          "description": "The name of the team (for example, 'Barcelona')."
        },
        "number": {
          "type": "integer",
          "description": "The number of top assist makers to retrieve."
        }
      },
      "required": [
        "competition",
        "team",
        "number"
      ]
    }
  },
  {
    "name": "basketball_scores.get_scores",
    "description": "Retrieve basketball scores for a specific team and league within a certain range of rounds.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The basketball team whose scores are to be retrieved."
        },
        "league": {
          "type": "string",
          "description": "The league in which the team competes."
        },
        "rounds": {
          "type": "integer",
          "description": "Number of past rounds for which to retrieve the scores."
        }
      },
      "required": [
        "team",
        "league",
        "rounds"
      ]
    }
  },
  {
    "name": "soccer_scores.get_scores",
    "description": "Retrieve soccer scores for a specific team and league within a certain range of rounds.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The soccer team whose scores are to be retrieved."
        },
        "league": {
          "type": "string",
          "description": "The league in which the team competes."
        },
        "rounds": {
          "type": "integer",
          "description": "Number of past rounds for which to retrieve the scores."
        }
      },
      "required": [
        "team",
        "league",
        "rounds"
      ]
    }
  },
  {
    "name": "BoardGameGeek.recommend",
    "description": "Generate game recommendation from BoardGameGeek store based on number of players and category.",
    "parameters": {
      "type": "dict",
      "properties": {
        "numPlayers": {
          "type": "integer",
          "description": "The number of players who will play the game."
        },
        "category": {
          "type": "string",
          "description": "The preferred category of board game. E.g. strategy, family, party etc."
        },
        "difficulty": {
          "type": "string",
          "description": "Preferred difficulty level. E.g. beginner, intermediate, advanced etc. This is an optional parameter. Default 'beginner'"
        }
      },
      "required": [
        "numPlayers",
        "category"
      ]
    }
  },
  {
    "name": "AmazonGameStore.recommend",
    "description": "Generate game recommendation from Amazon Game Store based on number of players and category.",
    "parameters": {
      "type": "dict",
      "properties": {
        "numOfPlayers": {
          "type": "integer",
          "description": "The number of players who will play the game."
        },
        "category": {
          "type": "string",
          "description": "The preferred category of board game. E.g. strategy, family, party etc."
        },
        "priceRange": {
          "type": "string",
          "description": "The price range you are willing to pay for the board game. E.g. $10-$20, $20-$30 etc. This is an optional parameter. Default ''"
        }
      },
      "required": [
        "numOfPlayers",
        "category"
      ]
    }
  },
  {
    "name": "games.reviews.find",
    "description": "Find reviews for a specific game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The name of the game."
        },
        "region": {
          "type": "string",
          "description": "The region where the reviews are coming from (optional, default is 'global')"
        }
      },
      "required": [
        "game"
      ]
    }
  },
  {
    "name": "games.update.find",
    "description": "Find the latest updates or patches for a specific game on a specified gaming platform.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The name of the game."
        },
        "platform": {
          "type": "string",
          "description": "The gaming platform, e.g. Xbox, Playstation, PC."
        },
        "region": {
          "type": "string",
          "description": "The region of the update (optional, default is 'global')"
        }
      },
      "required": [
        "game",
        "platform"
      ]
    }
  },
  {
    "name": "games.price.find",
    "description": "Find the current price for a specific game on a specified gaming platform.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The name of the game."
        },
        "platform": {
          "type": "string",
          "description": "The gaming platform, e.g. Xbox, Playstation, PC."
        }
      },
      "required": [
        "game",
        "platform"
      ]
    }
  },
  {
    "name": "video_games.get_player_count",
    "description": "Retrieves the number of active players for a specified video game and year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game_title": {
          "type": "string",
          "description": "The title of the video game."
        },
        "year": {
          "type": "integer",
          "description": "The year in question."
        },
        "platform": {
          "type": "string",
          "optional": true,
          "description": "The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default ''"
        }
      },
      "required": [
        "game_title",
        "year"
      ]
    }
  },
  {
    "name": "video_games.get_sales",
    "description": "Retrieves the sales figures for a specified video game and year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game_title": {
          "type": "string",
          "description": "The title of the video game."
        },
        "year": {
          "type": "integer",
          "description": "The year in question."
        },
        "platform": {
          "type": "string",
          "optional": true,
          "description": "The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default ''"
        }
      },
      "required": [
        "game_title",
        "year"
      ]
    }
  },
  {
    "name": "restaurant_search",
    "description": "Searches for restaurants based on a list of preferred ingredients and maximum calorie count.",
    "parameters": {
      "type": "dict",
      "properties": {
        "ingredients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of ingredients you prefer in the restaurant's dishes."
        },
        "calories": {
          "type": "integer",
          "description": "The maximum calorie count you prefer for the restaurant's dishes."
        },
        "meal": {
          "type": "string",
          "description": "Type of the meal for the restaurant's dishes, it's optional and could be breakfast, lunch or dinner. Default 'lunch'"
        }
      },
      "required": [
        "ingredients",
        "calories"
      ]
    }
  },
  {
    "name": "ingredient_replace",
    "description": "Replaces an ingredient in a recipe with a substitute, keeping the calories below a certain number.",
    "parameters": {
      "type": "dict",
      "properties": {
        "original_ingredient": {
          "type": "string",
          "description": "The ingredient in the recipe to replace."
        },
        "replacement_ingredient": {
          "type": "string",
          "description": "The substitute ingredient to replace the original one."
        },
        "calories": {
          "type": "integer",
          "description": "The maximum number of calories for the recipe after replacement."
        }
      },
      "required": [
        "original_ingredient",
        "replacement_ingredient",
        "calories"
      ]
    }
  },
  {
    "name": "recipe_search",
    "description": "Searches for recipes based on a list of ingredients and a maximum caloric value.",
    "parameters": {
      "type": "dict",
      "properties": {
        "ingredients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of ingredients you want to use in the recipe."
        },
        "calories": {
          "type": "integer",
          "description": "The maximum number of calories for the recipe."
        },
        "meal": {
          "type": "string",
          "description": "Type of the meal for the recipe, it's optional and could be breakfast, lunch or dinner. Default 'lunch'"
        }
      },
      "required": [
        "ingredients",
        "calories"
      ]
    }
  },
  {
    "name": "events.find_event",
    "description": "Find events suitable for groups based on specified criteria such as location and event type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Seattle, WA"
        },
        "event_type": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Concert",
              "Sports",
              "Exhibition",
              "Festival"
            ]
          },
          "description": "Type of event. Default empty array"
        },
        "group_size": {
          "type": "integer",
          "description": "Size of the group that the event should accommodate."
        }
      },
      "required": [
        "location",
        "group_size"
      ]
    }
  },
  {
    "name": "restaurant.find_group",
    "description": "Find restaurants suitable for groups based on specified criteria such as location and cuisine.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Seattle, WA"
        },
        "cuisine": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Seafood",
              "Italian",
              "Indian",
              "Chinese"
            ]
          },
          "description": "Preferred cuisine at the restaurant. Default empty array"
        },
        "group_size": {
          "type": "integer",
          "description": "Size of the group that the restaurant should accommodate."
        }
      },
      "required": [
        "location",
        "group_size"
      ]
    }
  },
  {
    "name": "restaurant.find",
    "description": "Locate restaurants based on specific criteria such as cuisine and price range",
    "parameters": {
      "type": "dict",
      "properties": {
        "cuisine": {
          "type": "string",
          "description": "The type of cuisine preferred."
        },
        "price": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']"
        }
      },
      "required": [
        "cuisine"
      ]
    }
  },
  {
    "name": "recipe.find",
    "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients",
    "parameters": {
      "type": "dict",
      "properties": {
        "mainIngredient": {
          "type": "string",
          "description": "Main ingredient for the recipe."
        },
        "ingredientLimit": {
          "type": "integer",
          "description": "Max number of ingredients the recipe should use."
        }
      },
      "required": [
        "mainIngredient",
        "ingredientLimit"
      ]
    }
  },
  {
    "name": "safeway.vegan_products",
    "description": "Get available vegan products at specified Safeway store",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "City and state where the Safeway store is located, e.g. Denver, CO"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "vegan",
              "gluten-free"
            ]
          },
          "description": "Product categories to search within. Default empty array"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "wholefoods.vegan_products",
    "description": "Get available vegan products at specified Whole Foods store",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "City and state where the Whole Foods store is located, e.g. Denver, CO"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "vegan",
              "gluten-free"
            ]
          },
          "description": "Product categories to search within. Default empty array"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "walmart.vegan_products",
    "description": "Get available vegan products at specified Walmart store",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "City and state where the Walmart store is located, e.g. Denver, CO"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "vegan",
              "gluten-free"
            ]
          },
          "description": "Product categories to search within. Default empty array"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "car.rental",
    "description": "Rent a car at the specified location for a specific number of days",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location of the car rental."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for which to rent the car."
        },
        "car_type": {
          "type": "string",
          "description": "Type of the car to rent."
        },
        "pick_up": {
          "type": "string",
          "description": "Location of where to pick up the car. Default ''"
        }
      },
      "required": [
        "location",
        "days",
        "car_type"
      ]
    }
  },
  {
    "name": "hotel.book",
    "description": "Book a hotel room given the location, room type, and number of nights and additional services",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location of the hotel."
        },
        "roomType": {
          "type": "string",
          "description": "Type of the room to be booked."
        },
        "nights": {
          "type": "integer",
          "description": "Number of nights to book the room for."
        },
        "additional_services": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Additonal services that can be booked.",
            "enum": [
              "breakfast",
              "parking",
              "spa"
            ]
          },
          "description": "Additional services to be added. Default empty array"
        }
      },
      "required": [
        "location",
        "roomType",
        "nights"
      ]
    }
  },
  {
    "name": "hotel_room_pricing.get",
    "description": "Get pricing for a specific type of hotel room for specified number of nights.",
    "parameters": {
      "type": "dict",
      "properties": {
        "hotelName": {
          "type": "string",
          "description": "The name of the hotel e.g. Hilton New York"
        },
        "roomType": {
          "type": "string",
          "description": "Type of the room to be booked."
        },
        "nights": {
          "type": "integer",
          "description": "Number of nights to book the room for."
        }
      },
      "required": [
        "hotelName",
        "roomType",
        "nights"
      ]
    }
  },
  {
    "name": "car_rental_pricing.get",
    "description": "Get pricing for a specific type of rental car for a specified number of days.",
    "parameters": {
      "type": "dict",
      "properties": {
        "rentalCompany": {
          "type": "string",
          "description": "The name of the rental company."
        },
        "carType": {
          "type": "string",
          "description": "Type of the car to be rented."
        },
        "days": {
          "type": "integer",
          "description": "Number of days to rent the car."
        }
      },
      "required": [
        "rentalCompany",
        "carType",
        "days"
      ]
    }
  },
  {
    "name": "flight_ticket_pricing.get",
    "description": "Get pricing for a specific type of flight ticket for specified number of passengers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "airline": {
          "type": "string",
          "description": "The name of the airline."
        },
        "flightClass": {
          "type": "string",
          "description": "Class of the flight."
        },
        "passengers": {
          "type": "integer",
          "description": "Number of passengers."
        }
      },
      "required": [
        "airline",
        "flightClass",
        "passengers"
      ]
    }
  },
  {
    "name": "currency_exchange.convert",
    "description": "Converts a value from one currency to another using the latest exchange rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "amount": {
          "type": "integer",
          "description": "The amount of money to be converted."
        },
        "from_currency": {
          "type": "string",
          "description": "The currency to convert from."
        },
        "to_currency": {
          "type": "string",
          "description": "The currency to convert to."
        },
        "live_conversion": {
          "type": "boolean",
          "description": "If true, use the latest exchange rate for conversion, else use the last known rate. Default false"
        }
      },
      "required": [
        "amount",
        "from_currency",
        "to_currency"
      ]
    }
  },
  {
    "name": "unit_conversion.convert",
    "description": "Converts a value from one unit to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "value": {
          "type": "integer",
          "description": "The value to be converted."
        },
        "from_unit": {
          "type": "string",
          "description": "The unit to convert from."
        },
        "to_unit": {
          "type": "string",
          "description": "The unit to convert to."
        }
      },
      "required": [
        "value",
        "from_unit",
        "to_unit"
      ]
    }
  },
  {
    "name": "get_stock_info",
    "description": "Retrieves information about a specific stock based on company's name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company."
        },
        "detail_level": {
          "type": "string",
          "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."
        },
        "market": {
          "type": "string",
          "description": "The stock market of interest. Default is 'NASDAQ'"
        }
      },
      "required": [
        "company_name",
        "detail_level"
      ]
    }
  },
  {
    "name": "portfolio_future_value",
    "description": "Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.",
    "parameters": {
      "type": "dict",
      "properties": {
        "stock": {
          "type": "string",
          "description": "The ticker symbol of the stock."
        },
        "invested_amount": {
          "type": "float",
          "description": "The invested amount in USD."
        },
        "expected_annual_return": {
          "type": "float",
          "description": "The expected annual return on investment as a decimal. E.g. 5% = 0.05"
        },
        "years": {
          "type": "integer",
          "description": "The number of years for which the investment is made."
        }
      },
      "required": [
        "stock",
        "invested_amount",
        "expected_annual_return",
        "years"
      ]
    }
  },
  {
    "name": "solve_quadratic_equation",
    "description": "Function solves the quadratic equation and returns its roots.",
    "parameters": {
      "type": "dict",
      "properties": {
        "a": {
          "type": "integer",
          "description": "Coefficient of x squared"
        },
        "b": {
          "type": "integer",
          "description": "Coefficient of x"
        },
        "c": {
          "type": "integer",
          "description": "Constant term in the quadratic equation"
        }
      },
      "required": [
        "a",
        "b",
        "c"
      ]
    }
  },
  {
    "name": "geometry.area_circle",
    "description": "Calculate the area of a circle given the radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "The radius of the circle."
        },
        "units": {
          "type": "string",
          "description": "The units in which the radius is measured (defaults to meters).",
          "default": "meters"
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "plot_sine_wave",
    "description": "Plot a sine wave for a given frequency in a given range.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_range": {
          "type": "float",
          "description": "Start of the range in radians."
        },
        "end_range": {
          "type": "float",
          "description": "End of the range in radians."
        },
        "frequency": {
          "type": "float",
          "description": "Frequency of the sine wave in Hz."
        },
        "amplitude": {
          "type": "float",
          "description": "Amplitude of the sine wave. Default is 1."
        },
        "phase_shift": {
          "type": "float",
          "description": "Phase shift of the sine wave in radians. Default is 0."
        }
      },
      "required": [
        "start_range",
        "end_range",
        "frequency"
      ]
    }
  },
  {
    "name": "get_earliest_reference",
    "description": "Retrieve the earliest historical reference of a person.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the person."
        },
        "source": {
          "type": "string",
          "enum": [
            "scriptures",
            "historical records"
          ],
          "description": "Source to fetch the reference. Default is 'scriptures'"
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "get_current_time",
    "description": "Retrieve the current time for a specified city and country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city for which the current time is to be retrieved."
        },
        "country": {
          "type": "string",
          "description": "The country where the city is located."
        },
        "format": {
          "type": "string",
          "description": "The format in which the time is to be displayed, optional (defaults to 'HH:MM:SS')."
        }
      },
      "required": [
        "city",
        "country"
      ]
    }
  },
  {
    "name": "music_generator.generate_melody",
    "description": "Generate a melody based on certain musical parameters.",
    "parameters": {
      "type": "dict",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the melody. E.g., 'C' for C major."
        },
        "start_note": {
          "type": "string",
          "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."
        },
        "length": {
          "type": "integer",
          "description": "The number of measures in the melody."
        },
        "tempo": {
          "type": "integer",
          "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."
        }
      },
      "required": [
        "key",
        "start_note",
        "length"
      ]
    }
  },
  {
    "name": "geometry.circumference",
    "description": "Calculate the circumference of a circle given the radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "The radius of the circle."
        },
        "units": {
          "type": "string",
          "description": "Units for the output circumference measurement. Default is 'cm'."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "calculus.derivative",
    "description": "Compute the derivative of a function at a specific value.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "The function to calculate the derivative of."
        },
        "value": {
          "type": "integer",
          "description": "The value where the derivative needs to be calculated at."
        },
        "function_variable": {
          "type": "string",
          "description": "The variable present in the function, for instance x or y, etc. Default is 'x'"
        }
      },
      "required": [
        "function",
        "value"
      ]
    }
  },
  {
    "name": "get_personality_traits",
    "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.",
    "parameters": {
      "type": "dict",
      "properties": {
        "type": {
          "type": "string",
          "description": "The personality type."
        },
        "traits": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "strengths",
              "weaknesses"
            ]
          },
          "description": "List of traits to be retrieved, default is ['strengths', 'weaknesses']."
        }
      },
      "required": [
        "type"
      ]
    }
  },
  {
    "name": "music_generator.generate_scale_progression",
    "description": "Generate a music scale progression in a specific key with a given tempo and duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key in which to generate the scale progression."
        },
        "tempo": {
          "type": "integer",
          "description": "The tempo of the scale progression in BPM."
        },
        "duration": {
          "type": "integer",
          "description": "The duration of each note in beats."
        },
        "scale_type": {
          "type": "string",
          "default": "major",
          "description": "The type of scale to generate. Defaults to 'major'."
        }
      },
      "required": [
        "key",
        "tempo",
        "duration"
      ]
    }
  },
  {
    "name": "math.hcf",
    "description": "Calculate the highest common factor of two numbers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number1": {
          "type": "integer",
          "description": "First number."
        },
        "number2": {
          "type": "integer",
          "description": "Second number."
        }
      },
      "required": [
        "number1",
        "number2"
      ]
    }
  },
  {
    "name": "math.gcd",
    "description": "Calculate the greatest common divisor of two integers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num1": {
          "type": "integer",
          "description": "First number."
        },
        "num2": {
          "type": "integer",
          "description": "Second number."
        }
      },
      "required": [
        "num1",
        "num2"
      ]
    }
  },
  {
    "name": "get_top_cases",
    "description": "Retrieve a list of the most influential or landmark cases in a specific field of law.",
    "parameters": {
      "type": "dict",
      "properties": {
        "field_of_law": {
          "type": "string",
          "description": "The specific field of law e.g., constitutional law, criminal law, etc."
        },
        "top_number": {
          "type": "integer",
          "description": "The number of top cases to retrieve."
        },
        "country": {
          "type": "string",
          "description": "The country where the law cases should be retrieved from. Default is US."
        }
      },
      "required": [
        "field_of_law",
        "top_number"
      ]
    }
  },
  {
    "name": "calculate_displacement",
    "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "integer",
          "description": "The initial velocity of the object in m/s."
        },
        "time": {
          "type": "integer",
          "description": "The time in seconds that the object has been in motion."
        },
        "acceleration": {
          "type": "float",
          "description": "The acceleration of the object in m/s^2.",
          "default": 0
        }
      },
      "required": [
        "initial_velocity",
        "time"
      ]
    }
  },
  {
    "name": "poker_game_winner",
    "description": "Identify the winner in a poker game based on the cards.",
    "parameters": {
      "type": "dict",
      "properties": {
        "players": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names of the players in a list."
        },
        "cards": {
          "type": "dict",
          "description": "An object containing the player name as key and the cards as values in a list."
        },
        "type": {
          "type": "string",
          "description": "Type of poker game. Defaults to 'Texas Holdem'"
        }
      },
      "required": [
        "players",
        "cards"
      ]
    }
  },
  {
    "name": "musical_scale",
    "description": "Get the musical scale of a specific key in music theory.",
    "parameters": {
      "type": "dict",
      "properties": {
        "key": {
          "type": "string",
          "description": "The musical key for which the scale will be found."
        },
        "scale_type": {
          "type": "string",
          "default": "major",
          "description": "The type of musical scale."
        }
      },
      "required": [
        "key"
      ]
    }
  },
  {
    "name": "chess.rating",
    "description": "Fetches the current chess rating of a given player",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The full name of the chess player."
        },
        "variant": {
          "type": "string",
          "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."
        }
      },
      "required": [
        "player_name"
      ]
    }
  },
  {
    "name": "court_case.search",
    "description": "Retrieves details about a court case using its docket number and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "docket_number": {
          "type": "string",
          "description": "The docket number for the case."
        },
        "location": {
          "type": "string",
          "description": "The location where the case is registered, in the format: city, state, e.g., Dallas, TX."
        },
        "full_text": {
          "type": "boolean",
          "default": "false",
          "description": "Option to return the full text of the case ruling."
        }
      },
      "required": [
        "docket_number",
        "location"
      ]
    }
  },
  {
    "name": "calculate_final_speed",
    "description": "Calculate the final speed of an object dropped from a certain height without air resistance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "integer",
          "description": "The initial velocity of the object."
        },
        "height": {
          "type": "integer",
          "description": "The height from which the object is dropped."
        },
        "gravity": {
          "type": "float",
          "description": "The gravitational acceleration. Default is 9.8 m/s^2."
        }
      },
      "required": [
        "initial_velocity",
        "height"
      ]
    }
  },
  {
    "name": "get_event_date",
    "description": "Retrieve the date of a historical event.",
    "parameters": {
      "type": "dict",
      "properties": {
        "event": {
          "type": "string",
          "description": "The name of the historical event."
        },
        "location": {
          "type": "string",
          "description": "Location where the event took place. Defaults to global if not specified"
        }
      },
      "required": [
        "event"
      ]
    }
  },
  {
    "name": "instrument_price.get",
    "description": "Retrieve the current retail price of a specific musical instrument.",
    "parameters": {
      "type": "dict",
      "properties": {
        "brand": {
          "type": "string",
          "description": "The brand of the instrument."
        },
        "model": {
          "type": "string",
          "description": "The specific model of the instrument."
        },
        "finish": {
          "type": "string",
          "description": "The color or type of finish on the instrument."
        }
      },
      "required": [
        "brand",
        "model",
        "finish"
      ]
    }
  },
  {
    "name": "get_shortest_driving_distance",
    "description": "Calculate the shortest driving distance between two locations.",
    "parameters": {
      "type": "dict",
      "properties": {
        "origin": {
          "type": "string",
          "description": "Starting point of the journey."
        },
        "destination": {
          "type": "string",
          "description": "End point of the journey."
        },
        "unit": {
          "type": "string",
          "description": "Preferred unit of distance (optional, default is kilometers)."
        }
      },
      "required": [
        "origin",
        "destination"
      ]
    }
  },
  {
    "name": "cell_biology.function_lookup",
    "description": "Look up the function of a given molecule in a specified organelle.",
    "parameters": {
      "type": "dict",
      "properties": {
        "molecule": {
          "type": "string",
          "description": "The molecule of interest."
        },
        "organelle": {
          "type": "string",
          "description": "The organelle of interest."
        },
        "specific_function": {
          "type": "boolean",
          "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."
        }
      },
      "required": [
        "molecule",
        "organelle",
        "specific_function"
      ]
    }
  },
  {
    "name": "get_scientist_for_discovery",
    "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.",
    "parameters": {
      "type": "dict",
      "properties": {
        "discovery": {
          "type": "string",
          "description": "The scientific discovery or theory."
        }
      },
      "required": [
        "discovery"
      ]
    }
  },
  {
    "name": "concert_booking.book_ticket",
    "description": "Book concert tickets for a specific artist in a specified city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "artist": {
          "type": "string",
          "description": "The artist you want to book tickets for."
        },
        "city": {
          "type": "string",
          "description": "The city where the concert is."
        },
        "num_tickets": {
          "type": "integer",
          "description": "Number of tickets required. Default is 1."
        }
      },
      "required": [
        "artist",
        "city"
      ]
    }
  },
  {
    "name": "calculate_magnetic_field",
    "description": "Calculate the magnetic field produced at the center of a circular loop carrying current.",
    "parameters": {
      "type": "dict",
      "properties": {
        "current": {
          "type": "integer",
          "description": "The current through the circular loop in Amperes."
        },
        "radius": {
          "type": "integer",
          "description": "The radius of the circular loop in meters."
        },
        "permeability": {
          "type": "float",
          "description": "The magnetic permeability. Default is permeability in free space, 0.01"
        }
      },
      "required": [
        "current",
        "radius"
      ]
    }
  },
  {
    "name": "lawsuit_details.find",
    "description": "Find details of lawsuits involving a specific company from a given year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "Name of the company."
        },
        "year": {
          "type": "integer",
          "description": "Year of the lawsuit."
        },
        "case_type": {
          "type": "string",
          "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter. Default is 'all'"
        }
      },
      "required": [
        "company_name",
        "year"
      ]
    }
  },
  {
    "name": "mix_paint_color",
    "description": "Combine two primary paint colors and adjust the resulting color's lightness level.",
    "parameters": {
      "type": "dict",
      "properties": {
        "color1": {
          "type": "string",
          "description": "The first primary color to be mixed."
        },
        "color2": {
          "type": "string",
          "description": "The second primary color to be mixed."
        },
        "lightness": {
          "type": "integer",
          "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."
        }
      },
      "required": [
        "color1",
        "color2"
      ]
    }
  },
  {
    "name": "cooking_conversion.convert",
    "description": "Convert cooking measurements from one unit to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "quantity": {
          "type": "integer",
          "description": "The quantity to be converted."
        },
        "from_unit": {
          "type": "string",
          "description": "The unit to convert from."
        },
        "to_unit": {
          "type": "string",
          "description": "The unit to convert to."
        },
        "item": {
          "type": "string",
          "description": "The item to be converted."
        }
      },
      "required": [
        "quantity",
        "from_unit",
        "to_unit",
        "item"
      ]
    }
  },
  {
    "name": "group_dynamics.pattern",
    "description": "Examine the social dynamics and interactions within a group based on the personality traits and group size.",
    "parameters": {
      "type": "dict",
      "properties": {
        "total": {
          "type": "integer",
          "description": "The total group size."
        },
        "extroverts": {
          "type": "integer",
          "description": "The number of extroverted members in the group."
        },
        "introverts": {
          "type": "integer",
          "description": "The number of introverted members in the group."
        }
      },
      "required": [
        "total",
        "extroverts",
        "introverts"
      ]
    }
  },
  {
    "name": "calculate_electric_field_strength",
    "description": "Calculate the electric field strength at a certain distance from a point charge.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge": {
          "type": "float",
          "description": "The charge in Coulombs."
        },
        "distance": {
          "type": "integer",
          "description": "The distance from the charge in meters."
        },
        "medium": {
          "type": "string",
          "description": "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."
        }
      },
      "required": [
        "charge",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_density",
    "description": "Calculate the density of a substance based on its mass and volume.",
    "parameters": {
      "type": "dict",
      "properties": {
        "mass": {
          "type": "integer",
          "description": "The mass of the substance in kilograms."
        },
        "volume": {
          "type": "integer",
          "description": "The volume of the substance in cubic meters."
        },
        "unit": {
          "type": "string",
          "description": "The unit of density. Default is kg/m\u00b3"
        }
      },
      "required": [
        "mass",
        "volume"
      ]
    }
  },
  {
    "name": "calc_heat_capacity",
    "description": "Calculate the heat capacity at constant pressure of air using its temperature and volume.",
    "parameters": {
      "type": "dict",
      "properties": {
        "temp": {
          "type": "integer",
          "description": "The temperature of the gas in Kelvin."
        },
        "volume": {
          "type": "integer",
          "description": "The volume of the gas in m^3."
        },
        "gas": {
          "type": "string",
          "description": "Type of gas, with air as default."
        }
      },
      "required": [
        "temp",
        "volume"
      ]
    }
  },
  {
    "name": "calculate_discounted_cash_flow",
    "description": "Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coupon_payment": {
          "type": "float",
          "description": "The annual coupon payment."
        },
        "period": {
          "type": "integer",
          "description": "The time frame in years for which coupon payment is made."
        },
        "discount_rate": {
          "type": "float",
          "description": "The discount rate."
        },
        "face_value": {
          "type": "integer",
          "description": "The face value of the bond, default is $1000."
        }
      },
      "required": [
        "coupon_payment",
        "period",
        "discount_rate"
      ]
    }
  },
  {
    "name": "find_exhibition",
    "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where the exhibition is held, e.g., New York, NY."
        },
        "art_form": {
          "type": "string",
          "description": "The form of art the exhibition is displaying e.g., sculpture."
        },
        "month": {
          "type": "string",
          "description": "The month of exhibition. Default value will return upcoming events."
        },
        "user_ratings": {
          "type": "string",
          "enum": [
            "low",
            "average",
            "high"
          ],
          "description": "Select exhibitions with user rating threshold. Default is 'high'"
        }
      },
      "required": [
        "location",
        "art_form"
      ]
    }
  },
  {
    "name": "mutation_type.find",
    "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.",
    "parameters": {
      "type": "dict",
      "properties": {
        "snp_id": {
          "type": "string",
          "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."
        },
        "species": {
          "type": "string",
          "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."
        }
      },
      "required": [
        "snp_id"
      ]
    }
  },
  {
    "name": "cellbio.get_proteins",
    "description": "Get the list of proteins in a specific cell compartment.",
    "parameters": {
      "type": "dict",
      "properties": {
        "cell_compartment": {
          "type": "string",
          "description": "The specific cell compartment."
        },
        "include_description": {
          "type": "boolean",
          "description": "Set true if you want a brief description of each protein.",
          "default": "false"
        }
      },
      "required": [
        "cell_compartment"
      ]
    }
  },
  {
    "name": "get_collectables_in_season",
    "description": "Retrieve a list of collectable items in a specific game during a specified season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game_name": {
          "type": "string",
          "description": "Name of the game."
        },
        "season": {
          "type": "string",
          "description": "The season for which to retrieve the collectable items."
        },
        "item_type": {
          "type": "string",
          "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."
        }
      },
      "required": [
        "game_name",
        "season"
      ]
    }
  },
  {
    "name": "calculate_genotype_frequency",
    "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.",
    "parameters": {
      "type": "dict",
      "properties": {
        "allele_frequency": {
          "type": "float",
          "description": "The frequency of the dominant allele in the population."
        },
        "genotype": {
          "type": "string",
          "description": "The genotype which frequency is needed, default is homozygous dominant. ",
          "enum": [
            "AA",
            "Aa",
            "aa"
          ]
        }
      },
      "required": [
        "allele_frequency",
        "genotype"
      ]
    }
  },
  {
    "name": "math.factorial",
    "description": "Calculate the factorial of a given number.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "integer",
          "description": "The number for which factorial needs to be calculated."
        }
      },
      "required": [
        "number"
      ]
    }
  },
  {
    "name": "find_flute",
    "description": "Locate a flute for sale based on specific requirements.",
    "parameters": {
      "type": "dict",
      "properties": {
        "brand": {
          "type": "string",
          "description": "The brand of the flute. Example, 'Yamaha'"
        },
        "specs": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "open hole",
              "C foot",
              "silver headjoint"
            ]
          },
          "description": "The specifications of the flute desired."
        }
      },
      "required": [
        "brand",
        "specs"
      ]
    }
  },
  {
    "name": "forest_growth_forecast",
    "description": "Predicts the forest growth over the next N years based on current trends.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location where you want to predict forest growth."
        },
        "years": {
          "type": "integer",
          "description": "The number of years for the forecast."
        },
        "include_human_impact": {
          "type": "boolean",
          "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."
        }
      },
      "required": [
        "location",
        "years"
      ]
    }
  },
  {
    "name": "calculate_fitness",
    "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.",
    "parameters": {
      "type": "dict",
      "properties": {
        "trait_values": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."
        },
        "trait_contributions": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."
        }
      },
      "required": [
        "trait_values",
        "trait_contributions"
      ]
    }
  },
  {
    "name": "walmart.purchase",
    "description": "Retrieve information of items from Walmart including stock availability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "loc": {
          "type": "string",
          "description": "Location of the nearest Walmart."
        },
        "product_list": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Items to be purchased listed in an array."
        },
        "pack_size": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is empty array."
        }
      },
      "required": [
        "loc",
        "product_list"
      ]
    }
  },
  {
    "name": "lawyer.find_nearby",
    "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city and state, e.g. Chicago, IL."
        },
        "specialty": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Civil",
              "Divorce",
              "Immigration",
              "Business",
              "Criminal"
            ]
          },
          "description": "Specialization of the lawyer."
        },
        "fee": {
          "type": "integer",
          "description": "Hourly fee charged by lawyer",
          "maximum": 400
        }
      },
      "required": [
        "city",
        "specialty",
        "fee"
      ]
    }
  },
  {
    "name": "modify_painting",
    "description": "Modify an existing painting's attributes such as size, medium, and color.",
    "parameters": {
      "type": "dict",
      "properties": {
        "size": {
          "type": "string",
          "description": "The size of the painting in inches, width by height."
        },
        "medium": {
          "type": "string",
          "description": "The medium of the painting, such as oil, acrylic, etc."
        },
        "dominant_color": {
          "type": "string",
          "description": "The dominant color of the painting. Default ''"
        }
      },
      "required": [
        "size",
        "medium"
      ]
    }
  },
  {
    "name": "prediction.evolution",
    "description": "Predict the evolutionary rate for a specific species for a given timeframe.",
    "parameters": {
      "type": "dict",
      "properties": {
        "species": {
          "type": "string",
          "description": "The species that the evolution rate will be predicted for."
        },
        "years": {
          "type": "integer",
          "description": "Number of years for the prediction."
        },
        "model": {
          "type": "string",
          "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."
        }
      },
      "required": [
        "species",
        "years"
      ]
    }
  },
  {
    "name": "calculate_probability",
    "description": "Calculate the probability of an event.",
    "parameters": {
      "type": "dict",
      "properties": {
        "total_outcomes": {
          "type": "integer",
          "description": "Total number of possible outcomes."
        },
        "favorable_outcomes": {
          "type": "integer",
          "description": "Number of outcomes considered as 'successful'."
        },
        "round_to": {
          "type": "integer",
          "description": "Number of decimal places to round the result to.",
          "default": 2
        }
      },
      "required": [
        "total_outcomes",
        "favorable_outcomes"
      ]
    }
  },
  {
    "name": "find_instrument",
    "description": "Search for a musical instrument within specified budget and of specific type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "budget": {
          "type": "float",
          "description": "Your budget for the instrument."
        },
        "type": {
          "type": "string",
          "description": "Type of the instrument"
        },
        "make": {
          "type": "string",
          "description": "Maker of the instrument, Optional parameter. Default is 'all'"
        }
      },
      "required": [
        "budget",
        "type"
      ]
    }
  },
  {
    "name": "find_restaurants",
    "description": "Locate nearby restaurants based on location and food preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The specific location or area."
        },
        "food_type": {
          "type": "string",
          "description": "The type of food preferred."
        },
        "number": {
          "type": "integer",
          "description": "Number of results to return."
        },
        "dietary_requirements": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Special dietary requirements, e.g. vegan, gluten-free.",
          "default": "None"
        }
      },
      "required": [
        "location",
        "food_type",
        "number"
      ]
    }
  },
  {
    "name": "sports.match_schedule",
    "description": "Retrieve the match schedule for a specific sports team.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the sports team."
        },
        "num_matches": {
          "type": "integer",
          "description": "The number of upcoming matches you want to get."
        },
        "league": {
          "type": "string",
          "description": "The sports league of the team. This is an optional parameter. Default 'all'"
        }
      },
      "required": [
        "team_name",
        "num_matches"
      ]
    }
  },
  {
    "name": "calculate_bmi",
    "description": "Calculate the Body Mass Index (BMI) of a person.",
    "parameters": {
      "type": "dict",
      "properties": {
        "weight": {
          "type": "integer",
          "description": "Weight of the person in kilograms."
        },
        "height": {
          "type": "integer",
          "description": "Height of the person in centimeters."
        },
        "unit": {
          "type": "string",
          "description": "Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'."
        }
      },
      "required": [
        "weight",
        "height"
      ]
    }
  },
  {
    "name": "celebrity_net_worth.get",
    "description": "Get the total net worth of a sports celebrity based on most recent data.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The full name of the sports celebrity."
        },
        "currency": {
          "type": "string",
          "description": "The currency in which the net worth will be returned. Default is 'USD'."
        }
      },
      "required": [
        "name",
        "currency"
      ]
    }
  },
  {
    "name": "calculate_BMI",
    "description": "Calculate the Body Mass Index (BMI) given a person's weight and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "weight_kg": {
          "type": "integer",
          "description": "The weight of the person in kilograms."
        },
        "height_m": {
          "type": "float",
          "description": "The height of the person in meters."
        }
      },
      "required": [
        "weight_kg",
        "height_m"
      ]
    }
  },
  {
    "name": "soccer.get_last_match",
    "description": "Retrieve the details of the last match played by a specified soccer club.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the soccer club."
        },
        "include_stats": {
          "type": "boolean",
          "description": "If true, include match statistics like possession, shots on target etc. Default is false."
        }
      },
      "required": [
        "team_name"
      ]
    }
  },
  {
    "name": "hotel_booking",
    "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where you want to book the hotel."
        },
        "room_type": {
          "type": "string",
          "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."
        },
        "duration": {
          "type": "integer",
          "description": "The number of nights you want to book the hotel for."
        },
        "start_date": {
          "type": "string",
          "description": "The date when your stay begins."
        },
        "preferences": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "pet_friendly",
              "gym",
              "swimming_pool",
              "free_breakfast",
              "parking"
            ]
          },
          "description": "Optional preferences of stay at the hotel. Default is empty array."
        }
      },
      "required": [
        "location",
        "room_type",
        "duration",
        "start_date"
      ]
    }
  },
  {
    "name": "flight.book",
    "description": "Book a direct flight for a specific date and time from departure location to destination location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "departure_location": {
          "type": "string",
          "description": "The location you are departing from."
        },
        "destination_location": {
          "type": "string",
          "description": "The location you are flying to."
        },
        "date": {
          "type": "string",
          "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."
        },
        "time": {
          "type": "string",
          "description": "Preferred time of flight. Default is 'anytime'."
        },
        "direct_flight": {
          "type": "boolean",
          "description": "If set to true, only direct flights will be searched. Default is false"
        }
      },
      "required": [
        "departure_location",
        "destination_location",
        "date"
      ]
    }
  },
  {
    "name": "lawsuits_search",
    "description": "Search for lawsuits against a specific company within a specific time and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company."
        },
        "location": {
          "type": "string",
          "description": "The location where the lawsuit was filed."
        },
        "year": {
          "type": "integer",
          "description": "The year when the lawsuit was filed."
        },
        "case_type": {
          "type": "string",
          "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for 'all' types by default."
        }
      },
      "required": [
        "company_name",
        "location",
        "year"
      ]
    }
  },
  {
    "name": "imdb.find_movies_by_actor",
    "description": "Searches the database to find all movies by a specific actor within a certain year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "actor_name": {
          "type": "string",
          "description": "The name of the actor."
        },
        "year": {
          "type": "integer",
          "description": "The specific year to search in."
        },
        "category": {
          "type": "string",
          "description": "The category of the film (e.g. Drama, Comedy, etc). This parameter is optional. Default is 'all'."
        }
      },
      "required": [
        "actor_name",
        "year"
      ]
    }
  },
  {
    "name": "average_batting_score",
    "description": "Get the average batting score of a cricketer for specified past matches.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "Name of the cricket player."
        },
        "matches": {
          "type": "integer",
          "description": "Number of past matches to consider for average calculation."
        },
        "match_format": {
          "type": "string",
          "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."
        }
      },
      "required": [
        "player_name",
        "matches"
      ]
    }
  },
  {
    "name": "calculate_return_on_investment",
    "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.",
    "parameters": {
      "type": "dict",
      "properties": {
        "purchase_price": {
          "type": "float",
          "description": "The price the stock was bought at."
        },
        "sale_price": {
          "type": "float",
          "description": "The price the stock was sold at."
        },
        "dividend": {
          "type": "float",
          "description": "Any dividends received from the stock.",
          "default": 0
        }
      },
      "required": [
        "purchase_price",
        "sale_price"
      ]
    }
  },
  {
    "name": "database.query",
    "description": "Query the database based on certain conditions.",
    "parameters": {
      "type": "dict",
      "properties": {
        "table": {
          "type": "string",
          "description": "Name of the table to query."
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "dict",
            "properties": {
              "field": {
                "type": "string",
                "description": "The field to apply the condition."
              },
              "operation": {
                "type": "string",
                "description": "The operation to be performed.",
                "enum": [
                  "<",
                  ">",
                  "=",
                  ">=",
                  "<="
                ]
              },
              "value": {
                "type": "string",
                "description": "The value to be compared."
              }
            },
            "required": [
              "field",
              "operation",
              "value"
            ]
          },
          "description": "Conditions for the query."
        }
      },
      "required": [
        "table",
        "conditions"
      ]
    }
  },
  {
    "name": "probability_of_event",
    "description": "Calculates the probability of an event.",
    "parameters": {
      "type": "dict",
      "properties": {
        "success_outcomes": {
          "type": "integer",
          "description": "The number of successful outcomes."
        },
        "total_outcomes": {
          "type": "integer",
          "description": "The total number of possible outcomes."
        },
        "format_as_ratio": {
          "type": "boolean",
          "description": "When true, formats the output as a ratio instead of a decimal. Default is false."
        }
      },
      "required": [
        "success_outcomes",
        "total_outcomes"
      ]
    }
  },
  {
    "name": "light_travel_time",
    "description": "Calculate the time taken for light to travel from a celestial body to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "distance_in_light_years": {
          "type": "integer",
          "description": "The distance between the two celestial bodies in light years."
        },
        "speed_of_light": {
          "type": "integer",
          "description": "The speed of light in vacuum, in m/s. Default value is 299792458 m/s."
        }
      },
      "required": [
        "distance_in_light_years"
      ]
    }
  },
  {
    "name": "safeway.order",
    "description": "Order specified items from a Safeway location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the Safeway store, e.g. Palo Alto, CA."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of items to order."
        },
        "quantity": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Quantity of each item in the order list."
        }
      },
      "required": [
        "location",
        "items",
        "quantity"
      ]
    }
  },
  {
    "name": "book_hotel",
    "description": "Book a room in a specific hotel with particular preferences",
    "parameters": {
      "type": "dict",
      "properties": {
        "hotel_name": {
          "type": "string",
          "description": "The name of the hotel."
        },
        "location": {
          "type": "string",
          "description": "The location of the hotel."
        },
        "room_type": {
          "type": "string",
          "description": "The type of room preferred."
        },
        "start_date": {
          "type": "string",
          "description": "The starting date of the stay in format MM-DD-YYYY."
        },
        "stay_duration": {
          "type": "integer",
          "description": "The duration of the stay in days."
        },
        "view": {
          "type": "string",
          "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.",
          "default": "No preference"
        }
      },
      "required": [
        "hotel_name",
        "location",
        "room_type",
        "start_date",
        "stay_duration"
      ]
    }
  },
  {
    "name": "latest_exchange_rate",
    "description": "Retrieve the latest exchange rate between two specified currencies.",
    "parameters": {
      "type": "dict",
      "properties": {
        "source_currency": {
          "type": "string",
          "description": "The currency you are converting from."
        },
        "target_currency": {
          "type": "string",
          "description": "The currency you are converting to."
        },
        "amount": {
          "type": "float",
          "description": "The amount to be converted. If omitted, exchange rate of 1 unit source currency is given. Default is 1."
        }
      },
      "required": [
        "source_currency",
        "target_currency"
      ]
    }
  },
  {
    "name": "map_service.get_directions",
    "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start": {
          "type": "string",
          "description": "Starting location for the route."
        },
        "end": {
          "type": "string",
          "description": "Ending location for the route."
        },
        "avoid": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "tolls",
              "highways",
              "ferries"
            ]
          },
          "description": "Route features to avoid. Default is empty array."
        }
      },
      "required": [
        "start",
        "end"
      ]
    }
  },
  {
    "name": "science_history.get_invention",
    "description": "Retrieve the inventor and year of invention based on the invention's name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "invention_name": {
          "type": "string",
          "description": "The name of the invention."
        },
        "want_year": {
          "type": "boolean",
          "default": false,
          "description": "Return the year of invention if set to true."
        }
      },
      "required": [
        "invention_name",
        "want_year"
      ]
    }
  },
  {
    "name": "geometry.area_triangle",
    "description": "Calculate the area of a triangle.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "integer",
          "description": "The length of the base of the triangle."
        },
        "height": {
          "type": "integer",
          "description": "The height of the triangle from the base."
        },
        "unit": {
          "type": "string",
          "description": "The measurement unit for the area. Defaults to square meters."
        }
      },
      "required": [
        "base",
        "height"
      ]
    }
  },
  {
    "name": "run_linear_regression",
    "description": "Build a linear regression model using given predictor variables and a target variable.",
    "parameters": {
      "type": "dict",
      "properties": {
        "predictors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array containing the names of predictor variables."
        },
        "target": {
          "type": "string",
          "description": "The name of target variable."
        },
        "standardize": {
          "type": "boolean",
          "description": "Option to apply standardization on the predictors. Defaults to False."
        }
      },
      "required": [
        "predictors",
        "target"
      ]
    }
  },
  {
    "name": "find_recipe",
    "description": "Locate a recipe based on name and its calorie content",
    "parameters": {
      "type": "dict",
      "properties": {
        "recipeName": {
          "type": "string",
          "description": "The recipe's name."
        },
        "maxCalories": {
          "type": "integer",
          "description": "The maximum calorie content of the recipe.",
          "default": 1000
        }
      },
      "required": [
        "recipeName"
      ]
    }
  },
  {
    "name": "travel_itinerary_generator",
    "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "destination": {
          "type": "string",
          "description": "Destination city of the trip."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for the trip."
        },
        "daily_budget": {
          "type": "float",
          "description": "The maximum daily budget for the trip."
        },
        "exploration_type": {
          "type": "string",
          "enum": [
            "nature",
            "urban",
            "history",
            "culture"
          ],
          "description": "The preferred exploration type.",
          "default": "urban"
        }
      },
      "required": [
        "destination",
        "days",
        "daily_budget"
      ]
    }
  },
  {
    "name": "lawsuit_search",
    "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.",
    "parameters": {
      "type": "dict",
      "properties": {
        "entity": {
          "type": "string",
          "description": "The entity involved in lawsuits."
        },
        "county": {
          "type": "string",
          "description": "The jurisdiction for the lawsuit search."
        },
        "state": {
          "type": "string",
          "description": "The state for the lawsuit search. Default is California."
        }
      },
      "required": [
        "entity",
        "county"
      ]
    }
  },
  {
    "name": "predict_house_price",
    "description": "Predict house price based on area, number of rooms and year of construction.",
    "parameters": {
      "type": "dict",
      "properties": {
        "area": {
          "type": "integer",
          "description": "Area of the house in square feet."
        },
        "rooms": {
          "type": "integer",
          "description": "Number of rooms in the house."
        },
        "year": {
          "type": "integer",
          "description": "Year when the house was constructed."
        },
        "location": {
          "type": "string",
          "description": "The location or city of the house."
        }
      },
      "required": [
        "area",
        "rooms",
        "year",
        "location"
      ]
    }
  },
  {
    "name": "math.power",
    "description": "Calculate the power of one number raised to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "float",
          "description": "The base number."
        },
        "exponent": {
          "type": "float",
          "description": "The exponent."
        },
        "mod": {
          "type": "integer",
          "description": "The modulus. Default is None. Calculates pow(base, exponent) % mod when provided."
        }
      },
      "required": [
        "base",
        "exponent"
      ]
    }
  },
  {
    "name": "probabilities.calculate_single",
    "description": "Calculate the probability of an event.",
    "parameters": {
      "type": "dict",
      "properties": {
        "total_outcomes": {
          "type": "integer",
          "description": "The total number of outcomes."
        },
        "event_outcomes": {
          "type": "integer",
          "description": "The number of outcomes where the event occurs."
        },
        "round": {
          "type": "integer",
          "description": "Round the answer to a specified number of decimal places. Defaults to 2."
        }
      },
      "required": [
        "total_outcomes",
        "event_outcomes"
      ]
    }
  },
  {
    "name": "fetch_DNA_sequence",
    "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.",
    "parameters": {
      "type": "dict",
      "properties": {
        "DNA_id": {
          "type": "string",
          "description": "Unique ID of the DNA molecule in the database."
        },
        "format": {
          "type": "string",
          "description": "Optional parameter to get sequence in specific format (default to 'fasta')."
        },
        "upstream": {
          "type": "integer",
          "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."
        }
      },
      "required": [
        "DNA_id"
      ]
    }
  },
  {
    "name": "restaurant_search.find_closest",
    "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city, for instance Boston, MA"
        },
        "cuisine": {
          "type": "string",
          "description": "Type of food like Sushi."
        },
        "amenities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Patio",
              "Wi-Fi",
              "Happy Hour",
              "Wheelchair Accessible"
            ]
          },
          "description": "Preferred amenities in the restaurant. Default is empty array."
        }
      },
      "required": [
        "location",
        "cuisine"
      ]
    }
  },
  {
    "name": "run_two_sample_ttest",
    "description": "Runs a two sample t-test for two given data groups.",
    "parameters": {
      "type": "dict",
      "properties": {
        "group1": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "First group of data points."
        },
        "group2": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Second group of data points."
        },
        "equal_variance": {
          "type": "boolean",
          "description": "Assumption about whether the two samples have equal variance.",
          "default": true
        }
      },
      "required": [
        "group1",
        "group2"
      ]
    }
  },
  {
    "name": "get_personality_traits",
    "description": "Retrieve the common personality traits of people based on their hobbies or activities.",
    "parameters": {
      "type": "dict",
      "properties": {
        "hobby": {
          "type": "string",
          "description": "The hobby or activity of interest."
        },
        "trait_count": {
          "type": "integer",
          "description": "The number of top traits to return, default is 5"
        }
      },
      "required": [
        "hobby"
      ]
    }
  },
  {
    "name": "event_finder.find_upcoming",
    "description": "Find upcoming events of a specific genre in a given location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state where the search will take place, e.g. New York, NY."
        },
        "genre": {
          "type": "string",
          "description": "The genre of events."
        },
        "days_ahead": {
          "type": "integer",
          "description": "The number of days from now to include in the search.",
          "default": 7
        }
      },
      "required": [
        "location",
        "genre"
      ]
    }
  },
  {
    "name": "t_test",
    "description": "Perform a statistical t-test to check if the means of two independent datasets are statistically different.",
    "parameters": {
      "type": "dict",
      "properties": {
        "dataset_A": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Dataset A for comparison."
        },
        "dataset_B": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Dataset B for comparison."
        },
        "alpha": {
          "type": "float",
          "description": "Significance level for the test. Default is 0.05."
        }
      },
      "required": [
        "dataset_A",
        "dataset_B"
      ]
    }
  },
  {
    "name": "geometry.area_triangle",
    "description": "Calculate the area of a triangle.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "float",
          "description": "The length of the base of the triangle."
        },
        "height": {
          "type": "float",
          "description": "The height of the triangle from the base."
        },
        "unit": {
          "type": "string",
          "description": "The measurement unit for the area. Defaults to square meters."
        }
      },
      "required": [
        "base",
        "height"
      ]
    }
  },
  {
    "name": "get_song_lyrics",
    "description": "Retrieve the lyrics of a song based on the artist's name and song title.",
    "parameters": {
      "type": "dict",
      "properties": {
        "song_title": {
          "type": "string",
          "description": "The title of the song."
        },
        "artist_name": {
          "type": "string",
          "description": "The name of the artist who performed the song."
        },
        "lang": {
          "type": "string",
          "description": "The language of the lyrics. Default is English.",
          "enum": [
            "English",
            "French",
            "Spanish",
            "German",
            "Italian"
          ]
        }
      },
      "required": [
        "song_title",
        "artist_name"
      ]
    }
  },
  {
    "name": "finance.calculate_quarterly_dividend_per_share",
    "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares",
    "parameters": {
      "type": "dict",
      "properties": {
        "total_payout": {
          "type": "integer",
          "description": "The total amount of dividends paid out in USD"
        },
        "outstanding_shares": {
          "type": "integer",
          "description": "Total number of outstanding shares"
        }
      },
      "required": [
        "total_payout",
        "outstanding_shares"
      ]
    }
  },
  {
    "name": "movie_details.brief",
    "description": "This function retrieves a brief about a specified movie.",
    "parameters": {
      "type": "dict",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the movie"
        },
        "extra_info": {
          "type": "boolean",
          "description": "Option to get additional information like Director, Cast, Awards etc.",
          "default": "false"
        }
      },
      "required": [
        "title"
      ]
    }
  },
  {
    "name": "public_library.find_nearby",
    "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Boston, MA"
        },
        "facilities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Wi-Fi",
              "Reading Room",
              "Fiction",
              "Children Section",
              "Cafe"
            ]
          },
          "description": "Facilities and sections in public library."
        }
      },
      "required": [
        "location",
        "facilities"
      ]
    }
  },
  {
    "name": "law_case_search.find_historical",
    "description": "Search for a historical law case based on specific criteria like the subject and year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "subject": {
          "type": "string",
          "description": "The subject matter of the case, e.g., 'fraud'"
        },
        "from_year": {
          "type": "integer",
          "description": "The start year for the range of the case. The case should happen after this year."
        },
        "to_year": {
          "type": "integer",
          "description": "The end year for the range of the case. The case should happen before this year."
        }
      },
      "required": [
        "subject",
        "from_year",
        "to_year"
      ]
    }
  },
  {
    "name": "calculate_return_on_equity",
    "description": "Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.",
    "parameters": {
      "type": "dict",
      "properties": {
        "net_income": {
          "type": "integer",
          "description": "The company's net income."
        },
        "shareholder_equity": {
          "type": "integer",
          "description": "The company's total shareholder's equity."
        },
        "dividends_paid": {
          "type": "integer",
          "description": "The total dividends paid by the company. Optional. If not given, default it's 0."
        }
      },
      "required": [
        "net_income",
        "shareholder_equity"
      ]
    }
  },
  {
    "name": "lawsuits_search",
    "description": "Search for lawsuits against a specific company within a specific time and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company."
        },
        "location": {
          "type": "string",
          "description": "The location where the lawsuit was filed."
        },
        "year": {
          "type": "integer",
          "description": "The year when the lawsuit was filed."
        },
        "case_type": {
          "type": "string",
          "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types. Default is 'all'"
        }
      },
      "required": [
        "company_name",
        "location",
        "year"
      ]
    }
  },
  {
    "name": "compound_interest",
    "description": "Calculate compound interest for a certain time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principal": {
          "type": "integer",
          "description": "The initial amount of money that was invested or loaned out."
        },
        "annual_rate": {
          "type": "float",
          "description": "The interest rate for a year as a percentage."
        },
        "compounding_freq": {
          "type": "string",
          "enum": [
            "monthly",
            "quarterly",
            "annually"
          ],
          "description": "The number of times that interest is compounded per unit period."
        },
        "time_in_years": {
          "type": "integer",
          "description": "The time the money is invested for in years."
        }
      },
      "required": [
        "principal",
        "annual_rate",
        "compounding_freq",
        "time_in_years"
      ]
    }
  },
  {
    "name": "solve_quadratic",
    "description": "Find the roots of a quadratic equation. Returns both roots.",
    "parameters": {
      "type": "dict",
      "properties": {
        "a": {
          "type": "integer",
          "description": "Coefficient of x\u00b2."
        },
        "b": {
          "type": "integer",
          "description": "Coefficient of x."
        },
        "c": {
          "type": "integer",
          "description": "Constant term."
        }
      },
      "required": [
        "a",
        "b",
        "c"
      ]
    }
  },
  {
    "name": "calculate_cagr",
    "description": "Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_value": {
          "type": "integer",
          "description": "The initial investment value."
        },
        "final_value": {
          "type": "integer",
          "description": "The final investment value."
        },
        "period_in_years": {
          "type": "integer",
          "description": "The period of the investment in years."
        }
      },
      "required": [
        "initial_value",
        "final_value",
        "period_in_years"
      ]
    }
  },
  {
    "name": "restaurant.find_nearby",
    "description": "Locate nearby restaurants based on specific dietary preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Los Angeles, CA"
        },
        "dietary_preference": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Vegan",
              "Vegetarian",
              "Gluten-free",
              "Dairy-free",
              "Nut-free"
            ]
          },
          "description": "Dietary preference. Default is empty array."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "market_performance.get_data",
    "description": "Retrieve the market performance data for specified indexes over a specified time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "indexes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."
        },
        "days": {
          "type": "integer",
          "description": "Number of days in the past for which the performance data is required."
        },
        "detailed": {
          "type": "boolean",
          "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."
        }
      },
      "required": [
        "indexes",
        "days"
      ]
    }
  },
  {
    "name": "sports.match_results",
    "description": "Returns the results of a given match between two teams.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team1": {
          "type": "string",
          "description": "The name of the first team."
        },
        "team2": {
          "type": "string",
          "description": "The name of the second team."
        },
        "season": {
          "type": "string",
          "description": "The season when the match happened. Default is the current season."
        }
      },
      "required": [
        "team1",
        "team2"
      ]
    }
  },
  {
    "name": "finance.calculate_future_value",
    "description": "Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_investment": {
          "type": "integer",
          "description": "The initial investment amount."
        },
        "rate_of_return": {
          "type": "float",
          "description": "The annual rate of return."
        },
        "years": {
          "type": "integer",
          "description": "The time frame of the investment in years."
        },
        "contribution": {
          "type": "integer",
          "description": "Optional: Additional regular contributions. Default is 0."
        }
      },
      "required": [
        "initial_investment",
        "rate_of_return",
        "years"
      ]
    }
  },
  {
    "name": "create_histogram",
    "description": "Create a histogram based on provided data.",
    "parameters": {
      "type": "dict",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "The data for which histogram needs to be plotted."
        },
        "bins": {
          "type": "integer",
          "description": "The number of equal-width bins in the range. Default is 10."
        }
      },
      "required": [
        "data",
        "bins"
      ]
    }
  },
  {
    "name": "calculate_mutual_fund_balance",
    "description": "Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "investment_amount": {
          "type": "integer",
          "description": "The initial total amount invested in the fund."
        },
        "annual_yield": {
          "type": "float",
          "description": "The annual yield rate of the fund."
        },
        "years": {
          "type": "integer",
          "description": "The period of time for the fund to mature."
        }
      },
      "required": [
        "investment_amount",
        "annual_yield",
        "years"
      ]
    }
  },
  {
    "name": "geometry.calculate_area_circle",
    "description": "Calculate the area of a circle given its radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "float",
          "description": "The radius of the circle."
        },
        "unit": {
          "type": "string",
          "description": "The measurement unit of the radius (optional parameter, default is 'units')."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "calculate_density",
    "description": "Calculate the population density of a specific country in a specific year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The country for which the density needs to be calculated."
        },
        "year": {
          "type": "string",
          "description": "The year in which the density is to be calculated."
        },
        "population": {
          "type": "integer",
          "description": "The population of the country."
        },
        "land_area": {
          "type": "float",
          "description": "The land area of the country in square kilometers."
        }
      },
      "required": [
        "country",
        "year",
        "population",
        "land_area"
      ]
    }
  },
  {
    "name": "crime_record.get_record",
    "description": "Retrieve detailed felony crime records using a specific case number and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_number": {
          "type": "string",
          "description": "The case number related to the crime."
        },
        "county": {
          "type": "string",
          "description": "The county in which the crime occurred."
        },
        "details": {
          "type": "boolean",
          "description": "To get a detailed report, set as true. Defaults to false."
        }
      },
      "required": [
        "case_number",
        "county"
      ]
    }
  },
  {
    "name": "get_highest_scoring_player",
    "description": "Retrieve the highest scoring player in a specific game and season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The game in which you want to find the highest scoring player."
        },
        "season": {
          "type": "string",
          "description": "The season during which the high score was achieved."
        },
        "region": {
          "type": "string",
          "description": "The geographical region in which the game is being played (Optional). Defaults to 'USA'"
        }
      },
      "required": [
        "game",
        "season"
      ]
    }
  },
  {
    "name": "calculate_compound_interest",
    "description": "Calculates the compound interest of an investment over a given time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principle": {
          "type": "float",
          "description": "The initial amount of the investment."
        },
        "interest_rate": {
          "type": "float",
          "description": "The yearly interest rate of the investment."
        },
        "time": {
          "type": "integer",
          "description": "The time, in years, the money is invested or borrowed for."
        },
        "compounds_per_year": {
          "type": "integer",
          "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."
        }
      },
      "required": [
        "principle",
        "interest_rate",
        "time"
      ]
    }
  },
  {
    "name": "get_case_info",
    "description": "Retrieve case details using a specific case docket number and court location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "docket": {
          "type": "string",
          "description": "Docket number for the specific court case."
        },
        "court": {
          "type": "string",
          "description": "Court in which the case was heard."
        },
        "info_type": {
          "type": "string",
          "description": "Specify the information type needed for the case. i.e., victim, accused, verdict etc."
        }
      },
      "required": [
        "docket",
        "court",
        "info_type"
      ]
    }
  },
  {
    "name": "calculate_triangle_area",
    "description": "Calculate the area of a triangle given its base and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "float",
          "description": "The base of the triangle."
        },
        "height": {
          "type": "float",
          "description": "The height of the triangle."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measure (defaults to 'units' if not specified)"
        }
      },
      "required": [
        "base",
        "height"
      ]
    }
  },
  {
    "name": "get_crime_rate",
    "description": "Retrieve the official crime rate of a city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The name of the city."
        },
        "state": {
          "type": "string",
          "description": "The state where the city is located."
        },
        "type": {
          "type": "string",
          "description": "Optional. The type of crime. Default ''"
        },
        "year": {
          "type": "integer",
          "description": "Optional. The year for the crime rate data. Defaults to 2024."
        }
      },
      "required": [
        "city",
        "state"
      ]
    }
  },
  {
    "name": "lawsuit_search",
    "description": "Search for lawsuits related to a specific company within a specific date range and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company related to the lawsuit."
        },
        "start_date": {
          "type": "string",
          "description": "Start of the date range for when the lawsuit was filed."
        },
        "location": {
          "type": "string",
          "description": "Location where the lawsuit was filed."
        },
        "status": {
          "type": "string",
          "enum": [
            "ongoing",
            "settled",
            "dismissed"
          ],
          "description": "The status of the lawsuit. Default is 'ongoing'."
        }
      },
      "required": [
        "company",
        "start_date",
        "location"
      ]
    }
  },
  {
    "name": "walmart.check_price",
    "description": "Calculate total price for given items and their quantities at Walmart.",
    "parameters": {
      "type": "dict",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of items to be priced."
        },
        "quantities": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Quantity of each item corresponding to the items list."
        },
        "store_location": {
          "type": "string",
          "description": "The store location for specific pricing (optional). Default is 'USA'."
        }
      },
      "required": [
        "items",
        "quantities"
      ]
    }
  },
  {
    "name": "park_information",
    "description": "Retrieve the basic information such as elevation and area of a national park.",
    "parameters": {
      "type": "dict",
      "properties": {
        "park_name": {
          "type": "string",
          "description": "The name of the national park."
        },
        "information": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Elevation",
              "Area",
              "Location",
              "Established Year"
            ]
          },
          "description": "The type of information you want about the park."
        }
      },
      "required": [
        "park_name",
        "information"
      ]
    }
  },
  {
    "name": "legal_case.fetch",
    "description": "Fetch detailed legal case information from database.",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_id": {
          "type": "string",
          "description": "The ID of the legal case."
        },
        "details": {
          "type": "boolean",
          "description": "True if need the detail info. Default is false."
        }
      },
      "required": [
        "case_id",
        "details"
      ]
    }
  },
  {
    "name": "calculate_stock_return",
    "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.",
    "parameters": {
      "type": "dict",
      "properties": {
        "investment_amount": {
          "type": "float",
          "description": "The amount of money to invest."
        },
        "annual_growth_rate": {
          "type": "float",
          "description": "The expected annual growth rate of the stock."
        },
        "holding_period": {
          "type": "integer",
          "description": "The number of years you intend to hold the stock."
        },
        "include_dividends": {
          "type": "boolean",
          "description": "Optional. True if the calculation should take into account potential dividends. Default is false."
        }
      },
      "required": [
        "investment_amount",
        "annual_growth_rate",
        "holding_period"
      ]
    }
  },
  {
    "name": "game_score.highest",
    "description": "Retrieve the highest score achieved by any player in a specific game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The name of the online game."
        },
        "platform": {
          "type": "string",
          "description": "The platform where the game is played, e.g. PC, Xbox, Playstation"
        },
        "region": {
          "type": "string",
          "description": "The geographic region of the player. Defaults to 'Global'"
        }
      },
      "required": [
        "game",
        "platform"
      ]
    }
  },
  {
    "name": "lawsuit_details.find",
    "description": "Find details of lawsuits involving a specific company from a given year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "Name of the company."
        },
        "year": {
          "type": "integer",
          "description": "Year of the lawsuit."
        },
        "case_type": {
          "type": "string",
          "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter. Default is 'all'."
        }
      },
      "required": [
        "company_name",
        "year"
      ]
    }
  },
  {
    "name": "calculate_binomial_probability",
    "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number_of_trials": {
          "type": "integer",
          "description": "The total number of trials."
        },
        "number_of_successes": {
          "type": "integer",
          "description": "The desired number of successful outcomes."
        },
        "probability_of_success": {
          "type": "float",
          "description": "The probability of a successful outcome on any given trial.",
          "default": 0.5
        }
      },
      "required": [
        "number_of_trials",
        "number_of_successes"
      ]
    }
  },
  {
    "name": "hilton_hotel.check_availability",
    "description": "Check hotel availability for a specific location and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where you want to check hotel availability."
        },
        "check_in_date": {
          "type": "string",
          "description": "The check-in date in the format YYYY-MM-DD."
        },
        "check_out_date": {
          "type": "string",
          "description": "The check-out date in the format YYYY-MM-DD."
        },
        "no_of_adults": {
          "type": "integer",
          "description": "The number of adults for the hotel booking."
        },
        "hotel_chain": {
          "type": "string",
          "description": "The hotel chain where you want to book the hotel.",
          "default": "Hilton"
        }
      },
      "required": [
        "location",
        "check_in_date",
        "check_out_date",
        "no_of_adults"
      ]
    }
  },
  {
    "name": "get_protein_sequence",
    "description": "Retrieve the protein sequence encoded by a human gene.",
    "parameters": {
      "type": "dict",
      "properties": {
        "gene": {
          "type": "string",
          "description": "The human gene of interest."
        },
        "species": {
          "type": "string",
          "description": "The species for which the gene is to be analyzed.",
          "default": "Homo sapiens"
        }
      },
      "required": [
        "gene"
      ]
    }
  },
  {
    "name": "route.estimate_time",
    "description": "Estimate the travel time for a specific route with optional stops.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The starting point for the journey."
        },
        "end_location": {
          "type": "string",
          "description": "The destination for the journey."
        },
        "stops": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Additional cities or points of interest to stop at during the journey. Default is an empty array."
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "lawsuit.check_case",
    "description": "Verify the details of a lawsuit case and check its status using case ID.",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_id": {
          "type": "integer",
          "description": "The identification number of the lawsuit case."
        },
        "closed_status": {
          "type": "boolean",
          "description": "The status of the lawsuit case to be verified."
        }
      },
      "required": [
        "case_id",
        "closed_status"
      ]
    }
  },
  {
    "name": "weather.humidity_forecast",
    "description": "Retrieve a humidity forecast for a specific location and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the humidity for."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for the forecast."
        },
        "min_humidity": {
          "type": "integer",
          "description": "Minimum level of humidity (in percentage) to filter the result. Optional parameter. Default is 0."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "get_team_score",
    "description": "Retrieves the latest game score, individual player stats, and team stats for a specified sports team.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the sports team."
        },
        "league": {
          "type": "string",
          "description": "The league that the team is part of."
        },
        "include_player_stats": {
          "type": "boolean",
          "default": false,
          "description": "Indicates if individual player statistics should be included in the result. Default is false."
        }
      },
      "required": [
        "team_name",
        "league"
      ]
    }
  },
  {
    "name": "create_player_profile",
    "description": "Create a new player profile with character name, class and starting level.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The desired name of the player."
        },
        "_class": {
          "type": "string",
          "description": "The character class for the player"
        },
        "starting_level": {
          "type": "integer",
          "description": "The starting level for the player",
          "default": 1
        }
      },
      "required": [
        "player_name",
        "_class"
      ]
    }
  },
  {
    "name": "poker_probability.full_house",
    "description": "Calculate the probability of getting a full house in a poker game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "deck_size": {
          "type": "integer",
          "description": "The size of the deck. Default is 52."
        },
        "hand_size": {
          "type": "integer",
          "description": "The size of the hand. Default is 5."
        }
      },
      "required": [
        "deck_size",
        "hand_size"
      ]
    }
  },
  {
    "name": "concert.find_nearby",
    "description": "Locate nearby concerts based on specific criteria like genre.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Seattle, WA"
        },
        "genre": {
          "type": "string",
          "description": "Genre of music to be played at the concert."
        }
      },
      "required": [
        "location",
        "genre"
      ]
    }
  },
  {
    "name": "calculate_slope_gradient",
    "description": "Calculate the slope gradient between two geographical coordinates.",
    "parameters": {
      "type": "dict",
      "properties": {
        "point1": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "The geographic coordinates for the first point [Latitude, Longitude]."
        },
        "point2": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "The geographic coordinates for the second point [Latitude, Longitude]."
        },
        "unit": {
          "type": "string",
          "enum": [
            "degree",
            "percent",
            "ratio"
          ],
          "description": "The unit for the slope gradient. Default is 'degree'."
        }
      },
      "required": [
        "point1",
        "point2"
      ]
    }
  },
  {
    "name": "sports_ranking",
    "description": "Fetch the ranking of a specific sports team in a specific league",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The name of the team."
        },
        "league": {
          "type": "string",
          "description": "The name of the league."
        },
        "season": {
          "type": "integer",
          "description": "Optional parameter to specify the season, default is the current season."
        }
      },
      "required": [
        "team",
        "league"
      ]
    }
  },
  {
    "name": "air_quality",
    "description": "Retrieve the air quality index for a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the air quality index for."
        },
        "date": {
          "type": "string",
          "description": "The date you want to get the air quality index for. Default is today."
        }
      },
      "required": [
        "location",
        "date"
      ]
    }
  },
  {
    "name": "grocery_store.find_best",
    "description": "Find the closest high-rated grocery stores based on certain product availability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "my_location": {
          "type": "string",
          "description": "The current location of the user."
        },
        "rating": {
          "type": "float",
          "description": "The minimum required store rating. Default is 0.0."
        },
        "products": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required products in a list."
        }
      },
      "required": [
        "my_location",
        "products"
      ]
    }
  },
  {
    "name": "calculate_emissions",
    "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.",
    "parameters": {
      "type": "dict",
      "properties": {
        "distance": {
          "type": "integer",
          "description": "The distance travelled in miles."
        },
        "fuel_type": {
          "type": "string",
          "description": "Type of fuel used by the vehicle."
        },
        "fuel_efficiency": {
          "type": "integer",
          "description": "The vehicle's fuel efficiency in miles per gallon."
        },
        "efficiency_reduction": {
          "type": "float",
          "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"
        }
      },
      "required": [
        "distance",
        "fuel_type",
        "fuel_efficiency"
      ]
    }
  },
  {
    "name": "sculpture.get_details",
    "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.",
    "parameters": {
      "type": "dict",
      "properties": {
        "artist": {
          "type": "string",
          "description": "The artist who made the sculpture."
        },
        "title": {
          "type": "string",
          "description": "The title of the sculpture."
        },
        "detail": {
          "type": "string",
          "description": "The specific detail wanted about the sculpture. Default is 'general information'."
        }
      },
      "required": [
        "artist",
        "title"
      ]
    }
  },
  {
    "name": "restaurant.find_nearby",
    "description": "Locate nearby restaurants based on specific criteria like cuisine type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Seattle, WA"
        },
        "cuisine": {
          "type": "string",
          "description": "Preferred type of cuisine in restaurant."
        },
        "max_distance": {
          "type": "integer",
          "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."
        }
      },
      "required": [
        "location",
        "cuisine"
      ]
    }
  },
  {
    "name": "ecology_data.precipitation_stats",
    "description": "Retrieve precipitation data for a specified location and time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The name of the location, e.g., 'Amazon rainforest'."
        },
        "time_frame": {
          "type": "string",
          "enum": [
            "six_months",
            "year",
            "five_years"
          ],
          "description": "The time period for which data is required."
        }
      },
      "required": [
        "location",
        "time_frame"
      ]
    }
  },
  {
    "name": "map_service.get_directions",
    "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start": {
          "type": "string",
          "description": "Starting location for the route."
        },
        "end": {
          "type": "string",
          "description": "Ending location for the route."
        },
        "avoid": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "tolls",
              "highways",
              "ferries"
            ]
          },
          "description": "Route features to avoid. Default is an empty array."
        }
      },
      "required": [
        "start",
        "end"
      ]
    }
  },
  {
    "name": "convert_currency",
    "description": "Converts an amount from a particular currency to another currency.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base_currency": {
          "type": "string",
          "description": "The base currency in which the original amount is present."
        },
        "target_currency": {
          "type": "string",
          "description": "The currency to which you want to convert."
        },
        "amount": {
          "type": "integer",
          "description": "The amount you want to convert."
        }
      },
      "required": [
        "base_currency",
        "target_currency",
        "amount"
      ]
    }
  },
  {
    "name": "ecology.get_turtle_population",
    "description": "Get the population and species of turtles in a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The name of the location."
        },
        "year": {
          "type": "integer",
          "description": "The year of the data requested. (optional) Default is 2024."
        },
        "species": {
          "type": "boolean",
          "description": "Whether to include species information. Default is false. (optional)"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "get_current_time",
    "description": "Retrieve the current time in a specific time zone.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The name of the city."
        },
        "country": {
          "type": "string",
          "description": "The name of the country."
        },
        "timezone": {
          "type": "string",
          "description": "The optional timezone to get current time. Default ''"
        }
      },
      "required": [
        "location",
        "country"
      ]
    }
  },
  {
    "name": "hotel_booking",
    "description": "Books a hotel room for a specific date range.",
    "parameters": {
      "type": "dict",
      "properties": {
        "hotel_name": {
          "type": "string",
          "description": "The name of the hotel."
        },
        "location": {
          "type": "string",
          "description": "The city and state, e.g. New York, NY."
        },
        "start_date": {
          "type": "string",
          "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."
        },
        "end_date": {
          "type": "string",
          "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."
        },
        "rooms": {
          "type": "integer",
          "default": 1,
          "description": "The number of rooms to reserve."
        }
      },
      "required": [
        "hotel_name",
        "location",
        "start_date",
        "end_date"
      ]
    }
  },
  {
    "name": "sentiment_analysis",
    "description": "Perform sentiment analysis on a given piece of text.",
    "parameters": {
      "type": "dict",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text on which to perform sentiment analysis."
        },
        "language": {
          "type": "string",
          "description": "The language in which the text is written."
        }
      },
      "required": [
        "text",
        "language"
      ]
    }
  },
  {
    "name": "get_time_difference",
    "description": "Get the time difference between two places.",
    "parameters": {
      "type": "dict",
      "properties": {
        "place1": {
          "type": "string",
          "description": "The first place for time difference."
        },
        "place2": {
          "type": "string",
          "description": "The second place for time difference."
        }
      },
      "required": [
        "place1",
        "place2"
      ]
    }
  },
  {
    "name": "calculate_bmi",
    "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "weight": {
          "type": "integer",
          "description": "The weight of the person in kilograms."
        },
        "height": {
          "type": "integer",
          "description": "The height of the person in centimeters."
        },
        "system": {
          "type": "string",
          "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."
        }
      },
      "required": [
        "weight",
        "height"
      ]
    }
  },
  {
    "name": "calculate_electrostatic_potential",
    "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge1": {
          "type": "float",
          "description": "The quantity of charge on the first body."
        },
        "charge2": {
          "type": "float",
          "description": "The quantity of charge on the second body."
        },
        "distance": {
          "type": "float",
          "description": "The distance between the two bodies."
        },
        "constant": {
          "type": "float",
          "description": "The value of the electrostatic constant. Default is 898755178.73"
        }
      },
      "required": [
        "charge1",
        "charge2",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_neuronal_activity",
    "description": "Calculate the neuronal activity (rate of firing) based on a given input synaptic rate, weight of inputs, and decay rate. Higher input or weight increases firing rate and higher decay rate decreases it.",
    "parameters": {
      "type": "dict",
      "properties": {
        "input_synaptic_rate": {
          "type": "integer",
          "description": "The synaptic input rate, usually represented as number of inputs per second."
        },
        "weight": {
          "type": "float",
          "description": "The weight of the input, denoting its influence on the neuron's state. Default is 1.0."
        },
        "decay_rate": {
          "type": "float",
          "description": "The rate at which the neuron's potential decays in the absence of inputs."
        }
      },
      "required": [
        "input_synaptic_rate",
        "decay_rate"
      ],
      "optional": [
        "weight"
      ]
    }
  },
  {
    "name": "calculate_displacement",
    "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "float",
          "description": "The initial velocity of the object in m/s."
        },
        "time": {
          "type": "integer",
          "description": "The time in seconds that the object has been in motion."
        },
        "acceleration": {
          "type": "float",
          "description": "The acceleration of the object in m/s^2.",
          "default": 0
        }
      },
      "required": [
        "initial_velocity",
        "time"
      ]
    }
  },
  {
    "name": "social_media_analytics.most_followed",
    "description": "Find the most followed Twitter user related to certain topics.",
    "parameters": {
      "type": "dict",
      "properties": {
        "topic": {
          "type": "string",
          "description": "The main topic of interest."
        },
        "sub_topics": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Sub-topics related to main topic, Optional. Default is an empty list."
        },
        "region": {
          "type": "string",
          "description": "Region of interest for twitter search, Optional. Default is 'global'."
        }
      },
      "required": [
        "topic"
      ]
    }
  },
  {
    "name": "concert_info.get",
    "description": "Retrieve information about concerts based on specific genre, location and date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where the concert will take place."
        },
        "date": {
          "type": "string",
          "description": "Time frame to get the concert for."
        },
        "genre": {
          "type": "string",
          "description": "Genre of the concert.",
          "enum": [
            "Pop",
            "Rock",
            "Country",
            "Classical",
            "Electronic",
            "Hip-Hop"
          ]
        }
      },
      "required": [
        "location",
        "date",
        "genre"
      ]
    }
  },
  {
    "name": "history.get_key_events",
    "description": "Retrieve key historical events within a specific period for a certain country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The name of the country for which history is queried."
        },
        "start_year": {
          "type": "integer",
          "description": "Start year of the period for which history is queried."
        },
        "end_year": {
          "type": "integer",
          "description": "End year of the period for which history is queried."
        },
        "event_type": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "War",
              "Revolutions",
              "Diplomacy",
              "Economy"
            ]
          },
          "description": "Types of event. If none is provided, all types will be considered. Default is ['all']."
        }
      },
      "required": [
        "country",
        "start_year",
        "end_year"
      ]
    }
  },
  {
    "name": "get_sculpture_value",
    "description": "Retrieve the current market value of a particular sculpture by a specific artist.",
    "parameters": {
      "type": "dict",
      "properties": {
        "sculpture": {
          "type": "string",
          "description": "The name of the sculpture."
        },
        "artist": {
          "type": "string",
          "description": "The name of the artist who created the sculpture."
        },
        "year": {
          "type": "integer",
          "description": "The year the sculpture was created. This is optional and is not required for all sculptures. Default is the 2024."
        }
      },
      "required": [
        "sculpture",
        "artist"
      ]
    }
  },
  {
    "name": "locate_tallest_mountains",
    "description": "Find the tallest mountains within a specified radius of a location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city from which to calculate distance."
        },
        "radius": {
          "type": "float",
          "description": "The radius within which to find mountains, measured in kilometers."
        },
        "amount": {
          "type": "integer",
          "description": "The number of mountains to find, listed from tallest to smallest."
        }
      },
      "required": [
        "location",
        "radius",
        "amount"
      ]
    }
  },
  {
    "name": "calculate_entropy_change",
    "description": "Calculate the entropy change for an isothermal and reversible process.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_temp": {
          "type": "float",
          "description": "The initial temperature in Kelvin."
        },
        "final_temp": {
          "type": "float",
          "description": "The final temperature in Kelvin."
        },
        "heat_capacity": {
          "type": "float",
          "description": "The heat capacity in J/K."
        },
        "isothermal": {
          "type": "boolean",
          "description": "Whether the process is isothermal. Default is True."
        }
      },
      "required": [
        "initial_temp",
        "final_temp",
        "heat_capacity"
      ]
    }
  },
  {
    "name": "US_president.in_year",
    "description": "Retrieve the name of the U.S. president in a given year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "year": {
          "type": "integer",
          "description": "The year in question."
        },
        "full_name": {
          "type": "boolean",
          "default": true,
          "description": "Option to return full name with middle initial, if applicable."
        }
      },
      "required": [
        "year"
      ]
    }
  },
  {
    "name": "find_card_in_deck",
    "description": "Locate a particular card in a deck based on rank and suit.",
    "parameters": {
      "type": "dict",
      "properties": {
        "rank": {
          "type": "string",
          "description": "Rank of the card (e.g. Ace, Two, King)."
        },
        "suit": {
          "type": "string",
          "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."
        },
        "deck": {
          "type": "array",
          "items": {
            "type": "dict",
            "properties": {
              "rank": {
                "type": "string"
              },
              "suit": {
                "type": "string"
              }
            }
          },
          "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck by default"
        }
      },
      "required": [
        "rank",
        "suit"
      ]
    }
  },
  {
    "name": "update_user_info",
    "description": "Update user information in the database.",
    "parameters": {
      "type": "dict",
      "properties": {
        "user_id": {
          "type": "integer",
          "description": "The user ID of the customer."
        },
        "update_info": {
          "type": "dict",
          "properties": {
            "name": {
              "type": "string",
              "description": "The customer's updated name."
            },
            "email": {
              "type": "string",
              "description": "The customer's updated email."
            }
          },
          "description": "The new information to update."
        },
        "database": {
          "type": "string",
          "description": "The database where the user's information is stored.",
          "default": "CustomerInfo"
        }
      },
      "required": [
        "user_id",
        "update_info"
      ]
    }
  },
  {
    "name": "get_discoverer",
    "description": "Get the person or team who made a particular scientific discovery",
    "parameters": {
      "type": "dict",
      "properties": {
        "discovery": {
          "type": "string",
          "description": "The discovery for which the discoverer's information is needed."
        },
        "detail": {
          "type": "boolean",
          "description": "Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false."
        }
      },
      "required": [
        "discovery",
        "detail"
      ]
    }
  },
  {
    "name": "diabetes_prediction",
    "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "weight": {
          "type": "float",
          "description": "Weight of the person in lbs."
        },
        "height": {
          "type": "float",
          "description": "Height of the person in inches."
        },
        "activity_level": {
          "type": "string",
          "enum": [
            "sedentary",
            "lightly active",
            "moderately active",
            "very active",
            "extra active"
          ],
          "description": "Physical activity level of the person."
        }
      },
      "required": [
        "weight",
        "height",
        "activity_level"
      ]
    }
  },
  {
    "name": "museum_working_hours.get",
    "description": "Get the working hours of a museum in a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum": {
          "type": "string",
          "description": "The name of the museum."
        },
        "location": {
          "type": "string",
          "description": "The location of the museum."
        },
        "day": {
          "type": "string",
          "description": "Specific day of the week. Optional parameter. Default is 'today'."
        }
      },
      "required": [
        "museum",
        "location"
      ]
    }
  },
  {
    "name": "historical_contrib.get_contrib",
    "description": "Retrieve historical contribution made by a scientist on a specific date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "scientist": {
          "type": "string",
          "description": "The scientist whose contributions need to be searched."
        },
        "date": {
          "type": "string",
          "description": "The date when the contribution was made in yyyy-mm-dd format."
        },
        "category": {
          "type": "string",
          "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields."
        }
      },
      "required": [
        "scientist",
        "date"
      ]
    }
  },
  {
    "name": "music.calculate_note_duration",
    "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.",
    "parameters": {
      "type": "dict",
      "properties": {
        "first_note_frequency": {
          "type": "float",
          "description": "The frequency of the first note in Hz."
        },
        "second_note_frequency": {
          "type": "float",
          "description": "The frequency of the second note in Hz."
        },
        "tempo": {
          "type": "integer",
          "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."
        }
      },
      "required": [
        "first_note_frequency",
        "second_note_frequency"
      ]
    }
  },
  {
    "name": "sports_ranking.get_current",
    "description": "Retrieve the current ranking of a specific team in a particular league.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The name of the team whose ranking is sought."
        },
        "league": {
          "type": "string",
          "description": "The league in which the team participates."
        },
        "season": {
          "type": "string",
          "description": "The season for which the ranking is sought. Defaults to the current season if not provided."
        }
      },
      "required": [
        "team",
        "league"
      ]
    }
  },
  {
    "name": "publication_year.find",
    "description": "Fetches the year a particular scientific work was published.",
    "parameters": {
      "type": "dict",
      "properties": {
        "author": {
          "type": "string",
          "description": "Name of the author of the work."
        },
        "work_title": {
          "type": "string",
          "description": "Title of the scientific work."
        },
        "location": {
          "type": "string",
          "description": "Place of the publication, if known. Default is 'global'."
        }
      },
      "required": [
        "author",
        "work_title"
      ]
    }
  },
  {
    "name": "religious_history.get_papal_biography",
    "description": "Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "papal_name": {
          "type": "string",
          "description": "The papal name of the Pope."
        },
        "include_contributions": {
          "type": "boolean",
          "default": false,
          "description": "Include main contributions of the Pope in the response if true."
        }
      },
      "required": [
        "papal_name",
        "include_contributions"
      ]
    }
  },
  {
    "name": "board_game_info",
    "description": "Get the information about a board game from a database. ",
    "parameters": {
      "type": "dict",
      "properties": {
        "game_name": {
          "type": "string",
          "description": "Name of the board game."
        },
        "info_required": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "average_review_rating",
              "age_range",
              "number_of_players",
              "playing_time",
              "genre"
            ]
          },
          "description": "Array of information requested for the game."
        }
      },
      "required": [
        "game_name",
        "info_required"
      ]
    }
  },
  {
    "name": "prob_dist.binomial",
    "description": "Compute the probability of having 'success' outcome from binomial distribution.",
    "parameters": {
      "type": "dict",
      "properties": {
        "trials": {
          "type": "integer",
          "description": "The number of independent experiments."
        },
        "successes": {
          "type": "integer",
          "description": "The number of success events."
        },
        "p": {
          "type": "float",
          "description": "The probability of success on any given trial, defaults to 0.5"
        }
      },
      "required": [
        "trials",
        "successes"
      ]
    }
  },
  {
    "name": "calculate_paint_needed",
    "description": "Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coverage_rate": {
          "type": "integer",
          "description": "The area in square feet that one gallon of paint can cover."
        },
        "length": {
          "type": "integer",
          "description": "Length of the wall to be painted in feet."
        },
        "height": {
          "type": "integer",
          "description": "Height of the wall to be painted in feet."
        }
      },
      "required": [
        "coverage_rate",
        "length",
        "height"
      ]
    }
  },
  {
    "name": "get_zodiac_compatibility",
    "description": "Retrieve the compatibility score between two Zodiac signs.",
    "parameters": {
      "type": "dict",
      "properties": {
        "sign1": {
          "type": "string",
          "description": "The first Zodiac sign."
        },
        "sign2": {
          "type": "string",
          "description": "The second Zodiac sign."
        },
        "scale": {
          "type": "string",
          "enum": [
            "percentage",
            "0-10 scale"
          ],
          "description": "The scale on which compatibility should be shown. Default is 'percentage'."
        }
      },
      "required": [
        "sign1",
        "sign2"
      ]
    }
  },
  {
    "name": "local_nursery.find",
    "description": "Locate local nurseries based on location and plant types availability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city or locality where the nursery needs to be located."
        },
        "plant_types": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Annual",
              "Perennial",
              "Shrub",
              "Tree",
              "Herbs",
              "Fruits"
            ]
          },
          "description": "Type of plants the nursery should provide."
        }
      },
      "required": [
        "location",
        "plant_types"
      ]
    }
  },
  {
    "name": "get_sculpture_info",
    "description": "Retrieves the most recent artwork by a specified artist with its detailed description.",
    "parameters": {
      "type": "dict",
      "properties": {
        "artist_name": {
          "type": "string",
          "description": "The name of the artist."
        },
        "detail": {
          "type": "boolean",
          "description": "If True, it provides detailed description of the sculpture. Defaults to False."
        }
      },
      "required": [
        "artist_name"
      ]
    }
  },
  {
    "name": "monarch.getMonarchOfYear",
    "description": "Retrieve the monarch of a specific location during a specified year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location (e.g., country) whose monarch needs to be found."
        },
        "year": {
          "type": "integer",
          "description": "The year to search the monarch."
        },
        "fullName": {
          "type": "boolean",
          "default": "false",
          "description": "If true, returns the full name and title of the monarch."
        }
      },
      "required": [
        "location",
        "year"
      ]
    }
  },
  {
    "name": "card_game_probability.calculate",
    "description": "Calculate the probability of drawing a certain card or suit from a deck of cards.",
    "parameters": {
      "type": "dict",
      "properties": {
        "total_cards": {
          "type": "integer",
          "description": "Total number of cards in the deck."
        },
        "desired_cards": {
          "type": "integer",
          "description": "Number of cards in the deck that satisfy the conditions."
        },
        "cards_drawn": {
          "type": "integer",
          "default": 1,
          "description": "Number of cards drawn from the deck."
        }
      },
      "required": [
        "total_cards",
        "desired_cards"
      ]
    }
  },
  {
    "name": "get_sculpture_info",
    "description": "Retrieves the most recent artwork by a specified artist with its detailed description.",
    "parameters": {
      "type": "dict",
      "properties": {
        "artist_name": {
          "type": "string",
          "description": "The name of the artist."
        },
        "year": {
          "type": "integer",
          "description": "Year of the sculpture. This is optional. Default 2024"
        },
        "detail": {
          "type": "boolean",
          "description": "If True, it provides detailed description of the sculpture. Defaults to False."
        }
      },
      "required": [
        "artist_name"
      ]
    }
  },
  {
    "name": "player_statistic",
    "description": "Retrieves detailed player's statistics for a specific year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The player's name."
        },
        "year": {
          "type": "integer",
          "description": "Year for which the statistics will be displayed."
        },
        "team_name": {
          "type": "string",
          "description": "The name of the team(optional). Default is 'all'"
        }
      },
      "required": [
        "player_name",
        "year"
      ]
    }
  },
  {
    "name": "analyze_structure",
    "description": "Analyze a structure of a building based on its Id and floor numbers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "building_id": {
          "type": "string",
          "description": "The unique identification number of the building."
        },
        "floors": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Floor numbers to be analyzed."
        },
        "mode": {
          "type": "string",
          "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."
        }
      },
      "required": [
        "building_id",
        "floors"
      ]
    }
  },
  {
    "name": "metropolitan_museum.get_top_artworks",
    "description": "Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "integer",
          "description": "The number of artworks to fetch"
        },
        "sort_by": {
          "type": "string",
          "description": "The criteria to sort the results on. Default is ''.",
          "enum": [
            "popularity",
            "chronological",
            "alphabetical"
          ]
        }
      },
      "required": [
        "number"
      ]
    }
  },
  {
    "name": "grocery_store.find_nearby",
    "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Houston, TX"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Organic",
              "Vegetables",
              "Fruits",
              "Dairy",
              "Seafood",
              "Bakery"
            ]
          },
          "description": "Categories of items to be found in the grocery store. Default is empty array"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "calculate_NPV",
    "description": "Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.",
    "parameters": {
      "type": "dict",
      "properties": {
        "cash_flows": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "Series of future cash flows."
        },
        "discount_rate": {
          "type": "float",
          "description": "The discount rate to use."
        },
        "initial_investment": {
          "type": "float",
          "description": "The initial investment. Default is 0 if not specified."
        }
      },
      "required": [
        "cash_flows",
        "discount_rate"
      ]
    }
  },
  {
    "name": "get_stock_price",
    "description": "Get the closing stock price for a specific company on a specified date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "Name of the company."
        },
        "date": {
          "type": "string",
          "description": "Date of when to get the stock price. Format: yyyy-mm-dd."
        },
        "exchange": {
          "type": "string",
          "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"
        }
      },
      "required": [
        "company_name",
        "date"
      ]
    }
  },
  {
    "name": "identify_color_rgb",
    "description": "This function identifies the RGB values of a named color.",
    "parameters": {
      "type": "dict",
      "properties": {
        "color_name": {
          "type": "string",
          "description": "Name of the color."
        },
        "standard": {
          "type": "string",
          "description": "The color standard (e.g. basic, pantone). Default is 'basic'"
        }
      },
      "required": [
        "color_name"
      ]
    }
  },
  {
    "name": "board_game.chess.get_top_players",
    "description": "Find top chess players in a location based on rating.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city you want to find the players from."
        },
        "minimum_rating": {
          "type": "integer",
          "description": "Minimum rating to filter the players."
        },
        "number_of_players": {
          "type": "integer",
          "default": 10,
          "description": "Number of players you want to retrieve, default value is 10"
        }
      },
      "required": [
        "location",
        "minimum_rating"
      ]
    }
  },
  {
    "name": "guitar_price.find",
    "description": "Retrieve the price of a specific used guitar model based on its condition and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "model": {
          "type": "string",
          "description": "The model of the guitar."
        },
        "condition": {
          "type": "string",
          "enum": [
            "Poor",
            "Good",
            "Excellent"
          ],
          "description": "The condition of the guitar."
        },
        "location": {
          "type": "string",
          "description": "The location where the guitar is being sold."
        }
      },
      "required": [
        "model",
        "condition",
        "location"
      ]
    }
  },
  {
    "name": "religion.history_info",
    "description": "Provides comprehensive historical details about a specified religion till a specified century.",
    "parameters": {
      "type": "dict",
      "properties": {
        "religion": {
          "type": "string",
          "description": "The name of the religion for which historical details are needed."
        },
        "till_century": {
          "type": "integer",
          "description": "The century till which historical details are needed."
        },
        "include_people": {
          "type": "boolean",
          "description": "To include influential people related to the religion during that time period, default is False"
        }
      },
      "required": [
        "religion",
        "till_century"
      ]
    }
  },
  {
    "name": "team_score.get_latest",
    "description": "Retrieve the score of the most recent game for a specified sports team.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "Name of the sports team."
        },
        "include_opponent": {
          "type": "boolean",
          "description": "Include the name of the opponent team in the return.",
          "default": "false"
        }
      },
      "required": [
        "team"
      ]
    }
  },
  {
    "name": "concert.search",
    "description": "Locate a concert based on specific criteria like genre, location, and date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "genre": {
          "type": "string",
          "description": "Genre of the concert."
        },
        "location": {
          "type": "string",
          "description": "City of the concert."
        },
        "date": {
          "type": "string",
          "description": "Date of the concert, e.g. this weekend, today, tomorrow, or date string."
        },
        "price_range": {
          "type": "string",
          "enum": [
            "free",
            "cheap",
            "moderate",
            "expensive",
            "any"
          ],
          "description": "Expected price range of the concert tickets. Default is 'any'"
        }
      },
      "required": [
        "genre",
        "location",
        "date"
      ]
    }
  },
  {
    "name": "get_directions",
    "description": "Retrieve directions from one location to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The starting point of the journey."
        },
        "end_location": {
          "type": "string",
          "description": "The destination point of the journey."
        },
        "route_type": {
          "type": "string",
          "description": "Type of route to use (e.g., fastest, scenic). Default is fastest.",
          "enum": [
            "fastest",
            "scenic"
          ]
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "get_stock_price",
    "description": "Retrieves the current stock price of the specified companies",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of companies for which to retrieve the stock price."
        }
      },
      "required": [
        "company_names"
      ]
    }
  },
  {
    "name": "walmart.purchase",
    "description": "Retrieve information of items from Walmart including stock availability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "loc": {
          "type": "string",
          "description": "Location of the nearest Walmart."
        },
        "product_list": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Items to be purchased listed in an array."
        },
        "pack_size": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is an empty array"
        }
      },
      "required": [
        "loc",
        "product_list"
      ]
    }
  },
  {
    "name": "us_history.get_president",
    "description": "Retrieve the U.S. president during a specific event in American history.",
    "parameters": {
      "type": "dict",
      "properties": {
        "event": {
          "type": "string",
          "description": "The event in U.S. history."
        },
        "year": {
          "type": "integer",
          "description": "The specific year of the event."
        }
      },
      "required": [
        "event",
        "year"
      ]
    }
  },
  {
    "name": "monopoly_odds_calculator",
    "description": "Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "integer",
          "description": "The number for which the odds are calculated."
        },
        "dice_number": {
          "type": "integer",
          "description": "The number of dice involved in the roll."
        },
        "dice_faces": {
          "type": "integer",
          "description": "The number of faces on a single die. Default is 6 for standard six-faced die."
        }
      },
      "required": [
        "number",
        "dice_number"
      ]
    }
  },
  {
    "name": "soccer_stat.get_player_stats",
    "description": "Retrieve soccer player statistics for a given season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "Name of the player."
        },
        "season": {
          "type": "string",
          "description": "Soccer season, usually specified by two years."
        },
        "league": {
          "type": "string",
          "description": "Optional - the soccer league, defaults to all leagues. Default 'all'"
        }
      },
      "required": [
        "player_name",
        "season"
      ]
    }
  },
  {
    "name": "game_result.get_winner",
    "description": "Get the winner of a specific basketball game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "teams": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of two teams who played the game."
        },
        "date": {
          "type": "string",
          "description": "The date of the game, formatted as YYYY-MM-DD."
        },
        "venue": {
          "type": "string",
          "optional": true,
          "description": "Optional: The venue of the game. Default is ''"
        }
      },
      "required": [
        "teams",
        "date"
      ]
    }
  },
  {
    "name": "get_traffic_info",
    "description": "Retrieve current traffic conditions for a specified route.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The starting point of the route."
        },
        "end_location": {
          "type": "string",
          "description": "The destination of the route."
        },
        "mode": {
          "type": "string",
          "enum": [
            "driving",
            "walking",
            "bicycling",
            "transit"
          ],
          "description": "Preferred method of transportation, default to 'driving'."
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "sports_db.find_athlete",
    "description": "Find the profile information of a sports athlete based on their full name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The full name of the athlete."
        },
        "team": {
          "type": "string",
          "description": "The team the athlete belong to. Default is ''"
        },
        "sport": {
          "type": "string",
          "description": "The sport that athlete plays.",
          "enum": [
            "Basketball",
            "Baseball",
            "Football",
            "Soccer"
          ]
        }
      },
      "required": [
        "name",
        "sport"
      ]
    }
  },
  {
    "name": "get_defense_ranking",
    "description": "Retrieve the defence ranking of NBA teams in a specified season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "season": {
          "type": "integer",
          "description": "The NBA season to get defence ranking from."
        },
        "top": {
          "type": "integer",
          "default": 1,
          "description": "Number of top teams in defence ranking to fetch."
        }
      },
      "required": [
        "season"
      ]
    }
  },
  {
    "name": "array_sort",
    "description": "Sorts a given list in ascending or descending order.",
    "parameters": {
      "type": "dict",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "The list of numbers to be sorted."
        },
        "order": {
          "type": "string",
          "enum": [
            "ascending",
            "descending"
          ],
          "description": "Order of sorting. If not specified, it will default to ascending."
        }
      },
      "required": [
        "list",
        "order"
      ]
    }
  },
  {
    "name": "calculate_cagr",
    "description": "Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_value": {
          "type": "float",
          "description": "The initial investment value."
        },
        "final_value": {
          "type": "float",
          "description": "The final investment value."
        },
        "period_in_years": {
          "type": "integer",
          "description": "The period of the investment in years."
        }
      },
      "required": [
        "initial_value",
        "final_value",
        "period_in_years"
      ]
    }
  },
  {
    "name": "sports_ranking",
    "description": "Fetch the ranking of a specific sports team in a specific league",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The name of the team."
        },
        "league": {
          "type": "string",
          "description": "The name of the league."
        },
        "season": {
          "type": "integer",
          "description": "Optional parameter to specify the season, default is the current season, 2024"
        }
      },
      "required": [
        "team",
        "league"
      ]
    }
  },
  {
    "name": "find_instrument",
    "description": "Search for a musical instrument within specified budget and of specific type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "budget": {
          "type": "float",
          "description": "Your budget for the instrument."
        },
        "type": {
          "type": "string",
          "description": "Type of the instrument"
        },
        "make": {
          "type": "string",
          "description": "Maker of the instrument, Optional parameter. Default is ''"
        }
      },
      "required": [
        "budget",
        "type"
      ]
    }
  },
  {
    "name": "electromagnetic_force",
    "description": "Calculate the electromagnetic force between two charges placed at a certain distance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge1": {
          "type": "float",
          "description": "The magnitude of the first charge in coulombs."
        },
        "charge2": {
          "type": "float",
          "description": "The magnitude of the second charge in coulombs."
        },
        "distance": {
          "type": "float",
          "description": "The distance between the two charges in meters."
        },
        "medium_permittivity": {
          "type": "float",
          "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity)."
        }
      },
      "required": [
        "charge1",
        "charge2",
        "distance"
      ]
    }
  },
  {
    "name": "sports_ranking.get_top_player",
    "description": "Get the top player in a specific sport.",
    "parameters": {
      "type": "dict",
      "properties": {
        "sport": {
          "type": "string",
          "description": "The type of sport."
        },
        "gender": {
          "type": "string",
          "description": "The gender of the sport category. Optional.",
          "default": "men"
        }
      },
      "required": [
        "sport"
      ]
    }
  },
  {
    "name": "vegan_restaurant.find_nearby",
    "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. New York, NY"
        },
        "operating_hours": {
          "type": "integer",
          "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 9."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "hotel_booking",
    "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where you want to book the hotel."
        },
        "room_type": {
          "type": "string",
          "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."
        },
        "duration": {
          "type": "integer",
          "description": "The number of nights you want to book the hotel for."
        },
        "start_date": {
          "type": "string",
          "description": "The date when your stay begins."
        },
        "preferences": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "pet_friendly",
              "gym",
              "swimming_pool",
              "free_breakfast",
              "parking"
            ]
          },
          "description": "Optional preferences of stay at the hotel. Default is empty array"
        }
      },
      "required": [
        "location",
        "room_type",
        "duration",
        "start_date"
      ]
    }
  },
  {
    "name": "sports_team.get_schedule",
    "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the sports team."
        },
        "num_of_games": {
          "type": "integer",
          "description": "Number of games for which to fetch the schedule."
        },
        "league": {
          "type": "string",
          "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."
        },
        "location": {
          "type": "string",
          "description": "Optional. The city or venue where games are to be held. If not provided, all venues will be considered. Default to ''."
        }
      },
      "required": [
        "team_name",
        "num_of_games",
        "league"
      ]
    }
  },
  {
    "name": "get_historical_GDP",
    "description": "Retrieve historical GDP data for a specific country and time range.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The country for which the historical GDP data is required."
        },
        "start_year": {
          "type": "integer",
          "description": "Starting year of the period for which GDP data is required."
        },
        "end_year": {
          "type": "integer",
          "description": "Ending year of the period for which GDP data is required."
        }
      },
      "required": [
        "country",
        "start_year",
        "end_year"
      ]
    }
  },
  {
    "name": "maps.get_distance_duration",
    "description": "Retrieve the travel distance and estimated travel time from one location to another via car",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "Starting point of the journey"
        },
        "end_location": {
          "type": "string",
          "description": "Ending point of the journey"
        },
        "traffic": {
          "type": "boolean",
          "description": "If true, considers current traffic. Default is false."
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "currency_exchange.convert",
    "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base_currency": {
          "type": "string",
          "description": "The currency to convert from."
        },
        "target_currency": {
          "type": "string",
          "description": "The currency to convert to."
        },
        "amount": {
          "type": "float",
          "description": "The amount in base currency to convert"
        }
      },
      "required": [
        "base_currency",
        "target_currency",
        "amount"
      ]
    }
  },
  {
    "name": "recipe.unit_conversion",
    "description": "Convert a value from one kitchen unit to another for cooking purposes.",
    "parameters": {
      "type": "dict",
      "properties": {
        "value": {
          "type": "float",
          "description": "The value to be converted."
        },
        "from_unit": {
          "type": "string",
          "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."
        },
        "to_unit": {
          "type": "string",
          "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."
        },
        "precision": {
          "type": "integer",
          "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 0."
        }
      },
      "required": [
        "value",
        "from_unit",
        "to_unit"
      ]
    }
  },
  {
    "name": "hospital.locate",
    "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Denver, CO"
        },
        "radius": {
          "type": "integer",
          "description": "The radius within which you want to find the hospital in kms."
        },
        "department": {
          "type": "string",
          "description": "Specific department within the hospital. Default is ''.",
          "enum": [
            "General Medicine",
            "Emergency",
            "Pediatrics",
            "Cardiology",
            "Orthopedics"
          ]
        }
      },
      "required": [
        "location",
        "radius"
      ]
    }
  },
  {
    "name": "find_recipe",
    "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.",
    "parameters": {
      "type": "dict",
      "properties": {
        "dietary_restrictions": {
          "type": "string",
          "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."
        },
        "recipe_type": {
          "type": "string",
          "description": "Type of the recipe. E.g. dessert, main course, breakfast."
        },
        "time": {
          "type": "integer",
          "description": "Time limit in minutes to prep the meal."
        }
      },
      "required": [
        "dietary_restrictions",
        "recipe_type",
        "time"
      ]
    }
  },
  {
    "name": "flight.book",
    "description": "Book a direct flight for a specific date and time from departure location to destination location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "departure_location": {
          "type": "string",
          "description": "The location you are departing from."
        },
        "destination_location": {
          "type": "string",
          "description": "The location you are flying to."
        },
        "date": {
          "type": "string",
          "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."
        },
        "time": {
          "type": "string",
          "description": "Preferred time of flight. Default is ''"
        },
        "direct_flight": {
          "type": "boolean",
          "description": "If set to true, only direct flights will be searched. Default is false"
        }
      },
      "required": [
        "departure_location",
        "destination_location",
        "date"
      ]
    }
  },
  {
    "name": "game_stats.fetch_player_statistics",
    "description": "Fetch player statistics for a specific video game for a given user.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The name of the video game."
        },
        "username": {
          "type": "string",
          "description": "The username of the player."
        },
        "platform": {
          "type": "string",
          "description": "The platform user is playing on.",
          "default": "PC"
        }
      },
      "required": [
        "game",
        "username"
      ]
    }
  },
  {
    "name": "building.get_dimensions",
    "description": "Retrieve the dimensions of a specific building based on its name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "building_name": {
          "type": "string",
          "description": "The name of the building."
        },
        "unit": {
          "type": "string",
          "description": "The unit in which you want the dimensions. Default is meter.",
          "enum": [
            "meter",
            "feet"
          ]
        }
      },
      "required": [
        "building_name",
        "unit"
      ]
    }
  },
  {
    "name": "random_forest.train",
    "description": "Train a Random Forest Model on given data",
    "parameters": {
      "type": "dict",
      "properties": {
        "n_estimators": {
          "type": "integer",
          "description": "The number of trees in the forest."
        },
        "max_depth": {
          "type": "integer",
          "description": "The maximum depth of the tree."
        },
        "data": {
          "type": "any",
          "description": "The training data for the model."
        }
      },
      "required": [
        "n_estimators",
        "max_depth",
        "data"
      ]
    }
  },
  {
    "name": "geo_distance.calculate",
    "description": "Calculate the geographic distance between two given locations.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The starting location for the distance calculation."
        },
        "end_location": {
          "type": "string",
          "description": "The destination location for the distance calculation."
        },
        "units": {
          "type": "string",
          "description": "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "multiplayer_game_finder",
    "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.",
    "parameters": {
      "type": "dict",
      "properties": {
        "platform": {
          "type": "string",
          "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."
        },
        "rating": {
          "type": "float",
          "description": "Desired minimum game rating on a 5.0 scale."
        },
        "genre": {
          "type": "string",
          "description": "Desired game genre, e.g. Action, Adventure, Racing. Default is ''.",
          "enum": [
            "Action",
            "Adventure",
            "Racing",
            "Strategy",
            "Simulation"
          ]
        }
      },
      "required": [
        "platform",
        "rating"
      ]
    }
  },
  {
    "name": "send_email",
    "description": "Send an email to the specified email address.",
    "parameters": {
      "type": "dict",
      "properties": {
        "to": {
          "type": "string",
          "description": "The email address to send to."
        },
        "subject": {
          "type": "string",
          "description": "The subject of the email."
        },
        "body": {
          "type": "string",
          "description": "The body content of the email."
        },
        "cc": {
          "type": "string",
          "description": "The email address to carbon copy. Default is ''."
        },
        "bcc": {
          "type": "string",
          "description": "The email address to blind carbon copy. Default is ''."
        }
      },
      "required": [
        "to",
        "subject",
        "body"
      ]
    }
  },
  {
    "name": "calculate_area_under_curve",
    "description": "Calculate the area under a mathematical function within a given interval.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "The mathematical function as a string."
        },
        "interval": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."
        },
        "method": {
          "type": "string",
          "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."
        }
      },
      "required": [
        "function",
        "interval"
      ]
    }
  },
  {
    "name": "get_team_ranking",
    "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the soccer team."
        },
        "year": {
          "type": "integer",
          "description": "The year for which the ranking is to be retrieved."
        },
        "gender": {
          "type": "string",
          "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."
        }
      },
      "required": [
        "team_name",
        "year"
      ]
    }
  },
  {
    "name": "recipe_info.get_calories",
    "description": "Retrieve the amount of calories from a specific recipe in a food website.",
    "parameters": {
      "type": "dict",
      "properties": {
        "website": {
          "type": "string",
          "description": "The food website that has the recipe."
        },
        "recipe": {
          "type": "string",
          "description": "Name of the recipe."
        },
        "optional_meal_time": {
          "type": "string",
          "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner') Default is ''"
        }
      },
      "required": [
        "website",
        "recipe"
      ]
    }
  },
  {
    "name": "detailed_weather_forecast",
    "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the weather for."
        },
        "duration": {
          "type": "integer",
          "description": "Duration in hours for the detailed forecast."
        },
        "include_precipitation": {
          "type": "boolean",
          "description": "Whether to include precipitation data in the forecast. Default is false."
        }
      },
      "required": [
        "location",
        "duration"
      ]
    }
  },
  {
    "name": "recipe_search",
    "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.",
    "parameters": {
      "type": "dict",
      "properties": {
        "dietary_restriction": {
          "type": "string",
          "description": "The dietary restriction, e.g., 'Vegetarian'."
        },
        "ingredients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of ingredients."
        },
        "servings": {
          "type": "integer",
          "description": "The number of servings the recipe should make"
        }
      },
      "required": [
        "dietary_restriction",
        "ingredients",
        "servings"
      ]
    }
  },
  {
    "name": "science_history.get_discovery_details",
    "description": "Retrieve the details of a scientific discovery based on the discovery name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "discovery": {
          "type": "string",
          "description": "The name of the discovery, e.g. Gravity"
        },
        "method_used": {
          "type": "string",
          "description": "The method used for the discovery, default value is 'default' which gives the most accepted method."
        }
      },
      "required": [
        "discovery"
      ]
    }
  },
  {
    "name": "geometry.area_circle",
    "description": "Calculate the area of a circle given the radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "float",
          "description": "The radius of the circle."
        },
        "units": {
          "type": "string",
          "description": "The units in which the radius is measured (defaults to meters).",
          "default": "meters"
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "find_recipes",
    "description": "Find recipes based on dietary restrictions, meal type, and preferred ingredients.",
    "parameters": {
      "type": "dict",
      "properties": {
        "diet": {
          "type": "string",
          "description": "The dietary restrictions, e.g., 'vegan', 'gluten-free'."
        },
        "meal_type": {
          "type": "string",
          "description": "The type of meal, e.g., 'dinner', 'breakfast'."
        },
        "ingredients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The preferred ingredients. If left blank, it will return general recipes. Default is empty array."
        }
      },
      "required": [
        "diet",
        "meal_type"
      ]
    }
  },
  {
    "name": "whole_foods.check_price",
    "description": "Check the price of items at a specific Whole Foods location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location of the Whole Foods store."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of items for which the price needs to be checked."
        }
      },
      "required": [
        "location",
        "items"
      ]
    }
  },
  {
    "name": "calculate_shortest_distance",
    "description": "Calculate the shortest driving distance between two locations.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The starting location for the drive."
        },
        "end_location": {
          "type": "string",
          "description": "The destination location for the drive."
        },
        "route_preference": {
          "type": "string",
          "enum": [
            "Shortest",
            "Scenic"
          ],
          "description": "The preferred type of route."
        }
      },
      "required": [
        "start_location",
        "end_location",
        "route_preference"
      ]
    }
  },
  {
    "name": "psych_research.get_preference",
    "description": "Gathers research data on public preference between two options, based on societal category.",
    "parameters": {
      "type": "dict",
      "properties": {
        "category": {
          "type": "string",
          "description": "The societal category the preference data is about. E.g. reading, transportation, food"
        },
        "option_one": {
          "type": "string",
          "description": "The first option people could prefer."
        },
        "option_two": {
          "type": "string",
          "description": "The second option people could prefer."
        },
        "demographic": {
          "type": "string",
          "description": "Specific demographic of society to narrow down the research.",
          "default": "all"
        }
      },
      "required": [
        "category",
        "option_one",
        "option_two"
      ]
    }
  },
  {
    "name": "train_random_forest_classifier",
    "description": "Train a Random Forest classifier with the specified parameters.",
    "parameters": {
      "type": "dict",
      "properties": {
        "dataset": {
          "type": "string",
          "description": "The dataset to train the classifier on."
        },
        "max_depth": {
          "type": "integer",
          "description": "The maximum depth of the trees in the forest."
        },
        "n_estimators": {
          "type": "integer",
          "description": "The number of trees in the forest."
        }
      },
      "required": [
        "dataset",
        "max_depth",
        "n_estimators"
      ]
    }
  },
  {
    "name": "calculate_emission_savings",
    "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.",
    "parameters": {
      "type": "dict",
      "properties": {
        "energy_type": {
          "type": "string",
          "description": "Type of the renewable energy source."
        },
        "usage_duration": {
          "type": "integer",
          "description": "Usage duration in months."
        },
        "region": {
          "type": "string",
          "description": "The region where you use energy. Default is 'USA'"
        }
      },
      "required": [
        "energy_type",
        "usage_duration"
      ]
    }
  },
  {
    "name": "timezone.convert",
    "description": "Convert time from one time zone to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "time": {
          "type": "string",
          "description": "The local time you want to convert, e.g. 3pm"
        },
        "from_timezone": {
          "type": "string",
          "description": "The time zone you want to convert from."
        },
        "to_timezone": {
          "type": "string",
          "description": "The time zone you want to convert to."
        }
      },
      "required": [
        "time",
        "from_timezone",
        "to_timezone"
      ]
    }
  },
  {
    "name": "currency_converter",
    "description": "Calculates the cost in target currency given the amount in base currency and exchange rate",
    "parameters": {
      "type": "dict",
      "properties": {
        "base_currency": {
          "type": "string",
          "description": "The currency to convert from."
        },
        "target_currency": {
          "type": "string",
          "description": "The currency to convert to."
        },
        "amount": {
          "type": "float",
          "description": "The amount in base currency"
        }
      },
      "required": [
        "base_currency",
        "target_currency",
        "amount"
      ]
    }
  },
  {
    "name": "book_hotel",
    "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "hotel_name": {
          "type": "string",
          "description": "The name of the hotel."
        },
        "location": {
          "type": "string",
          "description": "The city in which the hotel is located."
        },
        "room_type": {
          "type": "string",
          "description": "The type of room to be booked."
        },
        "start_date": {
          "type": "string",
          "description": "The start date for the booking."
        },
        "nights": {
          "type": "integer",
          "description": "The number of nights for which the booking is to be made."
        }
      },
      "required": [
        "hotel_name",
        "location",
        "room_type",
        "start_date",
        "nights"
      ]
    }
  },
  {
    "name": "random.normalvariate",
    "description": "Generates a random number from a normal distribution given the mean and standard deviation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "mu": {
          "type": "float",
          "description": "Mean of the normal distribution."
        },
        "sigma": {
          "type": "float",
          "description": "Standard deviation of the normal distribution."
        }
      },
      "required": [
        "mu",
        "sigma"
      ]
    }
  },
  {
    "name": "elephant_population_estimate",
    "description": "Estimate future population of elephants given current population and growth rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "current_population": {
          "type": "integer",
          "description": "The current number of elephants."
        },
        "growth_rate": {
          "type": "float",
          "description": "The annual population growth rate of elephants."
        },
        "years": {
          "type": "integer",
          "description": "The number of years to project the population."
        }
      },
      "required": [
        "current_population",
        "growth_rate",
        "years"
      ]
    }
  },
  {
    "name": "currency_conversion.convert",
    "description": "Convert a value from one currency to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "amount": {
          "type": "integer",
          "description": "The amount to be converted."
        },
        "from_currency": {
          "type": "string",
          "description": "The currency to convert from."
        },
        "to_currency": {
          "type": "string",
          "description": "The currency to convert to."
        }
      },
      "required": [
        "amount",
        "from_currency",
        "to_currency"
      ]
    }
  },
  {
    "name": "calc_absolute_pressure",
    "description": "Calculates the absolute pressure from gauge and atmospheric pressures.",
    "parameters": {
      "type": "dict",
      "properties": {
        "atm_pressure": {
          "type": "float",
          "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."
        },
        "gauge_pressure": {
          "type": "float",
          "description": "The gauge pressure in atmospheres (atm). Must be provided."
        }
      },
      "required": [
        "gauge_pressure"
      ]
    }
  },
  {
    "name": "calculate_displacement",
    "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "float",
          "description": "The initial velocity of the object in m/s."
        },
        "time": {
          "type": "float",
          "description": "The time in seconds that the object has been in motion."
        },
        "acceleration": {
          "type": "float",
          "description": "The acceleration of the object in m/s^2.",
          "default": 0
        }
      },
      "required": [
        "initial_velocity",
        "time"
      ]
    }
  },
  {
    "name": "math.factorial",
    "description": "Calculate the factorial of a given number.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "float",
          "description": "The number for which factorial needs to be calculated."
        }
      },
      "required": [
        "number"
      ]
    }
  },
  {
    "name": "restaurant.find_nearby",
    "description": "Locate nearby restaurants based on specific criteria like cuisine type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Seattle, WA"
        },
        "cuisine": {
          "type": "string",
          "description": "Preferred type of cuisine in restaurant."
        },
        "max_distance": {
          "type": "float",
          "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."
        }
      },
      "required": [
        "location",
        "cuisine"
      ]
    }
  },
  {
    "name": "discoverer.get",
    "description": "Retrieve the name of the discoverer of an element based on its name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "element_name": {
          "type": "string",
          "description": "The name of the element."
        },
        "year": {
          "type": "integer",
          "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default is 0."
        },
        "first": {
          "type": "boolean",
          "default": true,
          "description": "Optional parameter indicating if the first discoverer's name should be retrieved."
        }
      },
      "required": [
        "element_name"
      ]
    }
  },
  {
    "name": "get_museum_hours",
    "description": "Retrieve opening hours of a specified museum for the specified day.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum_name": {
          "type": "string",
          "description": "The name of the museum."
        },
        "day": {
          "type": "string",
          "description": "Day of the week.",
          "enum": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ]
        }
      },
      "required": [
        "museum_name",
        "day"
      ]
    }
  },
  {
    "name": "get_lawsuit_details",
    "description": "Retrieve the detailed information about a lawsuit based on its case number and the court location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_number": {
          "type": "string",
          "description": "The case number of the lawsuit."
        },
        "court_location": {
          "type": "string",
          "description": "The location of the court where the case is filed."
        },
        "additional_details": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "attorneys",
              "plaintiffs",
              "defendants",
              "charges",
              "court_updates"
            ]
          },
          "description": "Optional. Array containing additional details to be fetched. Default is empty array."
        }
      },
      "required": [
        "case_number",
        "court_location"
      ]
    }
  },
  {
    "name": "get_team_rank",
    "description": "Get the team ranking in a sports league based on season and type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the sports team."
        },
        "league": {
          "type": "string",
          "description": "The name of the league in which the team competes."
        },
        "season": {
          "type": "string",
          "description": "The season for which the team's ranking is sought."
        },
        "type": {
          "type": "string",
          "description": "Type of the season: regular or playoff.",
          "enum": [
            "regular",
            "playoff"
          ]
        }
      },
      "required": [
        "team_name",
        "league",
        "season",
        "type"
      ]
    }
  },
  {
    "name": "calculate_electric_field",
    "description": "Calculate the electric field produced by a charge at a certain distance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge": {
          "type": "float",
          "description": "Charge in coulombs producing the electric field."
        },
        "distance": {
          "type": "float",
          "description": "Distance from the charge in meters where the field is being measured."
        },
        "permitivity": {
          "type": "float",
          "description": "Permitivity of the space where field is being calculated, default is for vacuum."
        }
      },
      "required": [
        "charge",
        "distance"
      ]
    }
  },
  {
    "name": "get_highest_scoring_player",
    "description": "Retrieve the highest scoring player in a specific game and season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The game in which you want to find the highest scoring player."
        },
        "season": {
          "type": "string",
          "description": "The season during which the high score was achieved."
        },
        "region": {
          "type": "string",
          "description": "The geographical region in which the game is being played (Optional). Default is 'all'"
        }
      },
      "required": [
        "game",
        "season"
      ]
    }
  },
  {
    "name": "db_fetch_records",
    "description": "Fetch records from a specified database table based on certain conditions.",
    "parameters": {
      "type": "dict",
      "properties": {
        "database_name": {
          "type": "string",
          "description": "The name of the database."
        },
        "table_name": {
          "type": "string",
          "description": "The name of the table from which records need to be fetched."
        },
        "conditions": {
          "type": "dict",
          "properties": {
            "department": {
              "type": "string",
              "description": "The name of the department of students."
            },
            "school": {
              "type": "string",
              "description": "The name of the school students are enrolled in."
            }
          },
          "description": "The conditions based on which records are to be fetched."
        },
        "fetch_limit": {
          "type": "integer",
          "description": "Limits the number of records to be fetched. If left empty, it fetches all records. (Optional) Default is 0."
        }
      },
      "required": [
        "database_name",
        "table_name",
        "conditions"
      ]
    }
  },
  {
    "name": "spotify.play",
    "description": "Play specific tracks from a given artist for a specific time duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "artist": {
          "type": "string",
          "description": "The artist whose songs you want to play."
        },
        "duration": {
          "type": "integer",
          "description": "The duration for which the songs should be played, in minutes."
        }
      },
      "required": [
        "artist",
        "duration"
      ]
    }
  },
  {
    "name": "calculate_em_force",
    "description": "Calculate the induced electromagnetic force based on Faraday's Law of Electromagnetic Induction, given the magnetic field (in Tesla), change in magnetic field area (in square meters), and the change in time (in seconds).",
    "parameters": {
      "type": "dict",
      "properties": {
        "b_field": {
          "type": "integer",
          "description": "The magnetic field in Tesla."
        },
        "area": {
          "type": "integer",
          "description": "The change in area of magnetic field in square meters."
        },
        "d_time": {
          "type": "integer",
          "description": "The change in time in seconds."
        }
      },
      "required": [
        "b_field",
        "area",
        "d_time"
      ]
    }
  },
  {
    "name": "calculate_resistance",
    "description": "Calculate the resistance of a wire using resistivity, length, and cross-sectional area.",
    "parameters": {
      "type": "dict",
      "properties": {
        "length": {
          "type": "integer",
          "description": "The length of the wire in meters."
        },
        "area": {
          "type": "float",
          "description": "The cross-sectional area of the wire in square meters."
        },
        "resistivity": {
          "type": "string",
          "description": "Resistivity of the material (Default: 'copper'). Allowed values: 'copper', 'aluminum'"
        }
      },
      "required": [
        "length",
        "area"
      ]
    }
  },
  {
    "name": "protein_info.get_sequence_and_3D",
    "description": "Retrive the sequence and 3D models of proteins.",
    "parameters": {
      "type": "dict",
      "properties": {
        "protein_name": {
          "type": "string",
          "description": "The name of the protein."
        },
        "model_3d": {
          "type": "boolean",
          "description": "Set true to get 3D model of the protein.",
          "default": true
        }
      },
      "required": [
        "protein_name"
      ]
    }
  },
  {
    "name": "calculate_bmi",
    "description": "Calculate body mass index for a person based on their weight and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "height": {
          "type": "float",
          "description": "The height of the person in feet."
        },
        "weight": {
          "type": "integer",
          "description": "The weight of the person in kilograms."
        }
      },
      "required": [
        "height",
        "weight"
      ]
    }
  },
  {
    "name": "streaming_services.shows_list_and_ratings",
    "description": "Get a list of shows and their ratings on specific streaming services.",
    "parameters": {
      "type": "dict",
      "properties": {
        "streaming_service": {
          "type": "string",
          "description": "Name of the streaming service. E.g., Netflix, Hulu, etc."
        },
        "show_list": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of show names to search for on the platform."
        },
        "sort_by_rating": {
          "type": "boolean",
          "description": "If set to true, returns the list sorted by ratings. Defaults to false."
        }
      },
      "required": [
        "streaming_service",
        "show_list"
      ]
    }
  },
  {
    "name": "calculate_sales_tax",
    "description": "Calculate the sales tax for a given purchase amount in a specific city and state.",
    "parameters": {
      "type": "dict",
      "properties": {
        "purchase_amount": {
          "type": "float",
          "description": "The purchase amount."
        },
        "city": {
          "type": "string",
          "description": "The city where the purchase is made."
        },
        "state": {
          "type": "string",
          "description": "The state where the purchase is made."
        }
      },
      "required": [
        "purchase_amount",
        "city",
        "state"
      ]
    }
  },
  {
    "name": "math.factorial",
    "description": "Calculate the factorial of a given positive integer.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "integer",
          "description": "The number for which factorial needs to be calculated."
        }
      },
      "required": [
        "number"
      ]
    }
  },
  {
    "name": "database_us_census.get_population",
    "description": "Fetch population data from US Census database.",
    "parameters": {
      "type": "dict",
      "properties": {
        "area": {
          "type": "string",
          "description": "Name of the city, state, or country."
        },
        "type": {
          "type": "string",
          "description": "Specify whether the area is city/state/country."
        },
        "year": {
          "type": "integer",
          "description": "Year of the data",
          "default": 2000
        }
      },
      "required": [
        "area",
        "type"
      ]
    }
  },
  {
    "name": "find_movie_showing",
    "description": "Find local movie theatres and their schedule for a specific movie",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. San Diego, CA"
        },
        "movie": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Tenet",
              "No Time To Die"
            ]
          },
          "description": "Preferred movie to watch."
        },
        "time": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Show time for each movie"
          }
        }
      },
      "required": [
        "location",
        "movie",
        "time"
      ]
    }
  },
  {
    "name": "math.pythagoras",
    "description": "Calculates the hypotenuse of a right triangle based on the lengths of the other two sides.",
    "parameters": {
      "type": "dict",
      "properties": {
        "a": {
          "type": "integer",
          "description": "Length of one of the sides of a right triangle."
        },
        "b": {
          "type": "integer",
          "description": "Length of the other side of a right triangle."
        }
      },
      "required": [
        "a",
        "b"
      ]
    }
  },
  {
    "name": "ml.predict_house_price",
    "description": "Predict house price using Machine Learning model given the house size and location",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location of the house"
        },
        "size": {
          "type": "integer",
          "description": "Size of the house in square feet"
        }
      },
      "required": [
        "location",
        "size"
      ]
    }
  },
  {
    "name": "model.DecisionTreeClassifier",
    "description": "Build a Decision Tree Classifier model with provided criteria",
    "parameters": {
      "type": "dict",
      "properties": {
        "criterion": {
          "type": "string",
          "description": "The function to measure the quality of a split, either 'gini' for the Gini impurity or 'entropy' for the information gain."
        },
        "max_depth": {
          "type": "integer",
          "description": "The maximum depth of the tree, specifying how deep the tree can be."
        },
        "random_state": {
          "type": "integer",
          "description": "Controls the randomness of the estimator"
        }
      },
      "required": [
        "criterion",
        "max_depth",
        "random_state"
      ]
    }
  },
  {
    "name": "confidence_interval.calculate",
    "description": "Calculate the confidence interval for a mean.",
    "parameters": {
      "type": "dict",
      "properties": {
        "sample_std_dev": {
          "type": "integer",
          "description": "The standard deviation of the sample."
        },
        "sample_size": {
          "type": "integer",
          "description": "The size of the sample."
        },
        "sample_mean": {
          "type": "integer",
          "description": "The mean of the sample."
        },
        "confidence_level": {
          "type": "float",
          "description": "The level of confidence. Default is 0.9."
        }
      },
      "required": [
        "sample_std_dev",
        "sample_size",
        "sample_mean"
      ]
    }
  },
  {
    "name": "calculate_present_value",
    "description": "Calculate the present value of a future cash flows stream.",
    "parameters": {
      "type": "dict",
      "properties": {
        "payment_per_year": {
          "type": "integer",
          "description": "The payment received per year."
        },
        "interest_rate": {
          "type": "float",
          "description": "The interest rate applied per period."
        },
        "years": {
          "type": "integer",
          "description": "The total number of years."
        }
      },
      "required": [
        "payment_per_year",
        "interest_rate",
        "years"
      ]
    }
  },
  {
    "name": "calculate_capital_gains_tax",
    "description": "Calculate the capital gains tax for a given gains type and amount",
    "parameters": {
      "type": "dict",
      "properties": {
        "short_term_gain": {
          "type": "integer",
          "description": "The short term capital gain amount."
        },
        "long_term_gain": {
          "type": "integer",
          "description": "The long term capital gain amount."
        },
        "state": {
          "type": "string",
          "description": "The state where the income is generated.",
          "default": "federal"
        }
      },
      "required": [
        "short_term_gain",
        "long_term_gain"
      ]
    }
  },
  {
    "name": "calculate_return_on_investment",
    "description": "Calculate the return on investment given an initial investment and a gain or loss.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_investment": {
          "type": "integer",
          "description": "The initial amount of money invested."
        },
        "gain_loss": {
          "type": "integer",
          "description": "The amount gained or lost. If lose, provide as negative value."
        }
      },
      "required": [
        "initial_investment",
        "gain_loss"
      ]
    }
  },
  {
    "name": "get_stock_data",
    "description": "Retrieve the most recent trading day's closing price and volume for a specified stock.",
    "parameters": {
      "type": "dict",
      "properties": {
        "symbol": {
          "type": "string",
          "description": "The stock symbol of the company."
        },
        "data_points": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "price",
              "volume"
            ]
          },
          "description": "The type of data you want to retrieve for the stock. This can include closing price, opening price, volume, etc."
        }
      },
      "required": [
        "symbol",
        "data_points"
      ]
    }
  },
  {
    "name": "financials.calculate_future_value",
    "description": "Calculate the future value of an investment based on a constant interest rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "present_value": {
          "type": "integer",
          "description": "The present value or initial amount of the investment."
        },
        "annual_interest_rate": {
          "type": "float",
          "description": "The annual interest rate as a decimal."
        },
        "number_of_years": {
          "type": "integer",
          "description": "The number of years the money is invested for."
        }
      },
      "required": [
        "present_value",
        "annual_interest_rate",
        "number_of_years"
      ]
    }
  },
  {
    "name": "calculate_mortgage_payment",
    "description": "Calculate the monthly mortgage payment for a given loan amount, interest rate, and loan term.",
    "parameters": {
      "type": "dict",
      "properties": {
        "loan_amount": {
          "type": "integer",
          "description": "The loan amount."
        },
        "interest_rate": {
          "type": "float",
          "description": "The annual interest rate."
        },
        "loan_term": {
          "type": "integer",
          "description": "The loan term in years."
        }
      },
      "required": [
        "loan_amount",
        "interest_rate",
        "loan_term"
      ]
    }
  },
  {
    "name": "loan_eligibility_check",
    "description": "Check for eligibility for a loan given income and loan amount",
    "parameters": {
      "type": "dict",
      "properties": {
        "financial_institution": {
          "type": "string",
          "description": "The name of the financial institution e.g. HSBC"
        },
        "loan_amount": {
          "type": "integer",
          "description": "The loan amount that is requested"
        },
        "annual_income": {
          "type": "integer",
          "description": "Annual income of the applicant"
        }
      },
      "required": [
        "financial_institution",
        "loan_amount",
        "annual_income"
      ]
    }
  },
  {
    "name": "law_crimes.search",
    "description": "Locate individuals based on their crime conviction and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "crime": {
          "type": "string",
          "description": "Type of crime to search."
        },
        "location": {
          "type": "string",
          "description": "City or state where the crime was committed."
        },
        "year": {
          "type": "integer",
          "description": "The year when the crime was committed."
        }
      },
      "required": [
        "crime",
        "location",
        "year"
      ]
    }
  },
  {
    "name": "court_info.get_case_status",
    "description": "Retrieves the status and trial dates for court cases from specified county courts.",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_number": {
          "type": "string",
          "description": "The specific court case number."
        },
        "court": {
          "type": "string",
          "description": "The county court where the case is filed."
        },
        "details": {
          "type": "string",
          "enum": [
            "status",
            "trial_date"
          ],
          "description": "Specific details required about the court case. Defaults to 'status'."
        }
      },
      "required": [
        "case_number",
        "court"
      ]
    }
  },
  {
    "name": "alimony_calculator.ca.calculate",
    "description": "Calculate the amount of alimony one spouse would have to pay to the other spouse in the state of California.",
    "parameters": {
      "type": "dict",
      "properties": {
        "payor_income": {
          "type": "integer",
          "description": "The monthly gross income of the payor spouse."
        },
        "recipient_income": {
          "type": "integer",
          "description": "The monthly gross income of the recipient spouse."
        },
        "duration": {
          "type": "integer",
          "description": "The duration of the alimony in years."
        }
      },
      "required": [
        "payor_income",
        "recipient_income",
        "duration"
      ]
    }
  },
  {
    "name": "law_case.get_details",
    "description": "Fetches detailed information on a specific case including its history and the litigants involved.",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_number": {
          "type": "string",
          "description": "The unique number identifying the case."
        },
        "include_history": {
          "type": "boolean",
          "description": "Flag indicating if case history should be included. Default is false."
        },
        "include_litigants": {
          "type": "boolean",
          "description": "Flag indicating if litigant details should be included. Default is false."
        }
      },
      "required": [
        "case_number"
      ]
    }
  },
  {
    "name": "lawsuit.lookup",
    "description": "Look up lawsuit cases against a company by year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company."
        },
        "year": {
          "type": "integer",
          "description": "The year in which the lawsuit was filed."
        }
      },
      "required": [
        "company_name",
        "year"
      ]
    }
  },
  {
    "name": "court_case.find",
    "description": "Locate details of court cases based on specific parameters like case number and case type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and court where the lawsuit is filed."
        },
        "case_number": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The unique case numbers of the lawsuits."
        },
        "case_type": {
          "type": "string",
          "enum": [
            "Civil",
            "Criminal"
          ],
          "description": "Type of the court case.",
          "default": "Civil"
        }
      },
      "required": [
        "location",
        "case_number"
      ]
    }
  },
  {
    "name": "nature_reserve.find_nearby",
    "description": "Locate nearby nature reserves based on specific criteria such as amenities and proximity.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where you want to locate a nature reserve."
        },
        "amenities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Picnic Tables",
              "Public Restrooms",
              "Playgrounds",
              "Biking Trails",
              "Hiking Trails",
              "Camping Grounds"
            ]
          },
          "description": "Preferred amenities in the nature reserve."
        },
        "proximity": {
          "type": "integer",
          "description": "The radius within which to look for nature reserves in kilometers."
        }
      },
      "required": [
        "location",
        "proximity",
        "amenities"
      ]
    }
  },
  {
    "name": "get_current_and_future_temperature",
    "description": "Provides the current temperature and forecasts the temperature for the next few hours at a particular location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the temperature for."
        },
        "hours": {
          "type": "integer",
          "description": "Number of hours for the temperature forecast."
        }
      },
      "required": [
        "location",
        "hours"
      ]
    }
  },
  {
    "name": "waste_calculation.calculate",
    "description": "Calculates the estimated waste generated by different population sizes in a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "population": {
          "type": "dict",
          "description": "The description of population. 'adults' is the number of adults in the household. 'children' is the number of children. 'singles' is the number of single adults living alone.",
          "required": [
            "adults",
            "children",
            "singles"
          ]
        },
        "location": {
          "type": "string",
          "description": "The city where the population resides."
        }
      },
      "required": [
        "population",
        "location"
      ]
    }
  },
  {
    "name": "book_flight",
    "description": "Book a flight from a departure city to a destination city on a specific date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "departure_city": {
          "type": "string",
          "description": "The city from which the flight will depart."
        },
        "destination_city": {
          "type": "string",
          "description": "The city to which the flight is going."
        },
        "date": {
          "type": "string",
          "description": "The date of the flight."
        }
      },
      "required": [
        "departure_city",
        "destination_city",
        "date"
      ]
    }
  },
  {
    "name": "history_fact.fetch",
    "description": "Retrieve facts about historical events or documents",
    "parameters": {
      "type": "dict",
      "properties": {
        "event": {
          "type": "string",
          "description": "The historical event or document you want to know about."
        },
        "depth": {
          "type": "string",
          "description": "The depth of information required. Choices are 'brief' or 'detailed'.",
          "default": "detailed"
        },
        "year": {
          "type": "integer",
          "description": "The year of the event/document. default is 0"
        }
      },
      "required": [
        "event"
      ]
    }
  },
  {
    "name": "us_history.events_by_presidency",
    "description": "Retrieve the major events during the presidency of a specified US president.",
    "parameters": {
      "type": "dict",
      "properties": {
        "president_name": {
          "type": "string",
          "description": "The name of the US president."
        },
        "start_year": {
          "type": "integer",
          "description": "The start year of their presidency (optional).",
          "default": 0
        },
        "end_year": {
          "type": "integer",
          "description": "The end year of their presidency (optional).",
          "default": 2000
        }
      },
      "required": [
        "president_name"
      ]
    }
  },
  {
    "name": "get_president_and_vp",
    "description": "Get the President and Vice President of United States for a specified year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "year": {
          "type": "integer",
          "description": "The year for which president or vice president information is needed."
        },
        "position": {
          "type": "string",
          "description": "The position: either 'president' or 'vice president'."
        }
      },
      "required": [
        "year",
        "position"
      ]
    }
  },
  {
    "name": "religion_history.track",
    "description": "Track the historical development of a specific religion in a specific area within a specific time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "region": {
          "type": "string",
          "description": "The geographical area where the religion's history is to be tracked."
        },
        "religion": {
          "type": "string",
          "description": "The name of the religion."
        },
        "start_year": {
          "type": "integer",
          "description": "The beginning year of the time frame."
        },
        "end_year": {
          "type": "integer",
          "description": "The ending year of the time frame."
        }
      },
      "required": [
        "region",
        "religion",
        "start_year",
        "end_year"
      ]
    }
  },
  {
    "name": "ancient_empires.get_religion_info",
    "description": "Retrieve information about religious history and influences of an ancient empire.",
    "parameters": {
      "type": "dict",
      "properties": {
        "empire_name": {
          "type": "string",
          "description": "The name of the ancient empire."
        },
        "include_influences": {
          "type": "boolean",
          "default": false,
          "description": "Specify whether to include details about the religious influences of the empire."
        }
      },
      "required": [
        "empire_name"
      ]
    }
  },
  {
    "name": "paint_color_mixture",
    "description": "Gives a combination of primary colors to mix for creating a certain color. This function requires type of paint and color.",
    "parameters": {
      "type": "dict",
      "properties": {
        "paint_type": {
          "type": "string",
          "description": "The type of paint (Watercolor, Oil, Acrylic)."
        },
        "color": {
          "type": "string",
          "description": "The color to be produced from the mixture."
        }
      },
      "required": [
        "paint_type",
        "color"
      ]
    }
  },
  {
    "name": "color_converter.get_color_info",
    "description": "Retrieve RGB values and hexadecimal codes of a specific color.",
    "parameters": {
      "type": "dict",
      "properties": {
        "color_name": {
          "type": "string",
          "description": "The name of the color."
        },
        "conversion_type": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "RGB",
              "HEX"
            ]
          },
          "description": "The conversion type for the color."
        }
      },
      "required": [
        "color_name",
        "conversion_type"
      ]
    }
  },
  {
    "name": "calc_distance",
    "description": "Calculate the driving distance between two locations.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_loc": {
          "type": "string",
          "description": "Starting location."
        },
        "end_loc": {
          "type": "string",
          "description": "Ending location."
        },
        "shortest_route": {
          "type": "boolean",
          "default": "false",
          "description": "If true, returns the shortest driving route."
        }
      },
      "required": [
        "start_loc",
        "end_loc"
      ]
    }
  },
  {
    "name": "museum_info.get_info",
    "description": "Retrieve specific details about museums, such as opening hours and ticket prices.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "City where the museum is located."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Opening hours",
              "Adult tickets",
              "Child tickets"
            ]
          },
          "description": "List of details to retrieve about the museum."
        }
      },
      "required": [
        "location",
        "details"
      ]
    }
  },
  {
    "name": "museum.exhibition_detail",
    "description": "Provides details of a particular exhibition in a museum, including the cost per visit for different age groups.",
    "parameters": {
      "type": "dict",
      "properties": {
        "exhibition_name": {
          "type": "string",
          "description": "The name of the exhibition."
        },
        "museum_name": {
          "type": "string",
          "description": "The name of the museum."
        },
        "visitor_type": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "child",
              "adult"
            ]
          },
          "description": "Age group of the visitor. Default is: ['adult']"
        }
      },
      "required": [
        "exhibition_name",
        "museum_name"
      ]
    }
  },
  {
    "name": "find_music_instrument_store",
    "description": "Locate nearby music instrument stores that sell specific brands or instruments",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state e.g. San Francisco, CA."
        },
        "instruments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of specific instruments or brands you are looking for."
        }
      },
      "required": [
        "location",
        "instruments"
      ]
    }
  },
  {
    "name": "check_instrument_availability",
    "description": "Get the price and availability of a specified instrument in a music store located in a specified city",
    "parameters": {
      "type": "dict",
      "properties": {
        "instrument": {
          "type": "string",
          "description": "The name of the musical instrument."
        },
        "city": {
          "type": "string",
          "description": "City where the store is located."
        }
      },
      "required": [
        "instrument",
        "city"
      ]
    }
  },
  {
    "name": "concert_finder",
    "description": "Locate upcoming concerts based on music genre in specified city and state.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state to find concerts."
        },
        "music_genre": {
          "type": "string",
          "description": "Music genre of the concerts."
        },
        "time_period": {
          "type": "integer",
          "description": "Number of days to search upcoming concerts.",
          "default": 30
        }
      },
      "required": [
        "location",
        "music_genre"
      ]
    }
  },
  {
    "name": "concert.find_nearby",
    "description": "Locate nearby concerts based on specific criteria like genre and availability of parking.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where the user wants to find a concert."
        },
        "date": {
          "type": "string",
          "description": "The date on which the user wants to attend a concert."
        },
        "genre": {
          "type": "string",
          "description": "The genre of music of the concert."
        },
        "amenities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Parking",
              "Food and Beverages",
              "VIP Seating",
              "Disability Access"
            ]
          },
          "description": "Amenities preferred at the concert.",
          "default": [
            "Parking"
          ]
        }
      },
      "required": [
        "location",
        "date",
        "genre"
      ]
    }
  },
  {
    "name": "musicCharts.getMostPlayed",
    "description": "This function retrieves the current most played song in a particular genre from a specified region",
    "parameters": {
      "type": "dict",
      "properties": {
        "genre": {
          "type": "string",
          "description": "Music genre e.g., Rock, Pop, HipHop etc."
        },
        "region": {
          "type": "string",
          "description": "Region where the song popularity is to be checked"
        },
        "duration": {
          "type": "integer",
          "description": "Time duration in hours for which the music played count will be considered. default is 0"
        }
      },
      "required": [
        "genre",
        "region"
      ]
    }
  },
  {
    "name": "calculate_winning_percentage",
    "description": "Calculate the winning percentage for a particular basketball team in a given season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The name of the basketball team."
        },
        "season": {
          "type": "integer",
          "description": "The season (year) you want to find winning percentage for."
        }
      },
      "required": [
        "team",
        "season"
      ]
    }
  },
  {
    "name": "get_team_ranking",
    "description": "Retrieve the current ranking of a football team in a specific league.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The name of the football team."
        },
        "league": {
          "type": "string",
          "description": "The league the team is competing in. E.g. UEFA Champions League, La Liga."
        }
      },
      "required": [
        "team",
        "league"
      ]
    }
  },
  {
    "name": "PokemonGO.get_moves",
    "description": "Retrieve the set of moves a Pokemon can learn. The optional parameter checks if the Pokemon can learn a specified move.",
    "parameters": {
      "type": "dict",
      "properties": {
        "pokemon": {
          "type": "string",
          "description": "The name of the Pokemon."
        },
        "move": {
          "type": "string",
          "description": "An optional parameter that checks if the Pokemon can learn this specific move. default is 'Run'"
        }
      },
      "required": [
        "pokemon"
      ]
    }
  },
  {
    "name": "player_status.check",
    "description": "Check a player's status in a team for a particular season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The team where the player plays."
        },
        "player_id": {
          "type": "integer",
          "description": "The id of the player."
        },
        "season": {
          "type": "integer",
          "description": "The season for which player's status need to be checked. Optional. Default is season 2023."
        }
      },
      "required": [
        "team",
        "player_id"
      ]
    }
  },
  {
    "name": "game.save_progress",
    "description": "Save the current state of a player's game, given the stage, level and game mode.",
    "parameters": {
      "type": "dict",
      "properties": {
        "stage": {
          "type": "integer",
          "description": "The current stage in the game the player has reached."
        },
        "mode": {
          "type": "string",
          "enum": [
            "easy",
            "hard"
          ],
          "description": "The game mode. Available modes are easy or hard."
        },
        "level": {
          "type": "string",
          "default": "user",
          "description": "The player's level."
        }
      },
      "required": [
        "stage",
        "mode"
      ]
    }
  },
  {
    "name": "recipe_search.find",
    "description": "Locate recipes based on the type of dish.",
    "parameters": {
      "type": "dict",
      "properties": {
        "dish": {
          "type": "string",
          "description": "The name of the dish to search for."
        },
        "diet": {
          "type": "string",
          "enum": [
            "Vegan",
            "Vegetarian",
            "Paleo",
            "Keto"
          ],
          "description": "Dietary preference.",
          "default": "Keto"
        }
      },
      "required": [
        "dish"
      ]
    }
  },
  {
    "name": "restaurant_finder",
    "description": "Search for restaurants based on location, cuisine type and other preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "City and state, e.g. New York, NY."
        },
        "cuisine": {
          "type": "string",
          "description": "Type of cuisine the user is interested in, e.g. Italian, Japanese etc."
        },
        "preferences": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Vegetarian",
              "Delivery",
              "Vegan",
              "Takeout"
            ]
          },
          "description": "Extra features in the restaurant. default is ['Delivery']."
        }
      },
      "required": [
        "location",
        "cuisine"
      ]
    }
  },
  {
    "name": "get_cooking_recipe",
    "description": "Retrieve the cooking recipe for a specified food item.",
    "parameters": {
      "type": "dict",
      "properties": {
        "dish_name": {
          "type": "string",
          "description": "Name of the food dish for which recipe is required."
        },
        "serving_size": {
          "type": "integer",
          "description": "Number of people for which the dish will be prepared."
        }
      },
      "required": [
        "dish_name",
        "serving_size"
      ]
    }
  },
  {
    "name": "whole_foods.order",
    "description": "Order food from Whole Foods",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location of Whole Foods."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of items to order."
        },
        "size": {
          "type": "string",
          "description": "Size of the order.",
          "enum": [
            "small",
            "medium",
            "large"
          ]
        }
      },
      "required": [
        "location",
        "items",
        "size"
      ]
    }
  },
  {
    "name": "grocery_store.find_by_criteria",
    "description": "Find grocery stores based on specific criteria such as location, hours of operation, or availability of services.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where you want to find a grocery store."
        },
        "criteria": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "24 hours",
              "Home Delivery",
              "In-store Pickup"
            ]
          },
          "description": "Specific features or services you're looking for in a grocery store."
        }
      },
      "required": [
        "location",
        "criteria"
      ]
    }
  },
  {
    "name": "hotel_booking.check_availability",
    "description": "Check room availability for a particular hotel for given dates.",
    "parameters": {
      "type": "dict",
      "properties": {
        "hotel_name": {
          "type": "string",
          "description": "The name of the hotel."
        },
        "location": {
          "type": "string",
          "description": "The location of the hotel."
        },
        "check_in_date": {
          "type": "string",
          "description": "The check-in date in YYYY-MM-DD format."
        },
        "check_out_date": {
          "type": "string",
          "description": "The check-out date in YYYY-MM-DD format."
        }
      },
      "required": [
        "hotel_name",
        "location",
        "check_in_date",
        "check_out_date"
      ]
    }
  },
  {
    "name": "hotel_booking.book",
    "description": "Book a hotel room at the specified location for the specified number of adults and children.",
    "parameters": {
      "type": "dict",
      "properties": {
        "hotel_name": {
          "type": "string",
          "description": "The name of the hotel."
        },
        "location": {
          "type": "string",
          "description": "The city where the hotel is located."
        },
        "check_in": {
          "type": "string",
          "description": "The check-in date in the format yyyy-mm-dd."
        },
        "check_out": {
          "type": "string",
          "description": "The check-out date in the format yyyy-mm-dd."
        },
        "adults": {
          "type": "integer",
          "description": "The number of adults for the booking."
        },
        "children": {
          "type": "integer",
          "description": "The number of children for the booking."
        }
      },
      "required": [
        "hotel_name",
        "location",
        "check_in",
        "check_out",
        "adults",
        "children"
      ]
    }
  },
  {
    "name": "get_exchange_rate",
    "description": "Fetch the current exchange rate for the provided currency pairs.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base_currency": {
          "type": "string",
          "description": "The base currency in the pair."
        },
        "target_currency": {
          "type": "string",
          "description": "The currency to which the base currency needs to be converted."
        }
      },
      "required": [
        "base_currency",
        "target_currency"
      ]
    }
  },
  {
    "name": "get_conversion_cost",
    "description": "Convert a value from one currency to another including conversion charges.",
    "parameters": {
      "type": "dict",
      "properties": {
        "amount": {
          "type": "integer",
          "description": "The amount of money to be converted."
        },
        "from_currency": {
          "type": "string",
          "description": "The current currency of the amount."
        },
        "to_currency": {
          "type": "string",
          "description": "The target currency."
        }
      },
      "required": [
        "amount",
        "from_currency",
        "to_currency"
      ]
    }
  },
  {
    "name": "math.hypot",
    "description": "Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.",
    "parameters": {
      "type": "dict",
      "properties": {
        "x": {
          "type": "integer",
          "description": "The x-coordinate value."
        },
        "y": {
          "type": "integer",
          "description": "The y-coordinate value."
        },
        "z": {
          "type": "integer",
          "description": "Optional. The z-coordinate value. Default is 0."
        }
      },
      "required": [
        "x",
        "y"
      ]
    }
  },
  {
    "name": "algebra.quadratic_roots",
    "description": "Find the roots of a quadratic equation ax^2 + bx + c = 0.",
    "parameters": {
      "type": "dict",
      "properties": {
        "a": {
          "type": "integer",
          "description": "Coefficient of x^2."
        },
        "b": {
          "type": "integer",
          "description": "Coefficient of x."
        },
        "c": {
          "type": "integer",
          "description": "Constant term."
        }
      },
      "required": [
        "a",
        "b",
        "c"
      ]
    }
  },
  {
    "name": "solve_quadratic",
    "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.",
    "parameters": {
      "type": "dict",
      "properties": {
        "a": {
          "type": "integer",
          "description": "The coefficient of the squared term in the quadratic equation."
        },
        "b": {
          "type": "integer",
          "description": "The coefficient of the linear term in the quadratic equation."
        },
        "c": {
          "type": "integer",
          "description": "The constant term in the quadratic equation."
        },
        "root_type": {
          "type": "string",
          "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. This parameter is optional. default is 'all'"
        }
      },
      "required": [
        "a",
        "b",
        "c"
      ]
    }
  },
  {
    "name": "calculate_circumference",
    "description": "Calculates the circumference of a circle with a given radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "The radius of the circle in the unit given."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement for the radius. Default is m."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "geometry.calculate_area_circle",
    "description": "Calculate the area of a circle given its radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "The radius of the circle."
        },
        "unit": {
          "type": "string",
          "description": "The measurement unit of the radius (optional parameter, default is 'cm')."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "calculate_area",
    "description": "Calculate the area of a right-angled triangle given the lengths of its base and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "integer",
          "description": "The length of the base of the right-angled triangle."
        },
        "height": {
          "type": "integer",
          "description": "The height of the right-angled triangle."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measure used. Defaults to cm.",
          "default": "cm"
        }
      },
      "required": [
        "base",
        "height"
      ]
    }
  },
  {
    "name": "calculate_triangle_area",
    "description": "Calculate the area of a triangle using its base and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "integer",
          "description": "The length of the base of the triangle."
        },
        "height": {
          "type": "integer",
          "description": "The height of the triangle from the base."
        }
      },
      "required": [
        "base",
        "height"
      ]
    }
  },
  {
    "name": "calculate_derivative",
    "description": "Calculate the derivative of a polynomial function.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "The polynomial function."
        },
        "x_value": {
          "type": "integer",
          "description": "The x-value at which the derivative is calculated. Optional, if not given, the function will return a function of the derivative instead of a specific value. default is 0."
        }
      },
      "required": [
        "function"
      ]
    }
  },
  {
    "name": "integrate",
    "description": "Calculate the area under a curve for a specified function between two x values.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "The function to integrate, represented as a string. For example, 'x^3'"
        },
        "start_x": {
          "type": "integer",
          "description": "The starting x-value to integrate over."
        },
        "end_x": {
          "type": "integer",
          "description": "The ending x-value to integrate over."
        },
        "method": {
          "type": "string",
          "description": "The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'."
        }
      },
      "required": [
        "function",
        "start_x",
        "end_x"
      ]
    }
  },
  {
    "name": "calculus.derivative",
    "description": "Compute the derivative of a function at a specific value.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "The function to calculate the derivative of."
        },
        "value": {
          "type": "integer",
          "description": "The value where the derivative needs to be calculated at."
        },
        "function_variable": {
          "type": "string",
          "description": "The variable present in the function, for instance x or y, etc.",
          "default": "x"
        }
      },
      "required": [
        "function",
        "value"
      ]
    }
  },
  {
    "name": "get_prime_factors",
    "description": "Function to retrieve prime factors of a number.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "integer",
          "description": "Number for which prime factors need to be calculated"
        },
        "formatted": {
          "type": "boolean",
          "description": "Return formatted string if true, array if false"
        }
      },
      "required": [
        "number",
        "formatted"
      ]
    }
  },
  {
    "name": "number_analysis.prime_factors",
    "description": "Compute the prime factors of a number.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "integer",
          "description": "The number to be factored."
        }
      },
      "required": [
        "number"
      ]
    }
  },
  {
    "name": "math.gcd",
    "description": "Compute the greatest common divisor of two numbers",
    "parameters": {
      "type": "dict",
      "properties": {
        "num1": {
          "type": "integer",
          "description": "The first number."
        },
        "num2": {
          "type": "integer",
          "description": "The second number."
        }
      },
      "required": [
        "num1",
        "num2"
      ]
    }
  },
  {
    "name": "number_theory.gcd",
    "description": "Compute the greatest common divisor of two given integers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number1": {
          "type": "integer",
          "description": "The first integer."
        },
        "number2": {
          "type": "integer",
          "description": "The second integer."
        }
      },
      "required": [
        "number1",
        "number2"
      ]
    }
  },
  {
    "name": "prime_factorize",
    "description": "Calculate the prime factorization of a given integer.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "integer",
          "description": "The number for which to calculate the prime factorization."
        },
        "return_type": {
          "type": "string",
          "description": "Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'."
        }
      },
      "required": [
        "number"
      ]
    }
  },
  {
    "name": "calculate_final_velocity",
    "description": "Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "height": {
          "type": "integer",
          "description": "The height the object is dropped from, in meters."
        },
        "initial_velocity": {
          "type": "integer",
          "description": "The initial velocity of the object in m/s. Default is zero."
        },
        "gravity": {
          "type": "float",
          "description": "Acceleration due to gravity. Default value is approximately 9.81 m/s^2, earth's gravity."
        }
      },
      "required": [
        "height"
      ]
    }
  },
  {
    "name": "calculate_velocity",
    "description": "Calculate the velocity for a certain distance travelled within a specific duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "distance": {
          "type": "integer",
          "description": "The distance travelled by the object, typically in kilometers."
        },
        "duration": {
          "type": "integer",
          "description": "The duration of the journey, typically in hours."
        },
        "unit": {
          "type": "string",
          "description": "Optional parameter. The unit to return the velocity in. If not provided, the default is km/h."
        }
      },
      "required": [
        "distance",
        "duration"
      ]
    }
  },
  {
    "name": "final_velocity",
    "description": "Calculate the final velocity of an object given its initial velocity, acceleration, and time.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "integer",
          "description": "The initial velocity of the object in meters/second."
        },
        "acceleration": {
          "type": "integer",
          "description": "The acceleration of the object in meters/second^2."
        },
        "time": {
          "type": "integer",
          "description": "The time over which the acceleration is applied in seconds."
        }
      },
      "required": [
        "initial_velocity",
        "acceleration",
        "time"
      ]
    }
  },
  {
    "name": "calculate_final_speed",
    "description": "Calculate the final speed of an object in free fall after a certain time, neglecting air resistance. The acceleration due to gravity is considered as -9.81 m/s^2",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_speed": {
          "type": "integer",
          "description": "The initial speed of the object in m/s. Default is 0 for an object at rest."
        },
        "time": {
          "type": "integer",
          "description": "The time in seconds for which the object is in free fall."
        },
        "gravity": {
          "type": "float",
          "description": "The acceleration due to gravity. Default is -9.81 m/s^2."
        }
      },
      "required": [
        "time"
      ]
    }
  },
  {
    "name": "kinematics.final_velocity_from_distance",
    "description": "Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.",
    "parameters": {
      "type": "dict",
      "properties": {
        "acceleration": {
          "type": "integer",
          "description": "Acceleration of the object, m/s^2."
        },
        "distance": {
          "type": "integer",
          "description": "Distance traveled by the object, m."
        },
        "initial_velocity": {
          "type": "integer",
          "description": "Initial velocity of the object. Default is 0, m/s"
        }
      },
      "required": [
        "acceleration",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_final_velocity",
    "description": "Calculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "integer",
          "description": "The initial velocity of the object."
        },
        "acceleration": {
          "type": "integer",
          "description": "The acceleration of the object."
        },
        "time": {
          "type": "integer",
          "description": "The time of acceleration."
        }
      },
      "required": [
        "initial_velocity",
        "acceleration",
        "time"
      ]
    }
  },
  {
    "name": "travel_itinerary_generator",
    "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "destination": {
          "type": "string",
          "description": "Destination city of the trip."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for the trip."
        },
        "daily_budget": {
          "type": "integer",
          "description": "The maximum daily budget for the trip."
        },
        "exploration_type": {
          "type": "string",
          "enum": [
            "nature",
            "urban",
            "history",
            "culture"
          ],
          "description": "The preferred exploration type.",
          "default": "urban"
        }
      },
      "required": [
        "destination",
        "days",
        "daily_budget"
      ]
    }
  },
  {
    "name": "vegan_restaurant.find_nearby",
    "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. New York, NY"
        },
        "operating_hours": {
          "type": "integer",
          "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format.",
          "default": 21
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "route.estimate_time",
    "description": "Estimate the travel time for a specific route with optional stops.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The starting point for the journey."
        },
        "end_location": {
          "type": "string",
          "description": "The destination for the journey."
        },
        "stops": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Additional cities or points of interest to stop at during the journey ordered.",
          "default": [
            "NYC"
          ]
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "calculate_electric_field",
    "description": "Calculate the electric field produced by a charge at a certain distance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge": {
          "type": "integer",
          "description": "Charge in coulombs producing the electric field."
        },
        "distance": {
          "type": "integer",
          "description": "Distance from the charge in meters where the field is being measured."
        },
        "permitivity": {
          "type": "integer",
          "description": "Permitivity of the space where field is being calculated, default is for vacuum."
        }
      },
      "required": [
        "charge",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_magnetic_field",
    "description": "Calculate the magnetic field produced at the center of a circular loop carrying current.",
    "parameters": {
      "type": "dict",
      "properties": {
        "current": {
          "type": "integer",
          "description": "The current through the circular loop in Amperes."
        },
        "radius": {
          "type": "float",
          "description": "The radius of the circular loop in meters."
        },
        "permeability": {
          "type": "integer",
          "description": "The magnetic permeability. Default is permeability in free space."
        }
      },
      "required": [
        "current",
        "radius"
      ]
    }
  },
  {
    "name": "electromagnetic_force",
    "description": "Calculate the electromagnetic force between two charges placed at a certain distance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge1": {
          "type": "integer",
          "description": "The magnitude of the first charge in coulombs."
        },
        "charge2": {
          "type": "integer",
          "description": "The magnitude of the second charge in coulombs."
        },
        "distance": {
          "type": "integer",
          "description": "The distance between the two charges in meters."
        },
        "medium_permittivity": {
          "type": "float",
          "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity)."
        }
      },
      "required": [
        "charge1",
        "charge2",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_resonant_frequency",
    "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.",
    "parameters": {
      "type": "dict",
      "properties": {
        "inductance": {
          "type": "float",
          "description": "The inductance (L) in henries (H)."
        },
        "capacitance": {
          "type": "float",
          "description": "The capacitance (C) in farads (F)."
        },
        "round_off": {
          "type": "integer",
          "description": "Rounding off the result to a certain decimal places, default is 2."
        }
      },
      "required": [
        "inductance",
        "capacitance"
      ]
    }
  },
  {
    "name": "calculate_electric_field_strength",
    "description": "Calculate the electric field strength at a certain distance from a point charge.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge": {
          "type": "integer",
          "description": "The charge in Coulombs."
        },
        "distance": {
          "type": "float",
          "description": "The distance from the charge in meters."
        },
        "medium": {
          "type": "string",
          "description": "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."
        }
      },
      "required": [
        "charge",
        "distance"
      ]
    }
  },
  {
    "name": "thermo.calculate_energy",
    "description": "Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.",
    "parameters": {
      "type": "dict",
      "properties": {
        "mass": {
          "type": "integer",
          "description": "Mass of the substance in grams."
        },
        "phase_transition": {
          "type": "string",
          "description": "Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'."
        },
        "substance": {
          "type": "string",
          "description": "The substance which is undergoing phase change, default is 'water'"
        }
      },
      "required": [
        "mass",
        "phase_transition"
      ]
    }
  },
  {
    "name": "get_boiling_melting_points",
    "description": "Retrieve the boiling point and melting point of a substance based on its name and the sea level.",
    "parameters": {
      "type": "dict",
      "properties": {
        "substance": {
          "type": "string",
          "description": "The name of the substance."
        },
        "sea_level": {
          "type": "integer",
          "description": "The sea level in meters."
        }
      },
      "required": [
        "substance",
        "sea_level"
      ]
    }
  },
  {
    "name": "entropy_change.calculate",
    "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.",
    "parameters": {
      "type": "dict",
      "properties": {
        "substance": {
          "type": "string",
          "description": "The substance for which the change in entropy is calculated."
        },
        "mass": {
          "type": "integer",
          "description": "The mass of the substance in kg."
        },
        "initial_temperature": {
          "type": "integer",
          "description": "The initial temperature of the substance in degree Celsius."
        },
        "final_temperature": {
          "type": "integer",
          "description": "The final temperature of the substance in degree Celsius."
        },
        "pressure": {
          "type": "integer",
          "default": 1,
          "description": "The pressure the substance is under in atmospheres."
        }
      },
      "required": [
        "substance",
        "mass",
        "initial_temperature",
        "final_temperature"
      ]
    }
  },
  {
    "name": "calculate_entropy_change",
    "description": "Calculate the entropy change for an isothermal and reversible process.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_temp": {
          "type": "integer",
          "description": "The initial temperature in Kelvin."
        },
        "final_temp": {
          "type": "integer",
          "description": "The final temperature in Kelvin."
        },
        "heat_capacity": {
          "type": "float",
          "description": "The heat capacity in J/K."
        },
        "isothermal": {
          "type": "boolean",
          "description": "Whether the process is isothermal. Default is True."
        }
      },
      "required": [
        "initial_temp",
        "final_temp",
        "heat_capacity"
      ]
    }
  },
  {
    "name": "calc_heat_capacity",
    "description": "Calculate the heat capacity at constant pressure of air using its temperature and volume.",
    "parameters": {
      "type": "dict",
      "properties": {
        "temp": {
          "type": "integer",
          "description": "The temperature of the gas in Kelvin."
        },
        "volume": {
          "type": "float",
          "description": "The volume of the gas in m^3."
        },
        "gas": {
          "type": "string",
          "description": "Type of gas, with air as default."
        }
      },
      "required": [
        "temp",
        "volume"
      ]
    }
  },
  {
    "name": "biology.get_cell_info",
    "description": "Retrieve information about the structure and functioning of a specified type of cell",
    "parameters": {
      "type": "dict",
      "properties": {
        "cell_type": {
          "type": "string",
          "description": "Type of cell you want information about"
        },
        "detailed": {
          "type": "boolean",
          "description": "Indicate if you want a detailed description of the cell",
          "default": "false"
        }
      },
      "required": [
        "cell_type"
      ]
    }
  },
  {
    "name": "calculate_molecular_weight",
    "description": "Calculate the molecular weight of a compound given the compound formula.",
    "parameters": {
      "type": "dict",
      "properties": {
        "compound": {
          "type": "string",
          "description": "The molecular formula of the compound."
        },
        "to_unit": {
          "type": "string",
          "description": "The unit in which to return the result. Default is 'grams/mole'"
        }
      },
      "required": [
        "compound",
        "to_unit"
      ]
    }
  },
  {
    "name": "diabetes_prediction",
    "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "weight": {
          "type": "integer",
          "description": "Weight of the person in lbs."
        },
        "height": {
          "type": "integer",
          "description": "Height of the person in inches."
        },
        "activity_level": {
          "type": "string",
          "enum": [
            "sedentary",
            "lightly active",
            "moderately active",
            "very active",
            "extra active"
          ],
          "description": "Physical activity level of the person."
        }
      },
      "required": [
        "weight",
        "height",
        "activity_level"
      ]
    }
  },
  {
    "name": "analyze_dna_sequence",
    "description": "Analyzes the DNA sequence based on a reference sequence and return any potential mutations.",
    "parameters": {
      "type": "dict",
      "properties": {
        "sequence": {
          "type": "string",
          "description": "The DNA sequence to be analyzed."
        },
        "reference_sequence": {
          "type": "string",
          "description": "The reference DNA sequence."
        },
        "mutation_type": {
          "type": "string",
          "enum": [
            "insertion",
            "deletion",
            "substitution"
          ],
          "description": "Type of the mutation to be looked for in the sequence.",
          "default": "insertion"
        }
      },
      "required": [
        "sequence",
        "reference_sequence"
      ]
    }
  },
  {
    "name": "genetics.calculate_similarity",
    "description": "Calculates the genetic similarity between two species based on their DNA sequences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "species1": {
          "type": "string",
          "description": "The first species to compare."
        },
        "species2": {
          "type": "string",
          "description": "The second species to compare."
        },
        "format": {
          "type": "string",
          "description": "The format of the result (percentage or fraction). Default is percentage."
        }
      },
      "required": [
        "species1",
        "species2"
      ]
    }
  },
  {
    "name": "calculate_density",
    "description": "Calculate the population density of a specific country in a specific year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The country for which the density needs to be calculated."
        },
        "year": {
          "type": "string",
          "description": "The year in which the density is to be calculated."
        },
        "population": {
          "type": "float",
          "description": "The population of the country."
        },
        "land_area": {
          "type": "float",
          "description": "The land area of the country in square kilometers."
        }
      },
      "required": [
        "country",
        "year",
        "population",
        "land_area"
      ]
    }
  },
  {
    "name": "identify_bird",
    "description": "Identify a bird species based on certain characteristics.",
    "parameters": {
      "type": "dict",
      "properties": {
        "color": {
          "type": "string",
          "description": "Color of the bird."
        },
        "habitat": {
          "type": "string",
          "description": "Habitat of the bird."
        },
        "size": {
          "type": "string",
          "enum": [
            "small",
            "medium",
            "large"
          ],
          "description": "Size of the bird.",
          "default": "small"
        }
      },
      "required": [
        "color",
        "habitat"
      ]
    }
  },
  {
    "name": "ecology.get_turtle_population",
    "description": "Get the population and species of turtles in a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The name of the location."
        },
        "year": {
          "type": "integer",
          "description": "The year of the data requested. (optional). default is 2000"
        },
        "species": {
          "type": "boolean",
          "description": "Whether to include species information. Default is false. (optional)"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "calculate_vehicle_emission",
    "description": "Calculate the annual carbon emissions produced by a specific type of vehicle based on mileage.",
    "parameters": {
      "type": "dict",
      "properties": {
        "vehicle_type": {
          "type": "string",
          "description": "The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle."
        },
        "miles_driven": {
          "type": "integer",
          "description": "The number of miles driven per year."
        },
        "emission_factor": {
          "type": "float",
          "description": "Optional emission factor to calculate emissions. Default factor is set for gas vehicles of 1.4"
        }
      },
      "required": [
        "vehicle_type",
        "miles_driven"
      ]
    }
  },
  {
    "name": "generate_DNA_sequence",
    "description": "Generate a random DNA sequence with a specific length and nucleotide preference.",
    "parameters": {
      "type": "dict",
      "properties": {
        "length": {
          "type": "integer",
          "description": "The length of the DNA sequence to be generated."
        },
        "preferences": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "A",
              "T",
              "C",
              "G"
            ]
          },
          "description": "Preferred nucleotides to include more frequently in the DNA sequence."
        }
      },
      "required": [
        "length",
        "preferences"
      ]
    }
  },
  {
    "name": "population_projections",
    "description": "Calculates the projected population growth based on the current growth rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The country for which to calculate the population projection."
        },
        "years": {
          "type": "integer",
          "description": "Number of years for the projection."
        },
        "growth_rate": {
          "type": "float",
          "description": "Optional parameter to specify the growth rate. Default is current growth rate. of 0.01"
        }
      },
      "required": [
        "country",
        "years"
      ]
    }
  },
  {
    "name": "restaurant.find_nearby",
    "description": "Locate nearby restaurants based on specific dietary preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Los Angeles, CA"
        },
        "dietary_preference": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Vegan",
              "Vegetarian",
              "Gluten-free",
              "Dairy-free",
              "Nut-free"
            ]
          },
          "description": "Dietary preference.",
          "default": [
            "Vegan"
          ]
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "average_temperature",
    "description": "Retrieves the average temperature for a specific location over the defined timeframe.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city to get the average temperature for."
        },
        "days": {
          "type": "integer",
          "description": "The number of days to get the average temperature for."
        },
        "temp_unit": {
          "type": "string",
          "description": "The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "create_histogram",
    "description": "Create a histogram based on provided data.",
    "parameters": {
      "type": "dict",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The data for which histogram needs to be plotted."
        },
        "bins": {
          "type": "integer",
          "description": "The number of equal-width bins in the range. Default is 10."
        }
      },
      "required": [
        "data",
        "bins"
      ]
    }
  },
  {
    "name": "map_routing.fastest_route",
    "description": "Finds the fastest route from one location to another, with an option to avoid toll roads.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The starting location for the journey."
        },
        "end_location": {
          "type": "string",
          "description": "The destination for the journey."
        },
        "avoid_tolls": {
          "type": "boolean",
          "description": "Option to avoid toll roads during the journey. default is False"
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "calculate_average",
    "description": "Calculates the average of a list of numbers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "numbers": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The list of numbers to calculate the average of."
        }
      },
      "required": [
        "numbers"
      ]
    }
  },
  {
    "name": "calculate_distance",
    "description": "Calculate the distance between two GPS coordinates.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coord1": {
          "type": "tuple",
          "description": "The first coordinate as (latitude, longitude).",
          "items": {
            "type": "float"
          }
        },
        "coord2": {
          "type": "tuple",
          "description": "The second coordinate as (latitude, longitude).",
          "items": {
            "type": "float"
          }
        },
        "unit": {
          "type": "string",
          "description": "The unit of distance. Defaults to miles if not specified."
        }
      },
      "required": [
        "coord1",
        "coord2",
        "unit"
      ]
    }
  },
  {
    "name": "city_distance.find_shortest",
    "description": "Calculates the shortest distance between two cities via available public transportation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_city": {
          "type": "string",
          "description": "The city you are starting from."
        },
        "end_city": {
          "type": "string",
          "description": "The city you are heading to."
        },
        "transportation": {
          "type": "string",
          "description": "Preferred mode of public transportation. Default is 'bus'."
        },
        "allow_transfer": {
          "type": "boolean",
          "description": "Allows transfer between different transportation if true. default is False"
        }
      },
      "required": [
        "start_city",
        "end_city"
      ]
    }
  },
  {
    "name": "array_sort",
    "description": "Sorts a given list in ascending or descending order.",
    "parameters": {
      "type": "dict",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The list of numbers to be sorted."
        },
        "order": {
          "type": "string",
          "enum": [
            "ascending",
            "descending"
          ],
          "description": "Order of sorting. If not specified, it will default to ascending."
        }
      },
      "required": [
        "list",
        "order"
      ]
    }
  },
  {
    "name": "employee.fetch_data",
    "description": "Fetches the detailed data for a specific employee in a given company.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company."
        },
        "employee_id": {
          "type": "integer",
          "description": "The unique ID of the employee."
        },
        "data_field": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Personal Info",
              "Job History",
              "Payroll",
              "Attendance"
            ]
          },
          "description": "Fields of data to be fetched for the employee (Optional).",
          "default": [
            "Personal Info"
          ]
        }
      },
      "required": [
        "company_name",
        "employee_id"
      ]
    }
  },
  {
    "name": "imdb.find_movies_by_actor",
    "description": "Searches the database to find all movies by a specific actor within a certain year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "actor_name": {
          "type": "string",
          "description": "The name of the actor."
        },
        "year": {
          "type": "integer",
          "description": "The specific year to search in."
        },
        "category": {
          "type": "string",
          "description": "The category of the film (e.g. Drama, Comedy, etc). This parameter is optional.",
          "default": "Drama"
        }
      },
      "required": [
        "actor_name",
        "year"
      ]
    }
  },
  {
    "name": "get_theater_movie_releases",
    "description": "Retrieve the list of movie releases in specific theaters for a specified period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the theaters."
        },
        "timeframe": {
          "type": "integer",
          "description": "The number of days for which releases are required from current date."
        },
        "format": {
          "type": "string",
          "description": "Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. This is an optional parameter.",
          "default": "IMAX"
        }
      },
      "required": [
        "location",
        "timeframe"
      ]
    }
  },
  {
    "name": "calc_area_triangle",
    "description": "Calculate the area of a triangle with the formula area = 0.5 * base * height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "integer",
          "description": "The length of the base of the triangle in meters."
        },
        "height": {
          "type": "integer",
          "description": "The perpendicular height of the triangle from the base to the opposite vertex in meters."
        }
      },
      "required": [
        "base",
        "height"
      ]
    }
  },
  {
    "name": "math.factorial",
    "description": "Calculate the factorial of a given number.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "integer",
          "description": "The number to compute factorial."
        }
      },
      "required": [
        "number"
      ]
    }
  },
  {
    "name": "calculate_clock_angle",
    "description": "Calculate the angle between the hour and minute hands of a clock at a given time.",
    "parameters": {
      "type": "dict",
      "properties": {
        "hours": {
          "type": "integer",
          "description": "The hour on the clock face."
        },
        "minutes": {
          "type": "integer",
          "description": "The minutes on the clock face."
        },
        "round_to": {
          "type": "integer",
          "description": "The number of decimal places to round the result to, default is 2."
        }
      },
      "required": [
        "hours",
        "minutes"
      ]
    }
  },
  {
    "name": "plot_sine_wave",
    "description": "Plot a sine wave for a given frequency in a given range.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_range": {
          "type": "integer",
          "description": "Start of the range in radians."
        },
        "end_range": {
          "type": "integer",
          "description": "End of the range in radians."
        },
        "frequency": {
          "type": "integer",
          "description": "Frequency of the sine wave in Hz."
        },
        "amplitude": {
          "type": "integer",
          "description": "Amplitude of the sine wave. Default is 1."
        },
        "phase_shift": {
          "type": "integer",
          "description": "Phase shift of the sine wave in radians. Default is 0."
        }
      },
      "required": [
        "start_range",
        "end_range",
        "frequency"
      ]
    }
  },
  {
    "name": "light_travel_time",
    "description": "Calculate the time taken for light to travel from a celestial body to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "distance_in_light_years": {
          "type": "float",
          "description": "The distance between the two celestial bodies in light years."
        },
        "speed_of_light": {
          "type": "integer",
          "description": "The speed of light in vacuum, in m/s. Default value is 299792458 m/s."
        }
      },
      "required": [
        "distance_in_light_years"
      ]
    }
  },
  {
    "name": "calculate_speed",
    "description": "Calculate the speed of an object based on the distance travelled and the time taken.",
    "parameters": {
      "type": "dict",
      "properties": {
        "distance": {
          "type": "integer",
          "description": "The distance the object travelled in meters."
        },
        "time": {
          "type": "integer",
          "description": "The time it took for the object to travel in seconds."
        },
        "to_unit": {
          "type": "string",
          "description": "The unit in which the speed should be calculated, default is m/s."
        }
      },
      "required": [
        "distance",
        "time"
      ]
    }
  },
  {
    "name": "calculate_distance",
    "description": "Calculate the distance between two celestial bodies.",
    "parameters": {
      "type": "dict",
      "properties": {
        "body1": {
          "type": "string",
          "description": "The first celestial body."
        },
        "body2": {
          "type": "string",
          "description": "The second celestial body."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement, default is 'kilometers'."
        }
      },
      "required": [
        "body1",
        "body2"
      ]
    }
  },
  {
    "name": "mathematics.calculate_area_under_curve",
    "description": "Calculate the area under the curve for a given polynomial function within a specified interval.",
    "parameters": {
      "type": "dict",
      "properties": {
        "polynomial": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."
        },
        "limits": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "A list of two numbers specifying the lower and upper limit for the integration interval."
        }
      },
      "required": [
        "polynomial",
        "limits"
      ]
    }
  },
  {
    "name": "math.power",
    "description": "Calculate the power of one number raised to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "integer",
          "description": "The base number."
        },
        "exponent": {
          "type": "integer",
          "description": "The exponent."
        },
        "mod": {
          "type": "float",
          "description": "The modulus. Default is None. Calculates pow(base, exponent) % mod when provided."
        }
      },
      "required": [
        "base",
        "exponent"
      ]
    }
  },
  {
    "name": "random_forest.train",
    "description": "Train a Random Forest Model on given data",
    "parameters": {
      "type": "dict",
      "properties": {
        "n_estimators": {
          "type": "integer",
          "description": "The number of trees in the forest."
        },
        "max_depth": {
          "type": "integer",
          "description": "The maximum depth of the tree."
        },
        "data": {
          "type": "string",
          "description": "The training data for the model."
        }
      },
      "required": [
        "n_estimators",
        "max_depth",
        "data"
      ]
    }
  },
  {
    "name": "predict_house_price",
    "description": "Predict the price of a house in a given area based on number of bedrooms, bathrooms and area.",
    "parameters": {
      "type": "dict",
      "properties": {
        "bedrooms": {
          "type": "integer",
          "description": "The number of bedrooms in the house."
        },
        "bathrooms": {
          "type": "integer",
          "description": "The number of bathrooms in the house."
        },
        "area": {
          "type": "integer",
          "description": "The area of the house in square feet."
        },
        "location": {
          "type": "string",
          "description": "The location of the house."
        }
      },
      "required": [
        "bedrooms",
        "bathrooms",
        "area",
        "location"
      ]
    }
  },
  {
    "name": "random.normalvariate",
    "description": "Generates a random number from a normal distribution given the mean and standard deviation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "mu": {
          "type": "integer",
          "description": "Mean of the normal distribution."
        },
        "sigma": {
          "type": "integer",
          "description": "Standard deviation of the normal distribution."
        }
      },
      "required": [
        "mu",
        "sigma"
      ]
    }
  },
  {
    "name": "probability.dice_roll",
    "description": "Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.",
    "parameters": {
      "type": "dict",
      "properties": {
        "desired_number": {
          "type": "integer",
          "description": "The number you want to roll."
        },
        "number_of_rolls": {
          "type": "integer",
          "description": "How many times you want to roll that number in a row."
        },
        "die_sides": {
          "type": "integer",
          "description": "The number of sides on the die (optional; default is 6)."
        }
      },
      "required": [
        "desired_number",
        "number_of_rolls"
      ]
    }
  },
  {
    "name": "calc_binomial_prob",
    "description": "Calculates the probability of an outcome based on the binomial distribution",
    "parameters": {
      "type": "dict",
      "properties": {
        "num_trials": {
          "type": "integer",
          "description": "Number of independent experiments."
        },
        "num_success": {
          "type": "integer",
          "description": "Number of times the event of interest has occurred."
        },
        "prob_success": {
          "type": "float",
          "description": "Probability of the event of interest on any single experiment."
        }
      },
      "required": [
        "num_trials",
        "num_success",
        "prob_success"
      ]
    }
  },
  {
    "name": "chi_squared_test",
    "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.",
    "parameters": {
      "type": "dict",
      "properties": {
        "table": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "A 2x2 contingency table presented in array form."
        },
        "alpha": {
          "type": "float",
          "description": "Significance level for the Chi-Squared test. Default is 0.05."
        }
      },
      "required": [
        "table"
      ]
    }
  },
  {
    "name": "linear_regression.get_r_squared",
    "description": "Calculate the coefficient of determination of a regression model.",
    "parameters": {
      "type": "dict",
      "properties": {
        "dataset_path": {
          "type": "string",
          "description": "Path to the CSV dataset file."
        },
        "independent_variables": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The independent variables to use in the regression model."
        },
        "dependent_variable": {
          "type": "string",
          "description": "The dependent variable to predict in the regression model."
        }
      },
      "required": [
        "dataset_path",
        "independent_variables",
        "dependent_variable"
      ]
    }
  },
  {
    "name": "finance.calculate_quarterly_dividend_per_share",
    "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares",
    "parameters": {
      "type": "dict",
      "properties": {
        "total_payout": {
          "type": "integer",
          "description": "The total amount of dividends paid out in USD"
        },
        "outstanding_shares": {
          "type": "integer",
          "description": "Total number of outstanding shares"
        }
      },
      "required": [
        "total_payout",
        "outstanding_shares"
      ],
      "optional": []
    }
  },
  {
    "name": "calculate_discounted_cash_flow",
    "description": "Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coupon_payment": {
          "type": "integer",
          "description": "The annual coupon payment."
        },
        "period": {
          "type": "integer",
          "description": "The time frame in years for which coupon payment is made."
        },
        "discount_rate": {
          "type": "float",
          "description": "The discount rate."
        },
        "face_value": {
          "type": "integer",
          "description": "The face value of the bond, default is $1000."
        }
      },
      "required": [
        "coupon_payment",
        "period",
        "discount_rate"
      ]
    }
  },
  {
    "name": "calculate_compound_interest",
    "description": "Calculate compound interest for an initial principal amount.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principal": {
          "type": "integer",
          "description": "The principal amount that the interest is applied to."
        },
        "rate": {
          "type": "float",
          "description": "The annual interest rate. Enter as a decimal. E.g, 5% is 0.05"
        },
        "time": {
          "type": "integer",
          "description": "The time the money is invested for in years."
        },
        "n": {
          "type": "integer",
          "description": "The number of times that interest is compounded per time period. Default is 1."
        }
      },
      "required": [
        "principal",
        "rate",
        "time"
      ]
    }
  },
  {
    "name": "calculate_return_on_equity",
    "description": "Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.",
    "parameters": {
      "type": "dict",
      "properties": {
        "net_income": {
          "type": "integer",
          "description": "The company's net income."
        },
        "shareholder_equity": {
          "type": "integer",
          "description": "The company's total shareholder's equity."
        },
        "dividends_paid": {
          "type": "integer",
          "description": "The total dividends paid by the company. Optional. If not given, assumes it's 0 as default."
        }
      },
      "required": [
        "net_income",
        "shareholder_equity"
      ]
    }
  },
  {
    "name": "finance.predict_future_value",
    "description": "Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.",
    "parameters": {
      "type": "dict",
      "properties": {
        "present_value": {
          "type": "integer",
          "description": "The present value of the investment."
        },
        "annual_interest_rate": {
          "type": "float",
          "description": "The annual interest rate of the investment."
        },
        "compounding_periods_per_year": {
          "type": "integer",
          "description": "The number of times that interest is compounded per year. Default is 1 (annually)."
        },
        "time_years": {
          "type": "integer",
          "description": "The investment horizon in years."
        }
      },
      "required": [
        "present_value",
        "annual_interest_rate",
        "time_years"
      ]
    }
  },
  {
    "name": "investment.predictProfit",
    "description": "Predict the profit for given investment after specified number of years.",
    "parameters": {
      "type": "dict",
      "properties": {
        "investment_amount": {
          "type": "integer",
          "description": "The amount invested in dollars."
        },
        "annual_return": {
          "type": "float",
          "description": "The annual return rate of the investment."
        },
        "years": {
          "type": "integer",
          "description": "The time period in years for which the investment is made."
        }
      },
      "required": [
        "investment_amount",
        "annual_return",
        "years"
      ]
    }
  },
  {
    "name": "calculate_return_on_investment",
    "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.",
    "parameters": {
      "type": "dict",
      "properties": {
        "purchase_price": {
          "type": "integer",
          "description": "The price the stock was bought at."
        },
        "sale_price": {
          "type": "integer",
          "description": "The price the stock was sold at."
        },
        "dividend": {
          "type": "integer",
          "description": "Any dividends received from the stock.",
          "default": 0
        }
      },
      "required": [
        "purchase_price",
        "sale_price"
      ]
    }
  },
  {
    "name": "portfolio_future_value",
    "description": "Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.",
    "parameters": {
      "type": "dict",
      "properties": {
        "stock": {
          "type": "string",
          "description": "The ticker symbol of the stock."
        },
        "invested_amount": {
          "type": "integer",
          "description": "The invested amount in USD."
        },
        "expected_annual_return": {
          "type": "float",
          "description": "The expected annual return on investment as a decimal. E.g. 5% = 0.05"
        },
        "years": {
          "type": "integer",
          "description": "The number of years for which the investment is made."
        }
      },
      "required": [
        "stock",
        "invested_amount",
        "expected_annual_return",
        "years"
      ]
    }
  },
  {
    "name": "get_metal_price",
    "description": "Retrieve the current price for a specified metal and measure.",
    "parameters": {
      "type": "dict",
      "properties": {
        "metal": {
          "type": "string",
          "description": "The metal whose price needs to be fetched."
        },
        "measure": {
          "type": "string",
          "description": "The measure unit for price, like 'ounce' or 'kg'."
        }
      },
      "required": [
        "metal",
        "measure"
      ]
    }
  },
  {
    "name": "get_stock_price",
    "description": "Retrieve the stock price for a specific company and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The ticker symbol of the company."
        },
        "days": {
          "type": "integer",
          "description": "Number of past days for which the stock price is required."
        },
        "exchange": {
          "type": "string",
          "description": "The stock exchange where the company is listed, default is NYSE"
        }
      },
      "required": [
        "company",
        "days"
      ]
    }
  },
  {
    "name": "stock_price",
    "description": "Get stock price data for a given company over a specified number of days.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company name."
        },
        "days": {
          "type": "integer",
          "description": "The number of previous days to retrieve data for."
        },
        "data_type": {
          "type": "string",
          "description": "The type of price data to retrieve (e.g., 'Open', 'Close', 'High', 'Low'). Default is 'Close'."
        }
      },
      "required": [
        "company",
        "days"
      ]
    }
  },
  {
    "name": "get_stock_prices",
    "description": "Retrieves stock prices for specified companies and duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "companies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of companies to retrieve stock prices for."
        },
        "duration": {
          "type": "string",
          "description": "Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc."
        }
      },
      "required": [
        "companies",
        "duration"
      ]
    }
  },
  {
    "name": "estimate_population",
    "description": "Estimate the population of a particular species in a given country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "species": {
          "type": "string",
          "description": "The species for which population needs to be estimated."
        },
        "country": {
          "type": "string",
          "description": "The country where the species lives."
        },
        "year": {
          "type": "integer",
          "description": "The year for which population estimate is sought. Default is 2020."
        }
      },
      "required": [
        "species",
        "country"
      ]
    }
  },
  {
    "name": "calculate_emission_savings",
    "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.",
    "parameters": {
      "type": "dict",
      "properties": {
        "energy_type": {
          "type": "string",
          "description": "Type of the renewable energy source."
        },
        "usage_duration": {
          "type": "integer",
          "description": "Usage duration in months."
        },
        "region": {
          "type": "string",
          "description": "The region where you use energy.",
          "default": "West"
        }
      },
      "required": [
        "energy_type",
        "usage_duration"
      ]
    }
  },
  {
    "name": "get_air_quality",
    "description": "Retrieve real-time air quality and pollution data for a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the air quality data for."
        },
        "detail": {
          "type": "boolean",
          "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. the value is set to false to default."
        },
        "historical": {
          "type": "string",
          "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.",
          "default": "today"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "parks.find_nearby",
    "description": "Locate nearby parks based on specific criteria like tennis court availability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. London, UK"
        },
        "amenities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Tennis Court",
              "Picnic Area",
              "Playground",
              "Running Track"
            ]
          },
          "description": "Preferred amenities in park.",
          "default": [
            "Playground"
          ]
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "get_news",
    "description": "Fetches the latest news on a specific topic.",
    "parameters": {
      "type": "dict",
      "properties": {
        "topic": {
          "type": "string",
          "description": "The subject for the news topic."
        },
        "quantity": {
          "type": "integer",
          "description": "Number of articles to fetch."
        },
        "region": {
          "type": "string",
          "description": "The geographical region for the news (Optional). default is 'USA'"
        }
      },
      "required": [
        "topic",
        "quantity"
      ]
    }
  },
  {
    "name": "send_email",
    "description": "Send an email to the specified email address.",
    "parameters": {
      "type": "dict",
      "properties": {
        "to": {
          "type": "string",
          "description": "The email address to send to."
        },
        "subject": {
          "type": "string",
          "description": "The subject of the email."
        },
        "body": {
          "type": "string",
          "description": "The body content of the email."
        },
        "cc": {
          "type": "string",
          "description": "The email address to carbon copy. default is ''."
        },
        "bcc": {
          "type": "string",
          "description": "The email address to blind carbon copy. the value is set to '' for default."
        }
      },
      "required": [
        "to",
        "subject",
        "body"
      ]
    }
  },
  {
    "name": "get_lawsuit_details",
    "description": "Retrieve details of a lawsuit based on its case number and court location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_number": {
          "type": "string",
          "description": "Case number of the lawsuit."
        },
        "court_location": {
          "type": "string",
          "description": "The location of the court where the lawsuit was filed."
        },
        "with_verdict": {
          "type": "boolean",
          "description": "Flag to include verdict details if available. Default is False"
        }
      },
      "required": [
        "case_number",
        "court_location"
      ]
    }
  },
  {
    "name": "lawsuit_info",
    "description": "Retrieves details of a lawsuit given a case number",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_number": {
          "type": "string",
          "description": "The unique identifier of the lawsuit case"
        },
        "year": {
          "type": "integer",
          "description": "The year in which the lawsuit case was initiated",
          "optional": true,
          "default": 2000
        },
        "location": {
          "type": "string",
          "description": "The location or court jurisdiction where the case was filed.",
          "optional": true,
          "default": "New York"
        }
      },
      "required": [
        "case_number"
      ]
    }
  },
  {
    "name": "get_current_weather",
    "description": "Retrieves the current temperature and humidity for a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location to get the weather for."
        },
        "include_temperature": {
          "type": "boolean",
          "description": "Whether to include the temperature in the result. Default is true."
        },
        "include_humidity": {
          "type": "boolean",
          "description": "Whether to include the humidity in the result. Default is true."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "math_toolkit.sum_of_multiples",
    "description": "Find the sum of all multiples of specified numbers within a specified range.",
    "parameters": {
      "type": "dict",
      "properties": {
        "lower_limit": {
          "type": "integer",
          "description": "The start of the range (inclusive)."
        },
        "upper_limit": {
          "type": "integer",
          "description": "The end of the range (inclusive)."
        },
        "multiples": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The numbers to find multiples of."
        }
      },
      "required": [
        "lower_limit",
        "upper_limit",
        "multiples"
      ]
    }
  },
  {
    "name": "math_toolkit.product_of_primes",
    "description": "Find the product of the first n prime numbers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "count": {
          "type": "integer",
          "description": "The number of prime numbers to multiply together."
        }
      },
      "required": [
        "count"
      ]
    }
  },
  {
    "name": "volume_cylinder.calculate",
    "description": "Calculate the volume of a cylinder given the radius and the height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "float",
          "description": "The radius of the cylinder."
        },
        "height": {
          "type": "float",
          "description": "The height of the cylinder."
        }
      },
      "required": [
        "radius",
        "height"
      ]
    }
  },
  {
    "name": "area_rectangle.calculate",
    "description": "Calculate the area of a rectangle given the length and breadth.",
    "parameters": {
      "type": "dict",
      "properties": {
        "length": {
          "type": "float",
          "description": "The length of the rectangle."
        },
        "breadth": {
          "type": "float",
          "description": "The breadth of the rectangle."
        }
      },
      "required": [
        "length",
        "breadth"
      ]
    }
  },
  {
    "name": "area_circle.calculate",
    "description": "Calculate the area of a circle given the radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "float",
          "description": "The radius of the circle."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "circle.calculate_circumference",
    "description": "Calculate the circumference of a circle based on the diameter.",
    "parameters": {
      "type": "dict",
      "properties": {
        "diameter": {
          "type": "integer",
          "description": "The diameter of the circle."
        }
      },
      "required": [
        "diameter"
      ]
    }
  },
  {
    "name": "circle.calculate_area",
    "description": "Calculate the area of a circle based on the radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "The radius of the circle."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "rectangle.calculate_perimeter",
    "description": "Calculate the perimeter of a rectangle based on the length and breadth.",
    "parameters": {
      "type": "dict",
      "properties": {
        "length": {
          "type": "integer",
          "description": "The length of the rectangle."
        },
        "breadth": {
          "type": "integer",
          "description": "The breadth of the rectangle."
        }
      },
      "required": [
        "length",
        "breadth"
      ]
    }
  },
  {
    "name": "integral",
    "description": "Calculate the definite integral of a function over an interval [a, b].",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "The function to integrate."
        },
        "a": {
          "type": "float",
          "description": "The lower bound of the interval."
        },
        "b": {
          "type": "float",
          "description": "The upper bound of the interval."
        }
      },
      "required": [
        "function",
        "a",
        "b"
      ]
    }
  },
  {
    "name": "get_rectangle_property",
    "description": "Get specific property of the rectangle (like length, width) based on perimeter and area.",
    "parameters": {
      "type": "dict",
      "properties": {
        "perimeter": {
          "type": "integer",
          "description": "Perimeter of the rectangle."
        },
        "area": {
          "type": "integer",
          "description": "Area of the rectangle."
        },
        "property": {
          "type": "string",
          "description": "Specific property required. It can be length, width or diagonal."
        },
        "tolerance": {
          "type": "float",
          "description": "Allowed error for calculations. (optional) Default 0.1"
        }
      },
      "required": [
        "perimeter",
        "area",
        "property"
      ]
    }
  },
  {
    "name": "derivative",
    "description": "Find the derivative of a function at a certain point.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "The function to differentiate."
        },
        "x": {
          "type": "float",
          "description": "The point to calculate the derivative at."
        }
      },
      "required": [
        "function",
        "x"
      ]
    }
  },
  {
    "name": "primeFactors",
    "description": "Find all prime factors of an integer.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The integer."
        },
        "withMultiplicity": {
          "type": "boolean",
          "description": "If true, includes the multiplicity of each factor.",
          "default": "false"
        }
      },
      "required": [
        "num"
      ]
    }
  },
  {
    "name": "lcm",
    "description": "Calculate the least common multiple of two integers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num1": {
          "type": "integer",
          "description": "The first integer."
        },
        "num2": {
          "type": "integer",
          "description": "The second integer."
        }
      },
      "required": [
        "num1",
        "num2"
      ]
    }
  },
  {
    "name": "gcd",
    "description": "Calculate the greatest common divisor of two integers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num1": {
          "type": "integer",
          "description": "The first integer."
        },
        "num2": {
          "type": "integer",
          "description": "The second integer."
        }
      },
      "required": [
        "num1",
        "num2"
      ]
    }
  },
  {
    "name": "count_items",
    "description": "Count the number of items in a collection.",
    "parameters": {
      "type": "dict",
      "properties": {
        "collection": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The collection of items to count"
        }
      },
      "required": [
        "collection"
      ]
    }
  },
  {
    "name": "find_prime_numbers",
    "description": "Locate all prime numbers in a specific number range.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start": {
          "type": "integer",
          "description": "The start of the number range"
        },
        "end": {
          "type": "integer",
          "description": "The end of the number range"
        }
      },
      "required": [
        "start",
        "end"
      ]
    }
  },
  {
    "name": "get_fibonacci_sequence",
    "description": "Generate a Fibonacci sequence up to a specific number of items.",
    "parameters": {
      "type": "dict",
      "properties": {
        "count": {
          "type": "integer",
          "description": "The number of items to generate"
        }
      },
      "required": [
        "count"
      ]
    }
  },
  {
    "name": "physics.calculate_force",
    "description": "Calculate the force required to move an object of a particular mass at a particular acceleration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "mass": {
          "type": "integer",
          "description": "The mass of the object in kg."
        },
        "acceleration": {
          "type": "integer",
          "description": "The acceleration of the object in m/s^2."
        }
      },
      "required": [
        "mass",
        "acceleration"
      ]
    }
  },
  {
    "name": "kinematics.calculate_time",
    "description": "Calculate time required for an object to travel a particular distance at a particular velocity.",
    "parameters": {
      "type": "dict",
      "properties": {
        "velocity": {
          "type": "integer",
          "description": "The velocity of the object in m/s."
        },
        "distance": {
          "type": "integer",
          "description": "The distance covered by the object in meters."
        }
      },
      "required": [
        "velocity",
        "distance"
      ]
    }
  },
  {
    "name": "kinematics.distance_traveled",
    "description": "Computes the total distance covered by a moving object given initial velocity, acceleration and time.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "float",
          "description": "The initial velocity of the object in m/s."
        },
        "acceleration": {
          "type": "float",
          "description": "The acceleration of the object in m/s^2."
        },
        "time": {
          "type": "float",
          "description": "The time for which the object has been moving in seconds."
        }
      },
      "required": [
        "initial_velocity",
        "acceleration",
        "time"
      ]
    }
  },
  {
    "name": "kinematics.final_velocity",
    "description": "Calculates the final velocity of a moving object given initial velocity, acceleration and time.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "float",
          "description": "The initial velocity of the object in m/s."
        },
        "acceleration": {
          "type": "float",
          "description": "The acceleration of the object in m/s^2."
        },
        "time": {
          "type": "float",
          "description": "The time for which the object has been moving in seconds."
        }
      },
      "required": [
        "initial_velocity",
        "acceleration",
        "time"
      ]
    }
  },
  {
    "name": "flight_book",
    "description": "Book a flight for a specific route and airlines",
    "parameters": {
      "type": "dict",
      "properties": {
        "_from": {
          "type": "string",
          "description": "The departure city in full name."
        },
        "to": {
          "type": "string",
          "description": "The arrival city in full name."
        },
        "airlines": {
          "type": "string",
          "description": "The preferred airline."
        }
      },
      "required": [
        "_from",
        "to",
        "airlines"
      ]
    }
  },
  {
    "name": "hotel_book",
    "description": "Book a hotel for a specific location for the number of nights",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where the hotel is located."
        },
        "nights": {
          "type": "integer",
          "description": "Number of nights for the stay."
        }
      },
      "required": [
        "location",
        "nights"
      ]
    }
  },
  {
    "name": "train_ticket.buy",
    "description": "Buy a train ticket for a specific date and route.",
    "parameters": {
      "type": "dict",
      "properties": {
        "origin": {
          "type": "string",
          "description": "The departure full name of the city."
        },
        "destination": {
          "type": "string",
          "description": "The destination city."
        },
        "date": {
          "type": "string",
          "description": "The date when the journey should be, in the format of yyyy-mm-dd."
        }
      },
      "required": [
        "origin",
        "destination",
        "date"
      ]
    }
  },
  {
    "name": "musical_ticket.buy",
    "description": "Buy a ticket for a musical",
    "parameters": {
      "type": "dict",
      "properties": {
        "show": {
          "type": "string",
          "description": "Name of the show."
        },
        "date": {
          "type": "string",
          "description": "Date when the ticket should be bought for."
        }
      },
      "required": [
        "show",
        "date"
      ]
    }
  },
  {
    "name": "concert_ticket.buy",
    "description": "Buy a concert ticket",
    "parameters": {
      "type": "dict",
      "properties": {
        "artist": {
          "type": "string",
          "description": "Name of the artist."
        },
        "date": {
          "type": "string",
          "description": "Date of the concert."
        }
      },
      "required": [
        "artist",
        "date"
      ]
    }
  },
  {
    "name": "physics.magnetic_field",
    "description": "Calculate magnetic field for given current flowing through solenoid.",
    "parameters": {
      "type": "dict",
      "properties": {
        "current": {
          "type": "float",
          "description": "Electric current in Amperes."
        },
        "turnsPerMeter": {
          "type": "float",
          "description": "Number of turns of solenoid per meter."
        },
        "length": {
          "type": "float",
          "description": "Length of the solenoid in meters."
        }
      },
      "required": [
        "current",
        "turnsPerMeter",
        "length"
      ]
    }
  },
  {
    "name": "physics.electric_field",
    "description": "Calculate electric field for a given point charge and distance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge": {
          "type": "float",
          "description": "Value of point charge in Coulombs."
        },
        "distance": {
          "type": "float",
          "description": "Distance from the point charge in meters."
        }
      },
      "required": [
        "charge",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_voltage_difference",
    "description": "Calculate the voltage difference between two points in an electric field.",
    "parameters": {
      "type": "dict",
      "properties": {
        "electric_field": {
          "type": "float",
          "description": "The electric field in newtons per coulomb."
        },
        "distance": {
          "type": "float",
          "description": "The distance between the two points in the direction of the field in meters."
        },
        "charge": {
          "type": "float",
          "description": "The charge of the test particle, typically an electron, in coulombs. Default to 0",
          "default": 0
        }
      },
      "required": [
        "electric_field",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_magnetic_field",
    "description": "Calculate the magnetic field produced by a current-carrying wire.",
    "parameters": {
      "type": "dict",
      "properties": {
        "current": {
          "type": "float",
          "description": "The current in the wire in amperes."
        },
        "distance": {
          "type": "float",
          "description": "The perpendicular distance from the wire in meters."
        },
        "permeability": {
          "type": "float",
          "description": "The permeability of free space, a constant value. Default 0.1"
        }
      },
      "required": [
        "current",
        "distance"
      ]
    }
  },
  {
    "name": "temperature_converter.convert",
    "description": "Convert a temperature from one unit to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "temperature": {
          "type": "float",
          "description": "The temperature to convert."
        },
        "from_unit": {
          "type": "string",
          "description": "The unit to convert from."
        },
        "to_unit": {
          "type": "string",
          "description": "The unit to convert to."
        },
        "round_to": {
          "type": "integer",
          "description": "The number of decimal places to round the result to. Defaults to 2."
        }
      },
      "required": [
        "temperature",
        "from_unit",
        "to_unit"
      ]
    }
  },
  {
    "name": "energy_calculator.calculate",
    "description": "Calculate the energy needed to heat a substance from an initial to a final temperature.",
    "parameters": {
      "type": "dict",
      "properties": {
        "substance": {
          "type": "string",
          "description": "The substance to be heated."
        },
        "mass": {
          "type": "float",
          "description": "The mass of the substance in grams."
        },
        "initial_temperature": {
          "type": "float",
          "description": "The initial temperature of the substance in degrees Celsius."
        },
        "final_temperature": {
          "type": "float",
          "description": "The final temperature of the substance in degrees Celsius."
        },
        "unit": {
          "type": "string",
          "description": "The unit to report the energy in. Options are 'joules' and 'calories'. Defaults to 'joules'."
        }
      },
      "required": [
        "substance",
        "mass",
        "initial_temperature",
        "final_temperature"
      ]
    }
  },
  {
    "name": "crop_yield.get_history",
    "description": "Retrieve historical crop yield data of a specific crop in a given country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The country of interest."
        },
        "crop": {
          "type": "string",
          "description": "Type of crop."
        },
        "years": {
          "type": "integer",
          "description": "Number of years of history to retrieve."
        }
      },
      "required": [
        "country",
        "crop",
        "years"
      ]
    }
  },
  {
    "name": "animal_population.get_history",
    "description": "Retrieve historical population size of a specific species in a given country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The country of interest."
        },
        "species": {
          "type": "string",
          "description": "Species of the animal."
        },
        "years": {
          "type": "integer",
          "description": "Number of years of history to retrieve."
        }
      },
      "required": [
        "country",
        "species",
        "years"
      ]
    }
  },
  {
    "name": "animal_population.get_projection",
    "description": "Predict the future population size of a specific species in a given country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The country of interest."
        },
        "species": {
          "type": "string",
          "description": "Species of the animal."
        },
        "years": {
          "type": "integer",
          "description": "Number of years in the future to predict."
        }
      },
      "required": [
        "country",
        "species",
        "years"
      ]
    }
  },
  {
    "name": "restaurant.search",
    "description": "Find a restaurant in a specified location based on the cuisine and ratings.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. New York, NY"
        },
        "cuisine": {
          "type": "string",
          "description": "The type of cuisine."
        },
        "rating": {
          "type": "float",
          "description": "The minimum rating. Default 1.0"
        }
      },
      "required": [
        "location",
        "cuisine"
      ],
      "optional": [
        "rating"
      ]
    }
  },
  {
    "name": "flight.search",
    "description": "Find flights between two cities.",
    "parameters": {
      "type": "dict",
      "properties": {
        "_from": {
          "type": "string",
          "description": "The departure city."
        },
        "to": {
          "type": "string",
          "description": "The destination city."
        },
        "type": {
          "type": "string",
          "description": "The type of flight e.g., one-way, round-trip"
        }
      },
      "required": [
        "_from",
        "to",
        "type"
      ]
    }
  },
  {
    "name": "calculate_fibonacci",
    "description": "Calculate the Fibonacci series up to a specific position.",
    "parameters": {
      "type": "dict",
      "properties": {
        "position": {
          "type": "integer",
          "description": "The position up to which you want to calculate the Fibonacci series."
        }
      },
      "required": [
        "position"
      ]
    }
  },
  {
    "name": "calculate_factorial",
    "description": "Calculate the factorial of a given number.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "integer",
          "description": "The number of which you want to calculate the factorial."
        }
      },
      "required": [
        "number"
      ]
    }
  },
  {
    "name": "generate_prime",
    "description": "Generate prime numbers within a given range.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start": {
          "type": "integer",
          "description": "The start of the range from which you want to find the prime numbers."
        },
        "end": {
          "type": "integer",
          "description": "The end of the range from which you want to find the prime numbers."
        }
      },
      "required": [
        "start",
        "end"
      ]
    }
  },
  {
    "name": "payment_calculation",
    "description": "Calculate how much a person should pay given the items purchased and their quantities",
    "parameters": {
      "type": "dict",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of items purchased."
        },
        "quantities": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Quantity of each item purchased in correspondence with the previous items list."
        }
      },
      "required": [
        "items",
        "quantities"
      ]
    }
  },
  {
    "name": "steps_calorie_calculation",
    "description": "Calculate how many steps you need to walk to burn a specified amount of calories.",
    "parameters": {
      "type": "dict",
      "properties": {
        "calorie": {
          "type": "float",
          "description": "The amount of calories to burn."
        }
      },
      "required": [
        "calorie"
      ]
    }
  },
  {
    "name": "hydration_calculator",
    "description": "Calculate the amount of water to drink in a day given the hours of exercise.",
    "parameters": {
      "type": "dict",
      "properties": {
        "exercise_time": {
          "type": "float",
          "description": "The number of hours of exercise."
        }
      },
      "required": [
        "exercise_time"
      ]
    }
  },
  {
    "name": "banking_service",
    "description": "Make a deposit to a given bank account",
    "parameters": {
      "type": "dict",
      "properties": {
        "account_id": {
          "type": "string",
          "description": "Target account to make deposit to."
        },
        "amount": {
          "type": "float",
          "description": "Amount to deposit."
        }
      },
      "required": [
        "account_id",
        "amount"
      ]
    }
  },
  {
    "name": "currency_conversion",
    "description": "Convert a specific amount from one currency to another",
    "parameters": {
      "type": "dict",
      "properties": {
        "amount": {
          "type": "float",
          "description": "Amount to convert."
        },
        "from_currency": {
          "type": "string",
          "description": "Source currency."
        },
        "to_currency": {
          "type": "string",
          "description": "Target currency."
        }
      },
      "required": [
        "amount",
        "from_currency",
        "to_currency"
      ]
    }
  },
  {
    "name": "math.gaussian_integral",
    "description": "Perform Gaussian integration over the range of the function.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "The function to integrate, given in terms of x."
        },
        "lower_limit": {
          "type": "float",
          "description": "The lower limit of the integral."
        },
        "upper_limit": {
          "type": "float",
          "description": "The upper limit of the integral."
        }
      },
      "required": [
        "function",
        "lower_limit",
        "upper_limit"
      ]
    }
  },
  {
    "name": "math.definite_integral",
    "description": "Calculate the definite integral of a function within specified bounds.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "The function to integrate, given in terms of x."
        },
        "lower_limit": {
          "type": "float",
          "description": "The lower limit of the integral."
        },
        "upper_limit": {
          "type": "float",
          "description": "The upper limit of the integral."
        }
      },
      "required": [
        "function",
        "lower_limit",
        "upper_limit"
      ]
    }
  },
  {
    "name": "statistics.variance",
    "description": "This function calculates the variance of a given set of numbers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The list of data points."
        },
        "population": {
          "type": "boolean",
          "description": "Determines whether to use population variance formula. Default to True",
          "default": true
        }
      },
      "required": [
        "data"
      ]
    }
  },
  {
    "name": "statistics.median",
    "description": "This function returns the median of the data set provided.",
    "parameters": {
      "type": "dict",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The list of data points."
        }
      },
      "required": [
        "data"
      ]
    }
  },
  {
    "name": "statistics.mode",
    "description": "This function determines the mode of a list of numbers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The list of data points."
        }
      },
      "required": [
        "data"
      ]
    }
  },
  {
    "name": "linear_regression_fit",
    "description": "Fit a linear regression model to data.",
    "parameters": {
      "type": "dict",
      "properties": {
        "x": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "Array of the predictor variable."
        },
        "y": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "Array of the dependent variable."
        },
        "return_residuals": {
          "type": "boolean",
          "description": "Flag indicating whether to return the residuals (the difference between the observed and predicted values). Optional.",
          "default": "false"
        }
      },
      "required": [
        "x",
        "y"
      ]
    }
  },
  {
    "name": "data_loading",
    "description": "Load data from a csv file into a data structure.",
    "parameters": {
      "type": "dict",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The path to the file to load."
        },
        "delimiter": {
          "type": "string",
          "description": "The character used to separate values in the file. Optional.",
          "default": ","
        }
      },
      "required": [
        "file_path"
      ]
    }
  },
  {
    "name": "financial_ratios.interest_coverage",
    "description": "Calculate a company's interest coverage ratio given the company name and duration",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company."
        },
        "years": {
          "type": "integer",
          "description": "Number of past years to calculate the ratio."
        }
      },
      "required": [
        "company_name",
        "years"
      ]
    }
  },
  {
    "name": "sales_growth.calculate",
    "description": "Calculate a company's sales growth rate given the company name and duration",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company that you want to get the sales growth rate for."
        },
        "years": {
          "type": "integer",
          "description": "Number of past years for which to calculate the sales growth rate."
        }
      },
      "required": [
        "company",
        "years"
      ]
    }
  },
  {
    "name": "financial_ratio.net_profit_margin",
    "description": "Calculate net profit margin of a company given the net income and total revenue",
    "parameters": {
      "type": "dict",
      "properties": {
        "net_income": {
          "type": "integer",
          "description": "The net income of the company."
        },
        "total_revenue": {
          "type": "integer",
          "description": "The total revenue of the company."
        }
      },
      "required": [
        "net_income",
        "total_revenue"
      ]
    }
  },
  {
    "name": "financial_ratio.debt_ratio",
    "description": "Calculate the debt ratio of a company given the total liabilities and total assets.",
    "parameters": {
      "type": "dict",
      "properties": {
        "total_liabilities": {
          "type": "integer",
          "description": "The total liabilities of the company."
        },
        "total_assets": {
          "type": "integer",
          "description": "The total assets of the company."
        }
      },
      "required": [
        "total_liabilities",
        "total_assets"
      ]
    }
  },
  {
    "name": "investment.withdraw",
    "description": "Withdraw a specific amount from a company's stock.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company you want to withdraw from."
        },
        "amount": {
          "type": "float",
          "description": "The amount you want to withdraw."
        }
      },
      "required": [
        "company",
        "amount"
      ]
    }
  },
  {
    "name": "investment.invest",
    "description": "Invest a specific amount in a company's stock.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company you want to invest in."
        },
        "amount": {
          "type": "float",
          "description": "The amount you want to invest."
        }
      },
      "required": [
        "company",
        "amount"
      ]
    }
  },
  {
    "name": "stock_invest.calculate_investment_cost",
    "description": "Calculate the cost of investing in a specific number of shares from a given company.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company that you want to invest in."
        },
        "shares": {
          "type": "integer",
          "description": "Number of shares to invest."
        }
      },
      "required": [
        "company",
        "shares"
      ]
    }
  },
  {
    "name": "stock_invest.calculate_dividend_payout",
    "description": "Calculate the total dividend payout for a specific number of shares with known dividend per share.",
    "parameters": {
      "type": "dict",
      "properties": {
        "shares": {
          "type": "integer",
          "description": "Number of shares to calculate dividends."
        },
        "dividend_per_share": {
          "type": "float",
          "description": "Known dividend per share."
        }
      },
      "required": [
        "shares",
        "dividend_per_share"
      ]
    }
  },
  {
    "name": "bank.get_transaction_history",
    "description": "Retrieve transaction history for a specific bank account over a specified time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "account": {
          "type": "string",
          "description": "The account number for which transaction history is required."
        },
        "days": {
          "type": "integer",
          "description": "Number of past days for which to retrieve the transaction history."
        }
      },
      "required": [
        "account",
        "days"
      ]
    }
  },
  {
    "name": "bank.calculate_balance",
    "description": "Calculate the balance of a specified bank account based on the transactions.",
    "parameters": {
      "type": "dict",
      "properties": {
        "account": {
          "type": "string",
          "description": "The account number for which balance is to be calculated."
        },
        "transactions": {
          "type": "array",
          "description": "Transaction array Default is empty array.",
          "items": {
            "type": "dict",
            "properties": {
              "amount": {
                "type": "float",
                "description": "The amount of the transaction. Default 0"
              },
              "type": {
                "type": "string",
                "enum": [
                  "credit",
                  "debit"
                ],
                "description": "Type of the transaction. Default is credit.",
                "default": "credit"
              }
            }
          },
          "default": []
        },
        "starting_balance": {
          "type": "float",
          "description": "The starting balance of the account, if known. Default 0.0"
        }
      },
      "required": [
        "account"
      ]
    }
  },
  {
    "name": "bank_account.transfer",
    "description": "Transfer a given amount from one account to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "from_account": {
          "type": "string",
          "description": "The account to transfer from."
        },
        "to_account": {
          "type": "string",
          "description": "The account to transfer to."
        },
        "amount": {
          "type": "float",
          "description": "The amount to be transferred."
        }
      },
      "required": [
        "from_account",
        "to_account",
        "amount"
      ]
    }
  },
  {
    "name": "bank_account.calculate_interest",
    "description": "Calculate the amount of interest accrued over a given time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principal": {
          "type": "float",
          "description": "The initial amount of money."
        },
        "rate": {
          "type": "float",
          "description": "The annual interest rate as a decimal."
        },
        "time": {
          "type": "integer",
          "description": "The number of years the money is invested for."
        }
      },
      "required": [
        "principal",
        "rate",
        "time"
      ]
    }
  },
  {
    "name": "criminal_record.get_offense_nature",
    "description": "Get details about the nature of offenses committed by a criminal.",
    "parameters": {
      "type": "dict",
      "properties": {
        "criminal_name": {
          "type": "string",
          "description": "Name of the criminal."
        },
        "optional_param": {
          "type": "boolean",
          "description": "Optionally retrieve additional details, by default this is set to false."
        }
      },
      "required": [
        "criminal_name"
      ]
    }
  },
  {
    "name": "criminal_record.get_status",
    "description": "Find the conviction status of a criminal in a specified region.",
    "parameters": {
      "type": "dict",
      "properties": {
        "criminal_name": {
          "type": "string",
          "description": "Name of the criminal."
        },
        "region": {
          "type": "string",
          "description": "Region where criminal record is to be searched."
        }
      },
      "required": [
        "criminal_name",
        "region"
      ]
    }
  },
  {
    "name": "briefs.display_cases",
    "description": "Display briefs of the cases",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of unique identifiers for cases."
        }
      },
      "required": [
        "case_id"
      ]
    }
  },
  {
    "name": "court_records.search_cases",
    "description": "Search for court cases based on specific criteria.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where the court is located"
        },
        "query": {
          "type": "string",
          "description": "Search string to look for specific cases"
        },
        "year": {
          "type": "integer",
          "description": "Year the case was filed"
        },
        "limit": {
          "type": "integer",
          "description": "Limits the number of results returned",
          "default": 5
        }
      },
      "required": [
        "location",
        "query",
        "year"
      ]
    }
  },
  {
    "name": "movie_ratings.get_movie",
    "description": "Get a movie by its name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "movie_name": {
          "type": "string",
          "description": "The name of the movie to be retrieved"
        }
      },
      "required": [
        "movie_name"
      ]
    }
  },
  {
    "name": "legal_case.get_summary",
    "description": "Get a summary of a legal case",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_id": {
          "type": "string",
          "description": "The unique ID of the case to summarise"
        },
        "summary_type": {
          "type": "string",
          "description": "Type of the summary to get, e.g., brief, full",
          "default": "brief"
        }
      },
      "required": [
        "case_id"
      ],
      "optional": [
        "summary_type"
      ]
    }
  },
  {
    "name": "legal_case.find_parties",
    "description": "Locate legal cases involving a specified party in a particular city",
    "parameters": {
      "type": "dict",
      "properties": {
        "party_name": {
          "type": "string",
          "description": "The name of the party involved in the case"
        },
        "city": {
          "type": "string",
          "description": "The city where the case was heard"
        }
      },
      "required": [
        "party_name",
        "city"
      ]
    }
  },
  {
    "name": "lawsuit.fetch_details",
    "description": "Fetch the details of a lawsuit for a specific company.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The company involved in the lawsuit."
        }
      },
      "required": [
        "company_name"
      ]
    }
  },
  {
    "name": "lawsuit.judge",
    "description": "Fetch the judge handling a lawsuit for a specific company.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The company involved in the lawsuit."
        },
        "lawsuit_id": {
          "type": "integer",
          "description": "The ID number of the lawsuit. Default to 123",
          "default": 123
        }
      },
      "required": [
        "company_name"
      ]
    }
  },
  {
    "name": "weather_forecast_precipitation",
    "description": "Retrieve a precipitation forecast for a specific location for a certain number of days.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the precipitation forecast for."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for the forecast."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "weather_forecast_humidity",
    "description": "Retrieve a humidity forecast for a specific location for a certain number of days.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the humidity forecast for."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for the forecast."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "weather_forecast_temperature",
    "description": "Retrieve a temperature forecast for a specific location for a certain number of days.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the temperature forecast for."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for the forecast."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "supermarket.find_in_city",
    "description": "Find all supermarkets in a given city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city to locate supermarkets in."
        },
        "state": {
          "type": "string",
          "description": "The state to further narrow down the search."
        },
        "openNow": {
          "type": "boolean",
          "description": "If true, returns only supermarkets that are currently open. Default to true"
        }
      },
      "required": [
        "city",
        "state"
      ]
    }
  },
  {
    "name": "sightseeing.popular_in_city",
    "description": "Find the most popular sightseeing place in a given city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city to find sightseeing in."
        },
        "state": {
          "type": "string",
          "description": "The state to further narrow down the search."
        },
        "kidsFriendly": {
          "type": "boolean",
          "description": "If true, returns only kids friendly sightseeing places.Default to true"
        }
      },
      "required": [
        "city",
        "state"
      ]
    }
  },
  {
    "name": "get_current_time",
    "description": "Fetches current time for a given location",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location for which to fetch current time"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "translate_text",
    "description": "Translates a given text from one language to another",
    "parameters": {
      "type": "dict",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text that needs to be translated"
        },
        "from_lang": {
          "type": "string",
          "description": "The source language from which to translate"
        },
        "to_lang": {
          "type": "string",
          "description": "The target language to which to translate"
        }
      },
      "required": [
        "text",
        "from_lang",
        "to_lang"
      ]
    }
  },
  {
    "name": "image_processing.object_identification",
    "description": "Identify objects in a given image.",
    "parameters": {
      "type": "dict",
      "properties": {
        "image_url": {
          "type": "string",
          "description": "The URL of the image."
        }
      },
      "required": [
        "image_url"
      ]
    }
  },
  {
    "name": "text_analysis.sentiment_analysis",
    "description": "Analyze the sentiment of a given text.",
    "parameters": {
      "type": "dict",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text to be analyzed."
        }
      },
      "required": [
        "text"
      ]
    }
  },
  {
    "name": "euro_history.treaty_info",
    "description": "Retrieve specific information about a signed European treaty.",
    "parameters": {
      "type": "dict",
      "properties": {
        "treaty_name": {
          "type": "string",
          "description": "The name of the treaty."
        },
        "info_requested": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "signatories",
              "ratification date",
              "clauses",
              "overview"
            ]
          },
          "description": "Specific aspects of the treaty for which to return information."
        }
      },
      "required": [
        "treaty_name",
        "info_requested"
      ]
    }
  },
  {
    "name": "euro_history.battle_details",
    "description": "Retrieve detailed information about a specific European historical battle.",
    "parameters": {
      "type": "dict",
      "properties": {
        "battle_name": {
          "type": "string",
          "description": "The name of the historical battle."
        },
        "specific_info": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "overview",
              "causalities",
              "date"
            ]
          },
          "description": "The specific types of information to return about the battle."
        }
      },
      "required": [
        "battle_name",
        "specific_info"
      ]
    }
  },
  {
    "name": "history.get_timeline",
    "description": "Retrieve the timeline for a specific historical event",
    "parameters": {
      "type": "dict",
      "properties": {
        "event": {
          "type": "string",
          "description": "The historical event you want the timeline for."
        },
        "region": {
          "type": "string",
          "description": "Region of the event.",
          "default": "Europe"
        }
      },
      "required": [
        "event"
      ]
    }
  },
  {
    "name": "history.get_important_figures",
    "description": "Retrieve array of important figures involved during a specific historical event.",
    "parameters": {
      "type": "dict",
      "properties": {
        "event": {
          "type": "string",
          "description": "The historical event for which you want the array of important figures."
        },
        "number": {
          "type": "integer",
          "description": "Number of top figures you want. Default to 1",
          "default": 1
        }
      },
      "required": [
        "event"
      ]
    }
  },
  {
    "name": "us_history.gdp",
    "description": "Retrieves the Gross Domestic Product of the USA for a specific year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "year": {
          "type": "integer",
          "description": "The year for which to retrieve GDP data."
        }
      },
      "required": [
        "year"
      ]
    }
  },
  {
    "name": "us_history.life_expectancy",
    "description": "Retrieves the average life expectancy of the USA for a specific year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "year": {
          "type": "integer",
          "description": "The year for which to retrieve life expectancy."
        }
      },
      "required": [
        "year"
      ]
    }
  },
  {
    "name": "scientist_info.get_birthdate",
    "description": "Retrieve the birthdate of a specific scientist.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the scientist."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "scientist_info.get_famous_discovery",
    "description": "Retrieve the most famous discovery made by a specific scientist.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the scientist."
        },
        "discovery_order": {
          "type": "integer",
          "description": "The order of discoveries if the scientist made multiple discoveries. If not provided, the first (or most famous) discovery will be returned.",
          "default": 1
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "scienceFacts.getCharge",
    "description": "Fetch the electric charge of an atomic particle",
    "parameters": {
      "type": "dict",
      "properties": {
        "particle": {
          "type": "string",
          "description": "The atomic particle. e.g. Electron, Proton"
        },
        "unit": {
          "type": "string",
          "description": "Unit to retrieve electric charge. For example, 'coulombs' etc."
        }
      },
      "required": [
        "particle",
        "unit"
      ]
    }
  },
  {
    "name": "scienceFacts.getWeight",
    "description": "Fetch the atomic weight of an atomic particle",
    "parameters": {
      "type": "dict",
      "properties": {
        "particle": {
          "type": "string",
          "description": "The atomic particle. e.g. Electron, Proton"
        },
        "unit": {
          "type": "string",
          "description": "Unit to retrieve weight. For example, 'kg', 'pound', 'amu' etc."
        }
      },
      "required": [
        "particle",
        "unit"
      ]
    }
  },
  {
    "name": "scienceFacts.getDiameter",
    "description": "Fetch the diameter of an atomic particle",
    "parameters": {
      "type": "dict",
      "properties": {
        "particle": {
          "type": "string",
          "description": "The atomic particle. e.g. Electron, Proton"
        },
        "unit": {
          "type": "string",
          "description": "Unit to retrieve diameter. For example, 'meter', 'cm', 'femtometers' etc."
        }
      },
      "required": [
        "particle",
        "unit"
      ]
    }
  },
  {
    "name": "painting.create",
    "description": "Creates a new painting with specified parameters",
    "parameters": {
      "type": "dict",
      "properties": {
        "shape": {
          "type": "string",
          "description": "Shape of the painting to be created."
        },
        "background_color": {
          "type": "string",
          "description": "Background color of the painting."
        },
        "dimensions": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Dimensions of the painting in inches."
        }
      },
      "required": [
        "shape",
        "background_color",
        "dimensions"
      ]
    }
  },
  {
    "name": "display.set_screen_brightness",
    "description": "Sets the screen brightness for viewing the painting",
    "parameters": {
      "type": "dict",
      "properties": {
        "percentage": {
          "type": "integer",
          "description": "Screen brightness level in percentage."
        },
        "duration": {
          "type": "integer",
          "description": "Duration to maintain the brightness level in seconds."
        }
      },
      "required": [
        "percentage",
        "duration"
      ]
    }
  },
  {
    "name": "painting.display",
    "description": "Displays a created painting for a specific amount of time",
    "parameters": {
      "type": "dict",
      "properties": {
        "time": {
          "type": "integer",
          "description": "Time in seconds the painting will be displayed for."
        }
      },
      "required": [
        "time"
      ]
    }
  },
  {
    "name": "book.find",
    "description": "Find a book in a library based on specific criteria like author, genre or publication year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "library": {
          "type": "string",
          "description": "The name of the library."
        },
        "author": {
          "type": "string",
          "description": "Author of the book."
        },
        "genre": {
          "type": "string",
          "default": "Sci-Fi",
          "description": "Genre of the book."
        },
        "year": {
          "type": "integer",
          "default": 2000,
          "description": "Year of publication."
        }
      },
      "required": [
        "library",
        "author"
      ]
    }
  },
  {
    "name": "historical_landmark.find",
    "description": "Find historical landmarks based on specific criteria like location or era.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location of the landmark."
        },
        "era": {
          "type": "string",
          "default": "Renaissance",
          "description": "Era of the landmark. E.g. Middle Ages, Renaissance"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "artwork.find",
    "description": "Locate artwork in museums based on specific criteria like type of material, artist, or era.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum": {
          "type": "string",
          "description": "The name of the museum, e.g. Modern Arts Museum, New York"
        },
        "type": {
          "type": "string",
          "description": "Type of the artwork. E.g. Painting, Sculpture"
        },
        "material": {
          "type": "string",
          "description": "Material of the artwork if it's a sculpture. E.g. Bronze, Marble",
          "default": ""
        },
        "artist": {
          "type": "string",
          "description": "Name of the artist.",
          "default": ""
        }
      },
      "required": [
        "museum",
        "type"
      ]
    }
  },
  {
    "name": "get_sculpture_details",
    "description": "Retrieves details of a sculpture, such as its material and size, from a museum database.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum_location": {
          "type": "string",
          "description": "Location of the museum housing the sculpture."
        },
        "sculpture_id": {
          "type": "integer",
          "description": "Database ID of the sculpture."
        }
      },
      "required": [
        "museum_location",
        "sculpture_id"
      ]
    }
  },
  {
    "name": "get_artwork_price",
    "description": "Retrieves the price of a sculpture based on size and material.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum_location": {
          "type": "string",
          "description": "Location of the museum housing the sculpture."
        },
        "sculpture_material": {
          "type": "string",
          "description": "Material of the sculpture."
        },
        "sculpture_size": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Dimensions of the sculpture."
        }
      },
      "required": [
        "museum_location",
        "sculpture_material",
        "sculpture_size"
      ]
    }
  },
  {
    "name": "office_designer.design",
    "description": "Design an office space based on specific requirements",
    "parameters": {
      "type": "dict",
      "properties": {
        "rooms": {
          "type": "integer",
          "description": "Number of rooms in the office."
        },
        "meeting_room": {
          "type": "string",
          "enum": [
            "small",
            "medium",
            "large"
          ],
          "description": "Size of the meeting room"
        }
      },
      "required": [
        "rooms",
        "meeting_room"
      ]
    }
  },
  {
    "name": "house_designer.design",
    "description": "Design a house based on specific criteria",
    "parameters": {
      "type": "dict",
      "properties": {
        "bedrooms": {
          "type": "integer",
          "description": "Number of bedrooms desired."
        },
        "bathrooms": {
          "type": "integer",
          "description": "Number of bathrooms needed."
        },
        "garden": {
          "type": "boolean",
          "description": "Does the house need a garden? Default is False"
        }
      },
      "required": [
        "bedrooms",
        "bathrooms"
      ]
    }
  },
  {
    "name": "calcVolume.cuboid",
    "description": "Calculates the volume of a cuboid.",
    "parameters": {
      "type": "dict",
      "properties": {
        "height": {
          "type": "float",
          "description": "The height of the cuboid."
        },
        "width": {
          "type": "float",
          "description": "The width of the cuboid."
        },
        "depth": {
          "type": "float",
          "description": "The depth of the cuboid."
        }
      },
      "required": [
        "height",
        "width",
        "depth"
      ]
    }
  },
  {
    "name": "calcVolume.sphere",
    "description": "Calculates the volume of a sphere.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "float",
          "description": "The radius of the sphere."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "museum.get_hours",
    "description": "Retrieve the operational hours of a specified museum.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum_name": {
          "type": "string",
          "description": "The name of the museum."
        }
      },
      "required": [
        "museum_name"
      ]
    }
  },
  {
    "name": "location.get_travel_time",
    "description": "Retrieve the estimated travel time from current location to a specific destination.",
    "parameters": {
      "type": "dict",
      "properties": {
        "destination": {
          "type": "string",
          "description": "The destination location."
        },
        "mode": {
          "type": "string",
          "enum": [
            "Driving",
            "Biking",
            "Walking"
          ],
          "description": "Mode of travel.",
          "default": "Driving"
        }
      },
      "required": [
        "destination"
      ]
    }
  },
  {
    "name": "museum.get_waiting_time",
    "description": "Retrieve the estimated waiting time at a specific museum.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum_name": {
          "type": "string",
          "description": "The name of the museum."
        },
        "day": {
          "type": "string",
          "enum": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ],
          "description": "Day of the week.",
          "default": "Monday"
        }
      },
      "required": [
        "museum_name"
      ]
    }
  },
  {
    "name": "lowest_price",
    "description": "Returns the lowest price for a particular product within a given city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city where the product will be searched."
        },
        "product": {
          "type": "string",
          "description": "The product for which the lowest price will be searched."
        }
      },
      "required": [
        "city",
        "product"
      ]
    }
  },
  {
    "name": "average_price",
    "description": "Returns the average price for a particular product within a given city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city where the product will be searched."
        },
        "product": {
          "type": "string",
          "description": "The product for which the average price will be searched."
        }
      },
      "required": [
        "city",
        "product"
      ]
    }
  },
  {
    "name": "store_count",
    "description": "Returns the number of stores that carry a particular product within a given city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city where the product will be searched."
        },
        "product": {
          "type": "string",
          "description": "The product for which the number of stores will be searched."
        }
      },
      "required": [
        "city",
        "product"
      ]
    }
  },
  {
    "name": "product_search",
    "description": "Searches a particular product within a given city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city where the product will be searched."
        },
        "product": {
          "type": "string",
          "description": "The product that will be searched."
        }
      },
      "required": [
        "city",
        "product"
      ]
    }
  },
  {
    "name": "frequency_to_wavelength",
    "description": "Converts the frequency of a musical note to its wavelength.",
    "parameters": {
      "type": "dict",
      "properties": {
        "frequency": {
          "type": "float",
          "description": "The frequency in hertz of the musical note."
        }
      },
      "required": [
        "frequency"
      ]
    }
  },
  {
    "name": "note_conversion.indian",
    "description": "Converts a note in Western music to Indian classical music.",
    "parameters": {
      "type": "dict",
      "properties": {
        "note": {
          "type": "string",
          "description": "The note in Western musical scale."
        }
      },
      "required": [
        "note"
      ]
    }
  },
  {
    "name": "melody_generator",
    "description": "Create a melody based on specified notes.",
    "parameters": {
      "type": "dict",
      "properties": {
        "note_sequence": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The sequence of notes for the melody."
        },
        "instrument": {
          "type": "string",
          "default": "Bass",
          "description": "The instrument to play the melody, e.g. Bass."
        }
      },
      "required": [
        "note_sequence"
      ]
    }
  },
  {
    "name": "beat_generator",
    "description": "Generate a beat based on specified genre and beats per minute.",
    "parameters": {
      "type": "dict",
      "properties": {
        "genre": {
          "type": "string",
          "description": "The genre of the beat, e.g. Hip Hop."
        },
        "bpm": {
          "type": "integer",
          "description": "The beats per minute of the beat."
        },
        "scale": {
          "type": "string",
          "description": "The scale for the beat, e.g. Major.",
          "default": "Major"
        }
      },
      "required": [
        "genre",
        "bpm"
      ]
    }
  },
  {
    "name": "sport_analysis.last_game_performance",
    "description": "Analyzes the team's performance in their most recent game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The sports team that needs to be analyzed."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "field goal %",
              "free throw %"
            ]
          },
          "description": "Key performance indicators that you want for the analysis"
        }
      },
      "required": [
        "team",
        "details"
      ]
    }
  },
  {
    "name": "sport_analysis.compare_ppg",
    "description": "Compares a team's average points per game in two different seasons.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The sports team that needs to be compared."
        },
        "seasons": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The seasons that you want to compare the ppg."
        }
      },
      "required": [
        "team",
        "seasons"
      ]
    }
  },
  {
    "name": "get_team_info",
    "description": "Retrieve information for a specific team, such as championships won.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The name of the team."
        },
        "info": {
          "type": "string",
          "description": "The information sought. E.g., 'championships_won'."
        }
      },
      "required": [
        "team",
        "info"
      ]
    }
  },
  {
    "name": "get_player_record",
    "description": "Retrieve record stats for a specific player and stat type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player": {
          "type": "string",
          "description": "The name of the player."
        },
        "stat": {
          "type": "string",
          "description": "The type of statistic. E.g., 'highest_scoring_game', 'total_championships'."
        }
      },
      "required": [
        "player",
        "stat"
      ]
    }
  },
  {
    "name": "chess.play",
    "description": "Makes moves in a chess game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "moves": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of moves to play in the game."
        }
      },
      "required": [
        "moves"
      ]
    }
  },
  {
    "name": "game_of_life.play",
    "description": "Runs a round of game of life based on provided board.",
    "parameters": {
      "type": "dict",
      "properties": {
        "rounds": {
          "type": "integer",
          "description": "Number of rounds to play."
        },
        "start_board": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Starting board of game, leave empty for random starting point."
        }
      },
      "required": [
        "rounds",
        "start_board"
      ]
    }
  },
  {
    "name": "card_game_search",
    "description": "Locate a card game based on a specific theme.",
    "parameters": {
      "type": "dict",
      "properties": {
        "theme": {
          "type": "string",
          "description": "The theme for the card game."
        }
      },
      "required": [
        "theme"
      ]
    }
  },
  {
    "name": "board_game_search",
    "description": "Locate a board game based on specific criteria.",
    "parameters": {
      "type": "dict",
      "properties": {
        "complexity": {
          "type": "float",
          "description": "The maximum complexity rating of the board game (lower is simpler)."
        },
        "player_count": {
          "type": "integer",
          "description": "The minimum player count for the board game."
        }
      },
      "required": [
        "complexity",
        "player_count"
      ]
    }
  },
  {
    "name": "trivia_game_search",
    "description": "Locate a trivia game based on play duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "duration": {
          "type": "float",
          "description": "The maximum playing duration for the trivia game in minutes."
        }
      },
      "required": [
        "duration"
      ]
    }
  },
  {
    "name": "BattleReignGameAPI.update_player_equipment",
    "description": "Modify the player's equipment level for specified attributes",
    "parameters": {
      "type": "dict",
      "properties": {
        "attribute": {
          "type": "string",
          "description": "The attribute of the equipment to modify."
        },
        "level": {
          "type": "integer",
          "description": "The level to modify the attribute to."
        },
        "playerID": {
          "type": "integer",
          "description": "Player ID of the player. Default to 123",
          "default": 123
        }
      },
      "required": [
        "attribute",
        "level"
      ]
    }
  },
  {
    "name": "GameGuideAPI.search_guide",
    "description": "Search for game guides given specific conditions and preferences",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "Name of the game."
        },
        "condition": {
          "type": "string",
          "description": "Specific game conditions. (eg: 'snowy weather', 'hard mode').",
          "default": ""
        },
        "type": {
          "type": "string",
          "description": "Specific type of guide. (eg: 'strategy', 'walkthrough')",
          "default": ""
        }
      },
      "required": [
        "game"
      ]
    }
  },
  {
    "name": "recipe_prep_time",
    "description": "Calculate the estimated preparation and cooking time for a specified recipe.",
    "parameters": {
      "type": "dict",
      "properties": {
        "recipe": {
          "type": "string",
          "description": "Name of the recipe to calculate time for."
        }
      },
      "required": [
        "recipe"
      ]
    }
  },
  {
    "name": "recipe_nutrition_info",
    "description": "Provide detailed nutritional information for a specified recipe.",
    "parameters": {
      "type": "dict",
      "properties": {
        "recipe": {
          "type": "string",
          "description": "Name of the recipe to fetch nutrition info for."
        }
      },
      "required": [
        "recipe"
      ]
    }
  },
  {
    "name": "recipe_search",
    "description": "Search for a recipe based on a particular ingredient or dietary requirement.",
    "parameters": {
      "type": "dict",
      "properties": {
        "ingredient": {
          "type": "string",
          "description": "The ingredient that you want to have in the recipe."
        },
        "dietary_requirements": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "gluten_free",
              "dairy_free",
              "vegetarian",
              "vegan"
            ]
          },
          "description": "Dietary requirements in the recipe."
        },
        "isHomemade": {
          "type": "boolean",
          "description": "If true, returns homemade recipe; otherwise, return not homemade recipe."
        }
      },
      "required": [
        "ingredient",
        "dietary_requirements",
        "isHomemade"
      ]
    }
  },
  {
    "name": "time_zones.get_current_time",
    "description": "Retrieve current time for the specified location",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the current time for."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "time_zones.get_time_difference",
    "description": "Retrieve the time difference between two cities",
    "parameters": {
      "type": "dict",
      "properties": {
        "city_1": {
          "type": "string",
          "description": "First city for calculating the time difference."
        },
        "city_2": {
          "type": "string",
          "description": "Second city for calculating the time difference."
        }
      },
      "required": [
        "city_1",
        "city_2"
      ]
    }
  },
  {
    "name": "hotel.find",
    "description": "Search for hotels given the location, minimum stars and specific amenities.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where you want to find the hotel"
        },
        "stars": {
          "type": "integer",
          "description": "Minimum number of stars the hotel should have. Default 1"
        },
        "amenities": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Preferred amenities in hotel. Here are a list of possible option : 'Free WiFi', 'Breakfast Included', 'Gym', 'Free Parking'",
            "enum": [
              "Free WiFi",
              "Breakfast Included",
              "Gym",
              "Free Parking"
            ]
          },
          "description": "List of preferred amenities in hotel. Default to empty array"
        }
      },
      "required": [
        "location",
        "stars"
      ]
    }
  },
  {
    "name": "flight.search",
    "description": "Search for flights given the origin, destination, date, and number of passengers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "origin": {
          "type": "string",
          "description": "The origin of the flight"
        },
        "destination": {
          "type": "string",
          "description": "The destination of the flight"
        },
        "date": {
          "type": "any",
          "description": "The date of the flight. Default ''"
        },
        "passengers": {
          "type": "integer",
          "description": "The number of passengers",
          "default": 1
        }
      },
      "required": [
        "origin",
        "destination"
      ]
    }
  },
  {
    "name": "circle_properties.get",
    "description": "Retrieve the dimensions, such as area and circumference, of a circle if radius is given.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "float",
          "description": "The length of radius of the circle."
        },
        "get_area": {
          "type": "boolean",
          "description": "A flag to determine whether to calculate the area of circle. Default is true."
        },
        "get_circumference": {
          "type": "boolean",
          "description": "A flag to determine whether to calculate the circumference of circle. Default is true."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "triangle_properties.get",
    "description": "Retrieve the dimensions, such as area and perimeter, of a triangle if lengths of three sides are given.",
    "parameters": {
      "type": "dict",
      "properties": {
        "side1": {
          "type": "float",
          "description": "The length of first side of the triangle."
        },
        "side2": {
          "type": "float",
          "description": "The length of second side of the triangle."
        },
        "side3": {
          "type": "float",
          "description": "The length of third side of the triangle."
        },
        "get_area": {
          "type": "boolean",
          "description": "A flag to determine whether to calculate the area of triangle. Default is true."
        },
        "get_perimeter": {
          "type": "boolean",
          "description": "A flag to determine whether to calculate the perimeter of triangle. Default is true."
        },
        "get_angles": {
          "type": "boolean",
          "description": "A flag to determine whether to calculate the internal angles of triangle. Default is true."
        }
      },
      "required": [
        "side1",
        "side2",
        "side3"
      ]
    }
  },
  {
    "name": "math.triangle_area_heron",
    "description": "Calculates the area of a triangle using Heron's formula, given the lengths of its three sides.",
    "parameters": {
      "type": "dict",
      "properties": {
        "side1": {
          "type": "float",
          "description": "Length of the first side of the triangle."
        },
        "side2": {
          "type": "float",
          "description": "Length of the second side of the triangle."
        },
        "side3": {
          "type": "float",
          "description": "Length of the third side of the triangle."
        }
      },
      "required": [
        "side1",
        "side2",
        "side3"
      ]
    }
  },
  {
    "name": "angleToXAxis.calculate",
    "description": "Calculate the angle between two points with respect to x-axis.",
    "parameters": {
      "type": "dict",
      "properties": {
        "pointA": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Coordinates for Point A."
        },
        "pointB": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Coordinates for Point B."
        },
        "rounding": {
          "type": "integer",
          "description": "Optional: The number of decimals to round off the result.",
          "default": 2
        }
      },
      "required": [
        "pointA",
        "pointB"
      ]
    }
  },
  {
    "name": "EuclideanDistance.calculate",
    "description": "Calculate the Euclidean distance between two points.",
    "parameters": {
      "type": "dict",
      "properties": {
        "pointA": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Coordinates for Point A."
        },
        "pointB": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Coordinates for Point B."
        },
        "rounding": {
          "type": "integer",
          "description": "Optional: The number of decimals to round off the result.",
          "default": 2
        }
      },
      "required": [
        "pointA",
        "pointB"
      ]
    }
  },
  {
    "name": "kinematics.calculate_displacement",
    "description": "Calculate displacement based on initial speed, acceleration, and time interval for a motion along a straight line.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_speed": {
          "type": "float",
          "description": "The initial speed of the moving object in m/s."
        },
        "acceleration": {
          "type": "float",
          "description": "The rate of change of speed, m/s^2."
        },
        "time": {
          "type": "float",
          "description": "The time interval during which the acceleration is applied, in seconds."
        },
        "rounding": {
          "type": "integer",
          "description": "The number of decimals to round off the result (optional).",
          "default": 2
        }
      },
      "required": [
        "initial_speed",
        "acceleration",
        "time"
      ]
    }
  },
  {
    "name": "math.roots.polynomial",
    "description": "Calculate the roots of a polynomial equation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coefficients": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "Array of coefficients of the polynomial equation starting from highest degree term."
        },
        "degree": {
          "type": "float",
          "description": "Degree of the polynomial equation.",
          "default": 4
        }
      },
      "required": [
        "coefficients"
      ]
    }
  },
  {
    "name": "math_roots.quadratic",
    "description": "Calculate the roots of a quadratic equation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "a": {
          "type": "float",
          "description": "Coefficient of the second-degree term."
        },
        "b": {
          "type": "float",
          "description": "Coefficient of the first-degree term."
        },
        "c": {
          "type": "float",
          "description": "Constant term."
        }
      },
      "required": [
        "a",
        "b",
        "c"
      ]
    }
  },
  {
    "name": "corporate_finance.calculate_YOY_growth_rate",
    "description": "Calculate the year over year (YOY) growth rate for a company.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company for which to calculate the YOY growth rate."
        },
        "year1": {
          "type": "integer",
          "description": "The initial year."
        },
        "year1_revenue": {
          "type": "float",
          "description": "The revenue for the initial year."
        },
        "year2": {
          "type": "integer",
          "description": "The subsequent year."
        },
        "year2_revenue": {
          "type": "float",
          "description": "The revenue for the subsequent year."
        }
      },
      "required": [
        "company_name",
        "year1",
        "year1_revenue",
        "year2",
        "year2_revenue"
      ]
    }
  },
  {
    "name": "finance.inflation_adjustment",
    "description": "Adjusts a sum of money for inflation based on the consumer price index (CPI).",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_sum": {
          "type": "float",
          "description": "The initial sum of money."
        },
        "years": {
          "type": "integer",
          "description": "The number of years over which inflation is calculated."
        },
        "inflation_rate": {
          "type": "float",
          "description": "The annual rate of inflation."
        }
      },
      "required": [
        "initial_sum",
        "years",
        "inflation_rate"
      ]
    }
  },
  {
    "name": "finance.property_depreciation",
    "description": "Calculates the depreciated value of a property given its initial cost, depreciation rate, and the number of years.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_cost": {
          "type": "float",
          "description": "The initial cost of the property."
        },
        "depreciation_rate": {
          "type": "float",
          "description": "The annual depreciation rate in percentage."
        },
        "years": {
          "type": "integer",
          "description": "The number of years for which to calculate the depreciation."
        },
        "monthly": {
          "type": "boolean",
          "description": "If set to true, it will calculate monthly depreciation instead of annually. (optional)",
          "default": false
        }
      },
      "required": [
        "initial_cost",
        "depreciation_rate",
        "years"
      ]
    }
  },
  {
    "name": "windFarm.potential",
    "description": "Estimate the energy output of a wind farm given its location and turbine count for a particular month.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coordinates": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "The geographic coordinates of the location of the wind farm."
        },
        "turbineCount": {
          "type": "float",
          "description": "The total number of wind turbines at the location."
        },
        "month": {
          "type": "string",
          "description": "The month for which to calculate the potential energy output.",
          "default": ""
        }
      },
      "required": [
        "coordinates",
        "turbineCount"
      ]
    }
  },
  {
    "name": "solarFarm.potential",
    "description": "Estimate the energy output of a solar farm given its location and panel area for a particular month.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coordinates": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "The geographic coordinates of the location of the solar farm."
        },
        "panelArea": {
          "type": "float",
          "description": "The total solar panel area in square feet at the location."
        },
        "month": {
          "type": "string",
          "description": "The month for which to calculate the potential energy output.",
          "default": ""
        }
      },
      "required": [
        "coordinates",
        "panelArea"
      ]
    }
  },
  {
    "name": "generate_sound_wave",
    "description": "This function is for generating a sinusoidal sound wave file of a certain frequency for a specific duration and save it to a WAV file.",
    "parameters": {
      "type": "dict",
      "properties": {
        "frequency": {
          "type": "float",
          "description": "The frequency of the sound wave in Hz."
        },
        "duration": {
          "type": "integer",
          "description": "The duration of the sound in seconds."
        },
        "wave_type": {
          "type": "string",
          "enum": [
            "sine",
            "square",
            "sawtooth"
          ],
          "description": "The waveform to be used to generate the sound.",
          "default": "sine"
        }
      },
      "required": [
        "frequency",
        "duration"
      ]
    }
  },
  {
    "name": "basketball.game_stats.get",
    "description": "Get the detailed statistical data from a specific basketball game",
    "parameters": {
      "type": "dict",
      "properties": {
        "team1": {
          "type": "string",
          "description": "One of the competing teams in the game."
        },
        "team2": {
          "type": "string",
          "description": "One of the competing teams in the game."
        },
        "date": {
          "type": "string",
          "description": "The date when the game occurred."
        },
        "stats_fields": {
          "type": "array",
          "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, turnovers.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "team1",
        "team2",
        "date",
        "stats_fields"
      ]
    }
  },
  {
    "name": "video_games.store_currency",
    "description": "Fetches the currency used in a specific region in a gaming platform store.",
    "parameters": {
      "type": "dict",
      "properties": {
        "platform": {
          "type": "string",
          "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"
        },
        "region": {
          "type": "string",
          "description": "The region e.g. United States, United Kingdom, Japan. Default United States",
          "optional": "True"
        }
      },
      "required": [
        "platform"
      ]
    }
  },
  {
    "name": "video_games.store_price",
    "description": "Fetches the selling price of a specified game in a particular gaming platform store and in a specific region.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game_title": {
          "type": "string",
          "description": "The title of the video game"
        },
        "platform": {
          "type": "string",
          "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"
        },
        "region": {
          "type": "string",
          "description": "The region e.g. United States, United Kingdom, Japan. Default United States",
          "optional": "True"
        }
      },
      "required": [
        "game_title",
        "platform"
      ]
    }
  },
  {
    "name": "game_scores.get",
    "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The name of the game."
        },
        "platform": {
          "type": "string",
          "description": "The gaming platform e.g. Xbox, Playstation, PC"
        },
        "level": {
          "type": "integer",
          "description": "The level of the game for which you want to retrieve the scores."
        },
        "player": {
          "type": "string",
          "description": "The name of the player for whom you want to retrieve scores.",
          "default": ""
        }
      },
      "required": [
        "game",
        "platform",
        "level"
      ]
    }
  },
  {
    "name": "game_rewards.get",
    "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The name of the game."
        },
        "platform": {
          "type": "string",
          "description": "The gaming platform e.g. Xbox, Playstation, PC"
        },
        "mission": {
          "type": "string",
          "description": "The mission for which you want to know the rewards.",
          "default": ""
        },
        "trophy": {
          "type": "string",
          "description": "The trophy level for which you want to know the rewards.",
          "default": ""
        }
      },
      "required": [
        "game",
        "platform"
      ]
    }
  },
  {
    "name": "maps.route_times",
    "description": "Estimates the time it will take to travel from one location to another by a specific mode of transportation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "route": {
          "type": "string",
          "description": "The string representation of the route.  Format is location 1 to location 2"
        },
        "mode": {
          "type": "string",
          "description": "The mode of transportation (walk, bike, transit, drive).",
          "default": "walk"
        }
      },
      "required": [
        "route"
      ]
    }
  },
  {
    "name": "geometry.calculate_cone_volume",
    "description": "Calculate the volume of a cone given the radius and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "float",
          "description": "Radius of the cone base."
        },
        "height": {
          "type": "float",
          "description": "Height of the cone."
        },
        "round_off": {
          "type": "integer",
          "description": "Number of decimal places to round off the answer.",
          "default": 2
        }
      },
      "required": [
        "radius",
        "height"
      ]
    }
  },
  {
    "name": "math.sqrt",
    "description": "Calculates the square root of a number.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num": {
          "type": "float",
          "description": "The number."
        },
        "accuracy": {
          "type": "float",
          "description": "The number of decimal places in the result.",
          "default": 2.0
        }
      },
      "required": [
        "num"
      ]
    }
  },
  {
    "name": "calculate_lcm",
    "description": "Calculate the least common multiple (lcm) between two integers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num1": {
          "type": "integer",
          "description": "First number to calculate lcm for."
        },
        "num2": {
          "type": "integer",
          "description": "Second number to calculate lcm for."
        },
        "method": {
          "type": "string",
          "description": "The specific method to use in the calculation. Supported values: 'standard', 'reduced'",
          "default": "standard"
        }
      },
      "required": [
        "num1",
        "num2"
      ]
    }
  },
  {
    "name": "calculate_gcd",
    "description": "Calculate the greatest common divisor (gcd) between two integers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num1": {
          "type": "integer",
          "description": "First number to calculate gcd for."
        },
        "num2": {
          "type": "integer",
          "description": "Second number to calculate gcd for."
        },
        "algorithm": {
          "type": "string",
          "description": "The specific algorithm to use in the calculation. Supported values: 'euclidean', 'binary'",
          "default": "euclidean"
        }
      },
      "required": [
        "num1",
        "num2"
      ]
    }
  },
  {
    "name": "kinematics.calculate_speed_from_rest",
    "description": "Calculates the speed of an object that starts from rest under a constant acceleration over a specified distance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "distance": {
          "type": "float",
          "description": "The distance in meters the object has traveled."
        },
        "time": {
          "type": "float",
          "description": "The time in seconds it took the object to travel."
        },
        "initial_speed": {
          "type": "float",
          "description": "The initial speed of the object.",
          "default": 0
        }
      },
      "required": [
        "distance",
        "time"
      ]
    }
  },
  {
    "name": "kinematics.distance",
    "description": "Find the distance traveled by an object moving under constant acceleration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "float",
          "description": "The initial velocity of the object in m/s."
        },
        "time": {
          "type": "float",
          "description": "The time in seconds the object has been moving."
        },
        "acceleration": {
          "type": "float",
          "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"
        }
      },
      "required": [
        "initial_velocity",
        "time"
      ]
    }
  },
  {
    "name": "kinematics.final_velocity",
    "description": "Find the final velocity of an object moving under constant acceleration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "float",
          "description": "The initial velocity of the object in m/s."
        },
        "time": {
          "type": "float",
          "description": "The time in seconds the object has been moving."
        },
        "acceleration": {
          "type": "float",
          "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"
        }
      },
      "required": [
        "initial_velocity",
        "time"
      ]
    }
  },
  {
    "name": "library.search_book",
    "description": "Searches for a book in the library within the specified city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "book_name": {
          "type": "string",
          "description": "The name of the book to search for."
        },
        "city": {
          "type": "string",
          "description": "The city to search within."
        },
        "availability": {
          "type": "boolean",
          "description": "If true, search for available copies. If false or omitted, search for any copy regardless of availability. Default false"
        },
        "genre": {
          "type": "string",
          "description": "The genre of the book to filter search (optional).",
          "default": ""
        }
      },
      "required": [
        "book_name",
        "city"
      ]
    }
  },
  {
    "name": "library.reserve_book",
    "description": "Reserves a book in the library if available.",
    "parameters": {
      "type": "dict",
      "properties": {
        "book_id": {
          "type": "string",
          "description": "The id of the book to reserve."
        },
        "branch_id": {
          "type": "string",
          "description": "The id of the library branch to reserve from."
        },
        "return_date": {
          "type": "string",
          "description": "The date the book is to be returned (optional).",
          "default": ""
        }
      },
      "required": [
        "book_id",
        "branch_id"
      ]
    }
  },
  {
    "name": "grocery_delivery.order",
    "description": "Order grocery items from a specific location with optional delivery price limit",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the grocery store"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of items to order"
        },
        "max_delivery_cost": {
          "type": "float",
          "description": "The maximum delivery cost. It is optional",
          "default": 10.0
        }
      },
      "required": [
        "location",
        "items"
      ]
    }
  },
  {
    "name": "ride_hailing.get_rides",
    "description": "Find ride from source to destination with an optional cost limit",
    "parameters": {
      "type": "dict",
      "properties": {
        "source": {
          "type": "string",
          "description": "The starting point of the journey"
        },
        "destination": {
          "type": "string",
          "description": "The endpoint of the journey"
        },
        "max_cost": {
          "type": "float",
          "description": "The maximum cost of the ride. It is optional",
          "default": 30.0
        }
      },
      "required": [
        "source",
        "destination"
      ]
    }
  },
  {
    "name": "calculate_final_temperature",
    "description": "Calculate the final temperature when different quantities of the same gas at different temperatures are mixed.",
    "parameters": {
      "type": "dict",
      "properties": {
        "quantity1": {
          "type": "float",
          "description": "The quantity of the first sample of gas."
        },
        "temperature1": {
          "type": "float",
          "description": "The temperature of the first sample of gas."
        },
        "quantity2": {
          "type": "float",
          "description": "The quantity of the second sample of gas."
        },
        "temperature2": {
          "type": "float",
          "description": "The temperature of the second sample of gas."
        }
      },
      "required": [
        "quantity1",
        "temperature1",
        "quantity2",
        "temperature2"
      ]
    }
  },
  {
    "name": "calculate_mass",
    "description": "Calculate the mass of a gas given its quantity and molar mass.",
    "parameters": {
      "type": "dict",
      "properties": {
        "quantity": {
          "type": "float",
          "description": "The quantity of the gas."
        },
        "molar_mass": {
          "type": "float",
          "description": "The molar mass of the gas."
        }
      },
      "required": [
        "quantity",
        "molar_mass"
      ]
    }
  },
  {
    "name": "biological.calc_energy",
    "description": "Calculate energy from amount of substance based on its molecular composition.",
    "parameters": {
      "type": "dict",
      "properties": {
        "mols": {
          "type": "float",
          "description": "Amount of substance in moles."
        },
        "substance": {
          "type": "string",
          "description": "The chemical formula of the substance."
        },
        "joules_per_mol": {
          "type": "float",
          "description": "The energy produced or required for the reaction, default value for glucose is 2800 kJ/mol",
          "default": 2800.0
        }
      },
      "required": [
        "mols",
        "substance"
      ]
    }
  },
  {
    "name": "calculate.weight_in_space",
    "description": "Calculate your weight on different planets given your weight on earth",
    "parameters": {
      "type": "dict",
      "properties": {
        "weight_earth_kg": {
          "type": "float",
          "description": "Your weight on Earth in Kilograms."
        },
        "planet": {
          "type": "string",
          "description": "The planet you want to know your weight on."
        }
      },
      "required": [
        "weight_earth_kg",
        "planet"
      ]
    }
  },
  {
    "name": "sort_list",
    "description": "Sort the elements of a list in ascending or descending order",
    "parameters": {
      "type": "dict",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The list of elements to sort."
        },
        "order": {
          "type": "string",
          "description": "The order in which to sort the elements. This can be 'asc' for ascending order, or 'desc' for descending order.",
          "default": "asc"
        }
      },
      "required": [
        "elements"
      ]
    }
  },
  {
    "name": "calc_Compound_Interest",
    "description": "Compute compound interest.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principle_amount": {
          "type": "float",
          "description": "The principle amount that is invested."
        },
        "duration": {
          "type": "float",
          "description": "Duration of time period in years."
        },
        "annual_rate": {
          "type": "float",
          "description": "Interest rate in percentage."
        },
        "compound_freq": {
          "type": "integer",
          "default": 1,
          "description": "The number of times that interest is compounded per unit time."
        }
      },
      "required": [
        "principle_amount",
        "duration",
        "annual_rate"
      ]
    }
  },
  {
    "name": "corporate_finance.dividend_data",
    "description": "Get historical dividend data of a specific company within a particular duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company that you want to get the dividend data for."
        },
        "years": {
          "type": "integer",
          "description": "Number of past years for which to retrieve the data."
        },
        "frequency": {
          "type": "string",
          "enum": [
            "quarterly",
            "annually"
          ],
          "description": "The frequency of the dividend payment.",
          "default": "annually"
        }
      },
      "required": [
        "company",
        "years"
      ]
    }
  },
  {
    "name": "stock_forecast",
    "description": "Predict the future stock price for a specific company and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company that you want to get the stock price prediction for."
        },
        "days": {
          "type": "integer",
          "description": "Number of future days for which to predict the stock price."
        },
        "model": {
          "type": "string",
          "description": "The model to use for prediction. Default is 'ARIMA'."
        }
      },
      "required": [
        "company",
        "days"
      ]
    }
  },
  {
    "name": "financial.simple_interest",
    "description": "Calculates simple interest.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principle": {
          "type": "integer",
          "description": "The initial amount of money that interest is being calculated for."
        },
        "rate": {
          "type": "float",
          "description": "The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05."
        },
        "time": {
          "type": "integer",
          "description": "The amount of time, in years, that the money is to be compounded for."
        }
      },
      "required": [
        "principle",
        "rate",
        "time"
      ]
    }
  },
  {
    "name": "lawyer.search",
    "description": "Search for a lawyer based on area of expertise and location",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Los Angeles, CA"
        },
        "expertise": {
          "type": "string",
          "description": "Area of legal expertise. For example, 'Divorce', 'Criminal', 'Business'."
        }
      },
      "required": [
        "location",
        "expertise"
      ]
    }
  },
  {
    "name": "flights.search",
    "description": "Find flights between two cities.",
    "parameters": {
      "type": "dict",
      "properties": {
        "from_city": {
          "type": "string",
          "description": "The city to depart from."
        },
        "to_city": {
          "type": "string",
          "description": "The city to arrive at."
        },
        "date": {
          "type": "string",
          "description": "The date to fly. Default is today if not specified."
        }
      },
      "required": [
        "from_city",
        "to_city"
      ]
    }
  },
  {
    "name": "traffic_estimate",
    "description": "Estimate traffic from one location to another for a specific time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "Starting location for the journey."
        },
        "end_location": {
          "type": "string",
          "description": "Ending location for the journey."
        },
        "time_period": {
          "type": "string",
          "description": "Specify a time frame to estimate the traffic, 'now' for current, 'weekend' for the coming weekend. Default is 'now'."
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "google.books_search",
    "description": "Search for a book in the Google Books library with optional parameters",
    "parameters": {
      "type": "dict",
      "properties": {
        "genre": {
          "type": "string",
          "description": "Genre of the book"
        },
        "title": {
          "type": "string",
          "description": "Title of the book. Default is not use it if not specified."
        }
      },
      "required": [
        "genre"
      ]
    }
  },
  {
    "name": "library.search_books",
    "description": "Search for a book in a given library with optional parameters",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Name or city of library"
        },
        "genre": {
          "type": "string",
          "description": "Genre of the book"
        },
        "title": {
          "type": "string",
          "description": "Title of the book. Default is not use it if not specified."
        }
      },
      "required": [
        "location",
        "genre"
      ]
    }
  },
  {
    "name": "openlibrary.books_search",
    "description": "Search for a book in the Open Library with optional parameters",
    "parameters": {
      "type": "dict",
      "properties": {
        "genre": {
          "type": "string",
          "description": "Genre of the book"
        },
        "title": {
          "type": "string",
          "description": "Title of the book. Default is not use it if not specified."
        }
      },
      "required": [
        "genre"
      ]
    }
  },
  {
    "name": "european_history.get_events",
    "description": "Provides a list of major historical events based on the specified country and century.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "Country name."
        },
        "century": {
          "type": "integer",
          "description": "Century as an integer. For example, for the 1700s, input '18'."
        },
        "event_type": {
          "type": "string",
          "description": "Type of the event such as 'war', 'invention', 'revolution' etc. This field is optional. Default to 'war'."
        }
      },
      "required": [
        "country",
        "century"
      ]
    }
  },
  {
    "name": "european_history.get_culture",
    "description": "Provides information on cultural trends, art movements, philosophical ideas based on the specified country and century.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "Country name."
        },
        "century": {
          "type": "integer",
          "description": "Century as an integer. For example, for the 1700s, input '18'."
        },
        "aspect": {
          "type": "string",
          "description": "Aspect of culture such as 'literature', 'art', 'philosophy' etc. This field is optional. Default to 'art'."
        }
      },
      "required": [
        "country",
        "century"
      ]
    }
  },
  {
    "name": "paint_color.trends",
    "description": "Find the most popular paint color for a specific area in the home.",
    "parameters": {
      "type": "dict",
      "properties": {
        "room": {
          "type": "string",
          "description": "Type of the room e.g. Living room, Bathroom etc."
        },
        "period": {
          "type": "string",
          "enum": [
            "Daily",
            "Weekly",
            "Monthly",
            "Quarterly"
          ],
          "description": "The period over which to check the paint color trend. Default is 'Monthly' if not specified."
        }
      },
      "required": [
        "room"
      ]
    }
  },
  {
    "name": "house_price_trends",
    "description": "Find the average house price in a specific area.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "City and state, e.g. New York, NY."
        },
        "period": {
          "type": "string",
          "enum": [
            "Quarterly",
            "Yearly"
          ],
          "description": "The period over which to check the price trend. Default is 'Yearly' if not specified."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "sculpture.create_custom",
    "description": "Order a custom sculpture with your preferred material.",
    "parameters": {
      "type": "dict",
      "properties": {
        "item": {
          "type": "string",
          "description": "The subject of the sculpture, e.g. horse"
        },
        "material": {
          "type": "string",
          "enum": [
            "Bronze",
            "Marble",
            "Terracotta",
            "Wood",
            "Stone"
          ],
          "description": "Preferred material for the sculpture."
        },
        "size": {
          "type": "integer",
          "description": "The desired size for the sculpture in inches. This parameter is optional. Default is 10 inches if not specified."
        }
      },
      "required": [
        "item",
        "material"
      ]
    }
  },
  {
    "name": "painting.create_custom",
    "description": "Order a custom painting with your preferred color.",
    "parameters": {
      "type": "dict",
      "properties": {
        "subject": {
          "type": "string",
          "description": "The subject of the painting, e.g. horse"
        },
        "color": {
          "type": "string",
          "enum": [
            "Red",
            "Blue",
            "Green",
            "Yellow",
            "Black"
          ],
          "description": "Preferred main color for the painting."
        },
        "size": {
          "type": "integer",
          "description": "The desired size for the painting in inches. This parameter is optional. Default is 20 inches if not specified."
        }
      },
      "required": [
        "subject",
        "color"
      ]
    }
  },
  {
    "name": "artwork_search.find",
    "description": "Search for artworks based on type and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the artwork. E.g., painting, sculpture, installation."
        },
        "location": {
          "type": "string",
          "description": "Location or city where the artwork is."
        },
        "era": {
          "type": "string",
          "description": "Time period of the artwork, can be 'contemporary', 'modern', 'renaissance', etc. Default is 'contemporary' if not specified.",
          "optional": "True"
        }
      },
      "required": [
        "type",
        "location"
      ]
    }
  },
  {
    "name": "restaurant_info",
    "description": "Get restaurant information for a specific area.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location for which to find restaurants."
        },
        "food_type": {
          "type": "string",
          "description": "Type of cuisine for which to find restaurants. Default is 'all' if not specified.",
          "enum": [
            "Italian",
            "Chinese",
            "Mexican",
            "American"
          ]
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "exhibition_info",
    "description": "Get exhibition information for a specific museum.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum_name": {
          "type": "string",
          "description": "Name of the museum for which to find exhibitions."
        },
        "month": {
          "type": "integer",
          "description": "Number of upcoming months for which to retrieve exhibition details. Default is 1 if not specified."
        }
      },
      "required": [
        "museum_name"
      ]
    }
  },
  {
    "name": "concert.book_ticket",
    "description": "Book a ticket for a concert at a specific location with various add-ons like backstage pass.",
    "parameters": {
      "type": "dict",
      "properties": {
        "artist": {
          "type": "string",
          "description": "Name of the artist for the concert."
        },
        "location": {
          "type": "string",
          "description": "City where the concert will take place."
        },
        "add_ons": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Backstage Pass",
              "VIP Seating",
              "Parking Pass"
            ]
          },
          "description": "Add-ons for the concert. Default is 'VIP Seating' if not specified."
        }
      },
      "required": [
        "artist",
        "location"
      ]
    }
  },
  {
    "name": "festival.book_ticket",
    "description": "Book a ticket for a festival at a specific location with various add-ons like camping access.",
    "parameters": {
      "type": "dict",
      "properties": {
        "festival": {
          "type": "string",
          "description": "Name of the festival."
        },
        "location": {
          "type": "string",
          "description": "City where the festival will take place."
        },
        "add_ons": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Camping Pass",
              "VIP Seating",
              "Parking Pass"
            ]
          },
          "description": "Add-ons for the festival. Default is 'Camping Pass' if not specified."
        }
      },
      "required": [
        "festival",
        "location"
      ]
    }
  },
  {
    "name": "audio.generate",
    "description": "Generate an audio signal given a frequency, amplitude, and duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "frequency": {
          "type": "integer",
          "description": "Frequency of the audio signal in Hz."
        },
        "amplitude": {
          "type": "float",
          "description": "Amplitude of the audio signal."
        },
        "duration": {
          "type": "float",
          "description": "Duration of the audio signal in seconds. Default is 1 second if not specified.",
          "optional": true
        }
      },
      "required": [
        "frequency",
        "amplitude"
      ]
    }
  },
  {
    "name": "music.generate",
    "description": "Generate a piece of music given a key, tempo, and time signature.",
    "parameters": {
      "type": "dict",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the piece, e.g., C Major."
        },
        "tempo": {
          "type": "integer",
          "description": "Tempo of the piece in beats per minute."
        },
        "time_signature": {
          "type": "string",
          "description": "Time signature of the piece, e.g., 4/4. Default is '4/4' if not specified.",
          "optional": true
        }
      },
      "required": [
        "key",
        "tempo"
      ]
    }
  },
  {
    "name": "team_stats.get_top_scorer",
    "description": "Fetch the top scorer of a specified football team.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the football team."
        },
        "competition": {
          "type": "string",
          "description": "Competition for which to fetch stats (optional). Default is 'Premier League' if not specified."
        }
      },
      "required": [
        "team_name"
      ]
    }
  },
  {
    "name": "league_stats.get_top_scorer",
    "description": "Fetch the top scorer of a specified football league.",
    "parameters": {
      "type": "dict",
      "properties": {
        "league_name": {
          "type": "string",
          "description": "The name of the football league."
        },
        "season": {
          "type": "string",
          "description": "Season for which to fetch stats (optional). Default is '2019-2020' if not specified."
        }
      },
      "required": [
        "league_name"
      ]
    }
  },
  {
    "name": "player_stats.get_all_time_goals",
    "description": "Fetch all-time goals scored by a particular football player for a specified team.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The name of the football player."
        },
        "team_name": {
          "type": "string",
          "description": "The name of the team for which player has played."
        },
        "competition": {
          "type": "string",
          "description": "Competition for which to fetch stats (optional). Default is 'Premier League' if not specified."
        }
      },
      "required": [
        "player_name",
        "team_name"
      ]
    }
  },
  {
    "name": "AmazonGameStore.recommend",
    "description": "Generate game recommendation from Amazon Game Store based on number of players and category.",
    "parameters": {
      "type": "dict",
      "properties": {
        "numOfPlayers": {
          "type": "integer",
          "description": "The number of players who will play the game."
        },
        "category": {
          "type": "string",
          "description": "The preferred category of board game. E.g. strategy, family, party etc."
        },
        "priceRange": {
          "type": "string",
          "description": "The price range you are willing to pay for the board game. E.g. $10-$20, $20-$30 etc. This is an optional parameter. Default to '$10-$20' if not specified."
        }
      },
      "required": [
        "numOfPlayers",
        "category"
      ]
    }
  },
  {
    "name": "BoardGameGeek.recommend",
    "description": "Generate game recommendation from BoardGameGeek store based on number of players and category.",
    "parameters": {
      "type": "dict",
      "properties": {
        "numPlayers": {
          "type": "integer",
          "description": "The number of players who will play the game."
        },
        "category": {
          "type": "string",
          "description": "The preferred category of board game. E.g. strategy, family, party etc."
        },
        "difficulty": {
          "type": "string",
          "description": "Preferred difficulty level. E.g. beginner, intermediate, advanced etc. This is an optional parameter. Default to 'beginner' if not specified."
        }
      },
      "required": [
        "numPlayers",
        "category"
      ]
    }
  },
  {
    "name": "video_games.get_player_count",
    "description": "Retrieves the number of active players for a specified video game and year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game_title": {
          "type": "string",
          "description": "The title of the video game."
        },
        "year": {
          "type": "integer",
          "description": "The year in question."
        },
        "platform": {
          "type": "string",
          "optional": true,
          "description": "The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default is all if not specified."
        }
      },
      "required": [
        "game_title",
        "year"
      ]
    }
  },
  {
    "name": "video_games.get_sales",
    "description": "Retrieves the sales figures for a specified video game and year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game_title": {
          "type": "string",
          "description": "The title of the video game."
        },
        "year": {
          "type": "integer",
          "description": "The year in question."
        },
        "platform": {
          "type": "string",
          "optional": true,
          "description": "The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default is all if not specified."
        }
      },
      "required": [
        "game_title",
        "year"
      ]
    }
  },
  {
    "name": "recipe_search",
    "description": "Searches for recipes based on a list of ingredients and a maximum caloric value.",
    "parameters": {
      "type": "dict",
      "properties": {
        "ingredients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of ingredients you want to use in the recipe."
        },
        "calories": {
          "type": "integer",
          "description": "The maximum number of calories for the recipe."
        },
        "meal": {
          "type": "string",
          "description": "Type of the meal for the recipe, it's optional and could be breakfast, lunch or dinner. Default is all if not specified."
        }
      },
      "required": [
        "ingredients",
        "calories"
      ]
    }
  },
  {
    "name": "restaurant_search",
    "description": "Searches for restaurants based on a list of preferred ingredients and maximum calorie count.",
    "parameters": {
      "type": "dict",
      "properties": {
        "ingredients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of ingredients you prefer in the restaurant's dishes."
        },
        "calories": {
          "type": "integer",
          "description": "The maximum calorie count you prefer for the restaurant's dishes."
        },
        "meal": {
          "type": "string",
          "description": "Type of the meal for the restaurant's dishes, it's optional and could be breakfast, lunch or dinner. Default is all if not specified."
        }
      },
      "required": [
        "ingredients",
        "calories"
      ]
    }
  },
  {
    "name": "restaurant.find_group",
    "description": "Find restaurants suitable for groups based on specified criteria such as location and cuisine.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Seattle, WA"
        },
        "cuisine": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Seafood",
              "Italian",
              "Indian",
              "Chinese"
            ]
          },
          "description": "Preferred cuisine at the restaurant. Default is all if not specified."
        },
        "group_size": {
          "type": "integer",
          "description": "Size of the group that the restaurant should accommodate."
        }
      },
      "required": [
        "location",
        "group_size"
      ]
    }
  },
  {
    "name": "events.find_event",
    "description": "Find events suitable for groups based on specified criteria such as location and event type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Seattle, WA"
        },
        "event_type": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Concert",
              "Sports",
              "Exhibition",
              "Festival"
            ]
          },
          "description": "Type of event. Default is all if not specified."
        },
        "group_size": {
          "type": "integer",
          "description": "Size of the group that the event should accommodate."
        }
      },
      "required": [
        "location",
        "group_size"
      ]
    }
  },
  {
    "name": "restaurant.find",
    "description": "Locate restaurants based on specific criteria such as cuisine and price range",
    "parameters": {
      "type": "dict",
      "properties": {
        "cuisine": {
          "type": "string",
          "description": "The type of cuisine preferred."
        },
        "price": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default is 'mid' if not specified."
        }
      },
      "required": [
        "cuisine"
      ]
    }
  },
  {
    "name": "car.rental",
    "description": "Rent a car at the specified location for a specific number of days",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location of the car rental."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for which to rent the car."
        },
        "car_type": {
          "type": "string",
          "description": "Type of the car to rent."
        },
        "pick_up": {
          "type": "string",
          "description": "Location of where to pick up the car. Default is 'airport' if not specified."
        }
      },
      "required": [
        "location",
        "days",
        "car_type"
      ]
    }
  },
  {
    "name": "hotel.book",
    "description": "Book a hotel room given the location, room type, and number of nights and additional services",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location of the hotel."
        },
        "roomType": {
          "type": "string",
          "description": "Type of the room to be booked."
        },
        "nights": {
          "type": "integer",
          "description": "Number of nights to book the room for."
        },
        "additional_services": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Additonal services that can be booked."
          },
          "description": "Additional services to be added. Default is not use it if not specified."
        }
      },
      "required": [
        "location",
        "roomType",
        "nights"
      ]
    }
  },
  {
    "name": "currency_exchange.convert",
    "description": "Converts a value from one currency to another using the latest exchange rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "amount": {
          "type": "integer",
          "description": "The amount of money to be converted."
        },
        "from_currency": {
          "type": "string",
          "description": "The currency to convert from."
        },
        "to_currency": {
          "type": "string",
          "description": "The currency to convert to."
        },
        "live_conversion": {
          "type": "boolean",
          "description": "If true, use the latest exchange rate for conversion, else use the last known rate. Default is true."
        }
      },
      "required": [
        "amount",
        "from_currency",
        "to_currency"
      ]
    }
  },
  {
    "name": "plot_sine_wave",
    "description": "Plot a sine wave for a given frequency in a given range.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_range": {
          "type": "integer",
          "description": "Start of the range in radians."
        },
        "end_range": {
          "type": "float",
          "description": "End of the range in radians."
        },
        "frequency": {
          "type": "integer",
          "description": "Frequency of the sine wave in Hz."
        },
        "amplitude": {
          "type": "float",
          "description": "Amplitude of the sine wave. Default is 1."
        },
        "phase_shift": {
          "type": "float",
          "description": "Phase shift of the sine wave in radians. Default is 0."
        }
      },
      "required": [
        "start_range",
        "end_range",
        "frequency"
      ]
    }
  },
  {
    "name": "calculus.derivative",
    "description": "Compute the derivative of a function at a specific value.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "The function to calculate the derivative of."
        },
        "value": {
          "type": "integer",
          "description": "The value where the derivative needs to be calculated at."
        },
        "function_variable": {
          "type": "string",
          "description": "The variable present in the function, for instance x or y, etc. Default is 'x'."
        }
      },
      "required": [
        "function",
        "value"
      ]
    }
  },
  {
    "name": "poker_game_winner",
    "description": "Identify the winner in a poker game based on the cards.",
    "parameters": {
      "type": "dict",
      "properties": {
        "players": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names of the players in a list."
        },
        "cards": {
          "type": "dict",
          "description": "An object containing the player name as key and the cards as string values in a list, for example '7 of diamonds'."
        },
        "type": {
          "type": "string",
          "description": "Type of poker game. Defaults to 'Texas Holdem'"
        }
      },
      "required": [
        "players",
        "cards"
      ]
    }
  },
  {
    "name": "calculate_displacement",
    "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "integer",
          "description": "The initial velocity of the object in m/s."
        },
        "time": {
          "type": "integer",
          "description": "The time in seconds that the object has been in motion."
        },
        "acceleration": {
          "type": "integer",
          "description": "The acceleration of the object in m/s^2.",
          "default": 0
        }
      },
      "required": [
        "initial_velocity",
        "time"
      ]
    }
  },
  {
    "name": "court_case.search",
    "description": "Retrieves details about a court case using its docket number and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "docket_number": {
          "type": "string",
          "description": "The docket number for the case."
        },
        "location": {
          "type": "string",
          "description": "The location where the case is registered, in the format: city, state, e.g., Dallas, TX."
        },
        "full_text": {
          "type": "boolean",
          "default": false,
          "description": "Option to return the full text of the case ruling."
        }
      },
      "required": [
        "docket_number",
        "location"
      ]
    }
  },
  {
    "name": "lawsuit_details.find",
    "description": "Find details of lawsuits involving a specific company from a given year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "Name of the company."
        },
        "year": {
          "type": "integer",
          "description": "Year of the lawsuit."
        },
        "case_type": {
          "type": "string",
          "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is all if not specified."
        }
      },
      "required": [
        "company_name",
        "year"
      ]
    }
  },
  {
    "name": "calculate_magnetic_field",
    "description": "Calculate the magnetic field produced at the center of a circular loop carrying current.",
    "parameters": {
      "type": "dict",
      "properties": {
        "current": {
          "type": "integer",
          "description": "The current through the circular loop in Amperes."
        },
        "radius": {
          "type": "float",
          "description": "The radius of the circular loop in meters."
        },
        "permeability": {
          "type": "float",
          "description": "The magnetic permeability. Default is 12.57e10."
        }
      },
      "required": [
        "current",
        "radius"
      ]
    }
  },
  {
    "name": "calculate_electric_field_strength",
    "description": "Calculate the electric field strength at a certain distance from a point charge.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge": {
          "type": "float",
          "description": "The charge in Coulombs."
        },
        "distance": {
          "type": "float",
          "description": "The distance from the charge in meters."
        },
        "medium": {
          "type": "string",
          "description": "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."
        }
      },
      "required": [
        "charge",
        "distance"
      ]
    }
  },
  {
    "name": "cellbio.get_proteins",
    "description": "Get the list of proteins in a specific cell compartment.",
    "parameters": {
      "type": "dict",
      "properties": {
        "cell_compartment": {
          "type": "string",
          "description": "The specific cell compartment."
        },
        "include_description": {
          "type": "boolean",
          "description": "Set true if you want a brief description of each protein.",
          "default": false
        }
      },
      "required": [
        "cell_compartment"
      ]
    }
  },
  {
    "name": "find_exhibition",
    "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where the exhibition is held, e.g., New York, NY."
        },
        "art_form": {
          "type": "string",
          "description": "The form of art the exhibition is displaying e.g., sculpture."
        },
        "month": {
          "type": "string",
          "description": "The month (in full name) of exhibition."
        },
        "user_ratings": {
          "type": "string",
          "enum": [
            "low",
            "average",
            "high"
          ],
          "description": "Select exhibitions with user rating threshold. Default is all if not specified."
        }
      },
      "required": [
        "location",
        "art_form",
        "month"
      ]
    }
  },
  {
    "name": "walmart.purchase",
    "description": "Retrieve information of items from Walmart including stock availability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "loc": {
          "type": "string",
          "description": "Location of the nearest Walmart."
        },
        "product_list": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Items to be purchased listed in an array."
        },
        "pack_size": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is 1."
        }
      },
      "required": [
        "loc",
        "product_list"
      ]
    }
  },
  {
    "name": "modify_painting",
    "description": "Modify an existing painting's attributes such as size, medium, and color.",
    "parameters": {
      "type": "dict",
      "properties": {
        "size": {
          "type": "string",
          "description": "The size of the painting in inches, width by height."
        },
        "medium": {
          "type": "string",
          "description": "The medium of the painting, such as oil, acrylic, etc."
        },
        "dominant_color": {
          "type": "string",
          "description": "The dominant color of the painting. Default is 'Blue'."
        }
      },
      "required": [
        "size",
        "medium"
      ]
    }
  },
  {
    "name": "find_restaurants",
    "description": "Locate nearby restaurants based on location and food preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The specific location or area."
        },
        "food_type": {
          "type": "string",
          "description": "The type of food preferred."
        },
        "number": {
          "type": "integer",
          "description": "Number of results to return."
        },
        "dietary_requirements": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Special dietary requirements, e.g. vegan, gluten-free. Default is all if not specified."
        }
      },
      "required": [
        "location",
        "food_type",
        "number"
      ]
    }
  },
  {
    "name": "sports.match_schedule",
    "description": "Retrieve the match schedule for a specific sports team.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the sports team."
        },
        "num_matches": {
          "type": "integer",
          "description": "The number of upcoming matches you want to get."
        },
        "league": {
          "type": "string",
          "description": "The sports league of the team. This is an optional parameter. Default is 'NBA'"
        }
      },
      "required": [
        "team_name",
        "num_matches"
      ]
    }
  },
  {
    "name": "find_instrument",
    "description": "Search for a musical instrument within specified budget and of specific type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "budget": {
          "type": "integer",
          "description": "Your budget for the instrument."
        },
        "type": {
          "type": "string",
          "description": "Type of the instrument"
        },
        "make": {
          "type": "string",
          "description": "Maker of the instrument, Optional parameter. Default is all if not specified."
        }
      },
      "required": [
        "budget",
        "type"
      ]
    }
  },
  {
    "name": "hotel_booking",
    "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where you want to book the hotel."
        },
        "room_type": {
          "type": "string",
          "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."
        },
        "duration": {
          "type": "integer",
          "description": "The number of nights you want to book the hotel for."
        },
        "start_date": {
          "type": "string",
          "description": "The date when your stay begins."
        },
        "preferences": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "pet_friendly",
              "gym",
              "swimming_pool",
              "free_breakfast",
              "parking"
            ]
          },
          "description": "Optional preferences of stay at the hotel. Default is all if not specified."
        }
      },
      "required": [
        "location",
        "room_type",
        "duration",
        "start_date"
      ]
    }
  },
  {
    "name": "lawsuits_search",
    "description": "Search for lawsuits against a specific company within a specific time and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company."
        },
        "location": {
          "type": "string",
          "description": "The location where the lawsuit was filed."
        },
        "year": {
          "type": "integer",
          "description": "The year when the lawsuit was filed."
        },
        "case_type": {
          "type": "string",
          "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, default to search for all types."
        }
      },
      "required": [
        "company_name",
        "location",
        "year"
      ]
    }
  },
  {
    "name": "flight.book",
    "description": "Book a direct flight for a specific date and time from departure location to destination location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "departure_location": {
          "type": "string",
          "description": "The location you are departing from."
        },
        "destination_location": {
          "type": "string",
          "description": "The location you are flying to."
        },
        "date": {
          "type": "string",
          "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."
        },
        "time": {
          "type": "string",
          "description": "Preferred time of flight. Format XX:XXAM or XX:XXPM. Default ''"
        },
        "direct_flight": {
          "type": "boolean",
          "description": "If set to true, only direct flights will be searched. Default is false"
        }
      },
      "required": [
        "departure_location",
        "destination_location",
        "date"
      ]
    }
  },
  {
    "name": "imdb.find_movies_by_actor",
    "description": "Searches the database to find all movies by a specific actor within a certain year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "actor_name": {
          "type": "string",
          "description": "The name of the actor."
        },
        "year": {
          "type": "integer",
          "description": "The specific year to search in."
        },
        "category": {
          "type": "string",
          "description": "The category of the film (e.g. Drama, Comedy, etc). This parameter is optional. Default is all if not specified."
        }
      },
      "required": [
        "actor_name",
        "year"
      ]
    }
  },
  {
    "name": "latest_exchange_rate",
    "description": "Retrieve the latest exchange rate between two specified currencies.",
    "parameters": {
      "type": "dict",
      "properties": {
        "source_currency": {
          "type": "string",
          "description": "The currency you are converting from."
        },
        "target_currency": {
          "type": "string",
          "description": "The currency you are converting to."
        },
        "amount": {
          "type": "integer",
          "description": "The amount to be converted. If omitted, default to xchange rate of 1 unit source currency."
        }
      },
      "required": [
        "source_currency",
        "target_currency"
      ]
    }
  },
  {
    "name": "map_service.get_directions",
    "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start": {
          "type": "string",
          "description": "Starting location for the route."
        },
        "end": {
          "type": "string",
          "description": "Ending location for the route."
        },
        "avoid": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "tolls",
              "highways",
              "ferries"
            ]
          },
          "description": "Route features to avoid. Default is none if not specified."
        }
      },
      "required": [
        "start",
        "end"
      ]
    }
  },
  {
    "name": "math.power",
    "description": "Calculate the power of one number raised to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "integer",
          "description": "The base number."
        },
        "exponent": {
          "type": "integer",
          "description": "The exponent."
        },
        "mod": {
          "type": "integer",
          "description": "The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided."
        }
      },
      "required": [
        "base",
        "exponent"
      ]
    }
  },
  {
    "name": "restaurant_search.find_closest",
    "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city, for instance Boston, MA"
        },
        "cuisine": {
          "type": "string",
          "description": "Type of food like Sushi."
        },
        "amenities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Patio",
              "Wi-Fi",
              "Happy Hour",
              "Wheelchair Accessible"
            ]
          },
          "description": "Preferred amenities in the restaurant. Default is none if not specified."
        }
      },
      "required": [
        "location",
        "cuisine"
      ]
    }
  },
  {
    "name": "mix_paint_color",
    "description": "Combine two primary paint colors and adjust the resulting color's lightness level.",
    "parameters": {
      "type": "dict",
      "properties": {
        "color1": {
          "type": "string",
          "description": "The first primary color to be mixed."
        },
        "color2": {
          "type": "string",
          "description": "The second primary color to be mixed."
        },
        "lightness": {
          "type": "integer",
          "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50."
        }
      },
      "required": [
        "color1",
        "color2"
      ]
    }
  },
  {
    "name": "movie_details.brief",
    "description": "This function retrieves a brief about a specified movie.",
    "parameters": {
      "type": "dict",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the movie"
        },
        "extra_info": {
          "type": "boolean",
          "description": "Option to get additional information like Director, Cast, Awards etc.",
          "default": false
        }
      },
      "required": [
        "title"
      ]
    }
  },
  {
    "name": "calculate_return_on_equity",
    "description": "Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.",
    "parameters": {
      "type": "dict",
      "properties": {
        "net_income": {
          "type": "integer",
          "description": "The company's net income."
        },
        "shareholder_equity": {
          "type": "integer",
          "description": "The company's total shareholder's equity."
        },
        "dividends_paid": {
          "type": "integer",
          "description": "The total dividends paid by the company. Optional. If not given, default to 0."
        }
      },
      "required": [
        "net_income",
        "shareholder_equity"
      ]
    }
  },
  {
    "name": "geometry.calculate_area_circle",
    "description": "Calculate the area of a circle given its radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "The radius of the circle."
        },
        "unit": {
          "type": "string",
          "description": "The measurement unit of the radius (optional parameter, default is 'units')."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "calculate_triangle_area",
    "description": "Calculate the area of a triangle given its base and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "integer",
          "description": "The base of the triangle."
        },
        "height": {
          "type": "integer",
          "description": "The height of the triangle."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measure (defaults to 'units' if not specified)"
        }
      },
      "required": [
        "base",
        "height"
      ]
    }
  },
  {
    "name": "walmart.check_price",
    "description": "Calculate total price for given items and their quantities at Walmart.",
    "parameters": {
      "type": "dict",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of items to be priced."
        },
        "quantities": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Quantity of each item corresponding to the items list."
        },
        "store_location": {
          "type": "string",
          "description": "The store location for specific pricing (optional). Default is 'San Francisco, CA'."
        }
      },
      "required": [
        "items",
        "quantities"
      ]
    }
  },
  {
    "name": "calculate_stock_return",
    "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.",
    "parameters": {
      "type": "dict",
      "properties": {
        "investment_amount": {
          "type": "integer",
          "description": "The amount of money to invest."
        },
        "annual_growth_rate": {
          "type": "float",
          "description": "The expected annual growth rate of the stock."
        },
        "holding_period": {
          "type": "integer",
          "description": "The number of years you intend to hold the stock."
        },
        "dividends": {
          "type": "boolean",
          "description": "Optional. True if the calculation should take into account potential dividends. Default is false."
        }
      },
      "required": [
        "investment_amount",
        "annual_growth_rate",
        "holding_period"
      ]
    }
  },
  {
    "name": "lawsuit_details.find",
    "description": "Find details of lawsuits involving a specific company from a given year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "Name of the company."
        },
        "year": {
          "type": "integer",
          "description": "Year of the lawsuit."
        },
        "case_type": {
          "type": "string",
          "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter. Default is all if not specified."
        }
      },
      "required": [
        "company_name",
        "year"
      ]
    }
  },
  {
    "name": "weather.humidity_forecast",
    "description": "Retrieve a humidity forecast for a specific location and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the humidity for."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for the forecast."
        },
        "min_humidity": {
          "type": "integer",
          "description": "Minimum level of humidity (in percentage) to filter the result. Default is 0."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "create_player_profile",
    "description": "Create a new player profile with character name, class and starting level.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The desired name of the player."
        },
        "class_type": {
          "type": "string",
          "description": "The character class for the player. Default ''"
        },
        "starting_level": {
          "type": "integer",
          "description": "The starting level for the player",
          "default": 1
        }
      },
      "required": [
        "player_name",
        "class_type"
      ]
    }
  },
  {
    "name": "sports_ranking",
    "description": "Fetch the ranking of a specific sports team in a specific league",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The name of the team."
        },
        "league": {
          "type": "string",
          "description": "The name of the league."
        },
        "season": {
          "type": "integer",
          "description": "Optional parameter to specify the season, default is 2023 if not specified."
        }
      },
      "required": [
        "team",
        "league"
      ]
    }
  },
  {
    "name": "grocery_store.find_best",
    "description": "Find the closest high-rated grocery stores based on certain product availability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "my_location": {
          "type": "string",
          "description": "The current location of the user."
        },
        "rating": {
          "type": "float",
          "description": "The minimum required store rating. Default is 5.0."
        },
        "products": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required products in a list."
        }
      },
      "required": [
        "my_location",
        "products"
      ]
    }
  },
  {
    "name": "calculate_emissions",
    "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.",
    "parameters": {
      "type": "dict",
      "properties": {
        "distance": {
          "type": "integer",
          "description": "The distance travelled in miles."
        },
        "fuel_type": {
          "type": "string",
          "description": "Type of fuel used by the vehicle."
        },
        "fuel_efficiency": {
          "type": "integer",
          "description": "The vehicle's fuel efficiency in miles per gallon."
        },
        "efficiency_reduction": {
          "type": "integer",
          "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"
        }
      },
      "required": [
        "distance",
        "fuel_type",
        "fuel_efficiency"
      ]
    }
  },
  {
    "name": "ecology.get_turtle_population",
    "description": "Get the population and species of turtles in a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The name of the location."
        },
        "year": {
          "type": "integer",
          "description": "The year of the data requested. Default is 2023 if not specified."
        },
        "species": {
          "type": "boolean",
          "description": "Whether to include species information. Default is false. (optional)"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "get_current_time",
    "description": "Retrieve the current time in a specific time zone.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The name of the city."
        },
        "country": {
          "type": "string",
          "description": "The name of the country."
        },
        "timezone": {
          "type": "string",
          "description": "The optional timezone to get current time. Default is 'UTC'."
        }
      },
      "required": [
        "location",
        "country"
      ]
    }
  },
  {
    "name": "get_sculpture_value",
    "description": "Retrieve the current market value of a particular sculpture by a specific artist.",
    "parameters": {
      "type": "dict",
      "properties": {
        "sculpture": {
          "type": "string",
          "description": "The name of the sculpture."
        },
        "artist": {
          "type": "string",
          "description": "The name of the artist who created the sculpture."
        }
      },
      "required": [
        "sculpture",
        "artist"
      ]
    }
  },
  {
    "name": "history.get_key_events",
    "description": "Retrieve key historical events within a specific period for a certain country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The name of the country for which history is queried."
        },
        "start_year": {
          "type": "integer",
          "description": "Start year of the period for which history is queried."
        },
        "end_year": {
          "type": "integer",
          "description": "End year of the period for which history is queried."
        },
        "event_type": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "War",
              "Revolutions",
              "Diplomacy",
              "Economy"
            ]
          },
          "description": "Types of event. If none is provided, default that all types will be considered."
        }
      },
      "required": [
        "country",
        "start_year",
        "end_year"
      ]
    }
  },
  {
    "name": "locate_tallest_mountains",
    "description": "Find the tallest mountains within a specified radius of a location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city from which to calculate distance."
        },
        "radius": {
          "type": "integer",
          "description": "The radius within which to find mountains, measured in kilometers."
        },
        "amount": {
          "type": "integer",
          "description": "The number of mountains to find, listed from tallest to smallest."
        }
      },
      "required": [
        "location",
        "radius",
        "amount"
      ]
    }
  },
  {
    "name": "find_card_in_deck",
    "description": "Locate a particular card in a deck based on rank and suit.",
    "parameters": {
      "type": "dict",
      "properties": {
        "rank": {
          "type": "string",
          "description": "Rank of the card (e.g. Ace, Two, King)."
        },
        "suit": {
          "type": "string",
          "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."
        },
        "deck": {
          "type": "array",
          "items": {
            "type": "dict",
            "properties": {
              "rank": {
                "type": "string"
              },
              "suit": {
                "type": "string"
              }
            }
          },
          "description": "Deck of cards. If not provided, the deck will be default to an empty array"
        }
      },
      "required": [
        "rank",
        "suit"
      ]
    }
  },
  {
    "name": "museum_working_hours.get",
    "description": "Get the working hours of a museum in a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum": {
          "type": "string",
          "description": "The name of the museum."
        },
        "location": {
          "type": "string",
          "description": "The location of the museum."
        },
        "day": {
          "type": "string",
          "description": "Specific day of the week. Optional parameter. Default is 'Monday'."
        }
      },
      "required": [
        "museum",
        "location"
      ]
    }
  },
  {
    "name": "music.calculate_note_duration",
    "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.",
    "parameters": {
      "type": "dict",
      "properties": {
        "first_note_frequency": {
          "type": "integer",
          "description": "The frequency of the first note in Hz."
        },
        "second_note_frequency": {
          "type": "integer",
          "description": "The frequency of the second note in Hz."
        },
        "tempo": {
          "type": "integer",
          "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."
        }
      },
      "required": [
        "first_note_frequency",
        "second_note_frequency"
      ]
    }
  },
  {
    "name": "find_exhibition",
    "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where the exhibition is held, e.g., New York, NY."
        },
        "art_form": {
          "type": "string",
          "description": "The form of art the exhibition is displaying e.g., sculpture."
        },
        "month": {
          "type": "string",
          "description": "The month of exhibition. Default value will return upcoming events."
        },
        "user_ratings": {
          "type": "string",
          "enum": [
            "low",
            "average",
            "high"
          ],
          "description": "Select exhibitions with user rating threshold. Default is 'average'."
        }
      },
      "required": [
        "location",
        "art_form"
      ]
    }
  },
  {
    "name": "player_statistic",
    "description": "Retrieves detailed player's statistics for a specific year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The player's name."
        },
        "year": {
          "type": "integer",
          "description": "Year for which the statistics will be displayed."
        },
        "team_name": {
          "type": "string",
          "description": "The name of the team(optional). Default is all if not specified."
        }
      },
      "required": [
        "player_name",
        "year"
      ]
    }
  },
  {
    "name": "metropolitan_museum.get_top_artworks",
    "description": "Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "integer",
          "description": "The number of artworks to fetch"
        },
        "sort_by": {
          "type": "string",
          "description": "The criteria to sort the results on. Default is 'popularity'.",
          "enum": [
            "popularity",
            "chronological",
            "alphabetical"
          ]
        }
      },
      "required": [
        "number"
      ]
    }
  },
  {
    "name": "electromagnetic_force",
    "description": "Calculate the electromagnetic force between two charges placed at a certain distance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge1": {
          "type": "integer",
          "description": "The magnitude of the first charge in coulombs."
        },
        "charge2": {
          "type": "integer",
          "description": "The magnitude of the second charge in coulombs."
        },
        "distance": {
          "type": "float",
          "description": "The distance between the two charges in meters."
        },
        "medium_permittivity": {
          "type": "float",
          "description": "The relative permittivity of the medium in which the charges are present, in F/m. Default is 8.854e-12 (vacuum permittivity)."
        }
      },
      "required": [
        "charge1",
        "charge2",
        "distance"
      ]
    }
  },
  {
    "name": "find_instrument",
    "description": "Search for a musical instrument within specified budget and of specific type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "budget": {
          "type": "integer",
          "description": "Your budget for the instrument."
        },
        "type": {
          "type": "string",
          "description": "Type of the instrument"
        },
        "make": {
          "type": "string",
          "description": "Maker of the instrument, Optional parameter. Default to not use it if not provided."
        }
      },
      "required": [
        "budget",
        "type"
      ]
    }
  },
  {
    "name": "hotel_booking",
    "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where you want to book the hotel."
        },
        "room_type": {
          "type": "string",
          "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."
        },
        "duration": {
          "type": "integer",
          "description": "The number of nights you want to book the hotel for."
        },
        "start_date": {
          "type": "string",
          "description": "The date when your stay begins."
        },
        "preferences": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "pet_friendly",
              "gym",
              "swimming_pool",
              "free_breakfast",
              "parking"
            ]
          },
          "description": "Optional preferences of stay at the hotel. Default is none if not provided."
        }
      },
      "required": [
        "location",
        "room_type",
        "duration",
        "start_date"
      ]
    }
  },
  {
    "name": "sports_team.get_schedule",
    "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the sports team."
        },
        "num_of_games": {
          "type": "integer",
          "description": "Number of games for which to fetch the schedule."
        },
        "league": {
          "type": "string",
          "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."
        },
        "location": {
          "type": "string",
          "description": "Optional. The city or venue where games are to be held. If not provided, all venues will be considered by default."
        }
      },
      "required": [
        "team_name",
        "num_of_games",
        "league"
      ]
    }
  },
  {
    "name": "find_card_in_deck",
    "description": "Locate a particular card in a deck based on rank and suit.",
    "parameters": {
      "type": "dict",
      "properties": {
        "rank": {
          "type": "string",
          "description": "Rank of the card (e.g. Ace, Two, King)."
        },
        "suit": {
          "type": "string",
          "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."
        },
        "deck": {
          "type": "array",
          "items": {
            "type": "dict",
            "properties": {
              "rank": {
                "type": "string"
              },
              "suit": {
                "type": "string"
              }
            }
          },
          "description": "Deck of cards. If not provided, the deck will be a default standard 52 card deck"
        }
      },
      "required": [
        "rank",
        "suit"
      ]
    }
  },
  {
    "name": "vegan_restaurant.find_nearby",
    "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. New York, NY"
        },
        "operating_hours": {
          "type": "integer",
          "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "currency_exchange.convert",
    "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base_currency": {
          "type": "string",
          "description": "The currency to convert from."
        },
        "target_currency": {
          "type": "string",
          "description": "The currency to convert to."
        },
        "amount": {
          "type": "integer",
          "description": "The amount in base currency to convert"
        }
      },
      "required": [
        "base_currency",
        "target_currency",
        "amount"
      ]
    }
  },
  {
    "name": "recipe.unit_conversion",
    "description": "Convert a value from one kitchen unit to another for cooking purposes.",
    "parameters": {
      "type": "dict",
      "properties": {
        "value": {
          "type": "integer",
          "description": "The value to be converted."
        },
        "from_unit": {
          "type": "string",
          "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."
        },
        "to_unit": {
          "type": "string",
          "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."
        },
        "precision": {
          "type": "integer",
          "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 0."
        }
      },
      "required": [
        "value",
        "from_unit",
        "to_unit"
      ]
    }
  },
  {
    "name": "hospital.locate",
    "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Denver, CO"
        },
        "radius": {
          "type": "integer",
          "description": "The radius within which you want to find the hospital in kms."
        },
        "department": {
          "type": "string",
          "description": "Specific department within the hospital. Default to none if not provided.",
          "enum": [
            "General Medicine",
            "Emergency",
            "Pediatrics",
            "Cardiology",
            "Orthopedics"
          ]
        }
      },
      "required": [
        "location",
        "radius"
      ]
    }
  },
  {
    "name": "flight.book",
    "description": "Book a direct flight for a specific date and time from departure location to destination location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "departure_location": {
          "type": "string",
          "description": "The location you are departing from."
        },
        "destination_location": {
          "type": "string",
          "description": "The location you are flying to."
        },
        "date": {
          "type": "string",
          "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."
        },
        "time": {
          "type": "string",
          "description": "Preferred time of flight. Default to none if not provided. Accepts standard time format e.g., 10:00 AM"
        },
        "direct_flight": {
          "type": "boolean",
          "description": "If set to true, only direct flights will be searched. Default is false."
        }
      },
      "required": [
        "departure_location",
        "destination_location",
        "date"
      ]
    }
  },
  {
    "name": "building.get_dimensions",
    "description": "Retrieve the dimensions of a specific building based on its name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "building_name": {
          "type": "string",
          "description": "The name of the building."
        },
        "unit": {
          "type": "string",
          "description": "The unit in which you want the dimensions.",
          "enum": [
            "meter",
            "feet"
          ]
        }
      },
      "required": [
        "building_name",
        "unit"
      ]
    }
  },
  {
    "name": "multiplayer_game_finder",
    "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.",
    "parameters": {
      "type": "dict",
      "properties": {
        "platform": {
          "type": "string",
          "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."
        },
        "rating": {
          "type": "integer",
          "description": "Desired minimum game rating on a 5.0 scale."
        },
        "genre": {
          "type": "string",
          "description": "Desired game genre, e.g. Action, Adventure, Racing. Default is none if not provided.",
          "enum": [
            "Action",
            "Adventure",
            "Racing",
            "Strategy",
            "Simulation"
          ]
        }
      },
      "required": [
        "platform",
        "rating"
      ]
    }
  },
  {
    "name": "send_email",
    "description": "Send an email to the specified email address.",
    "parameters": {
      "type": "dict",
      "properties": {
        "to": {
          "type": "string",
          "description": "The email address to send to."
        },
        "subject": {
          "type": "string",
          "description": "The subject of the email."
        },
        "body": {
          "type": "string",
          "description": "The body content of the email."
        },
        "cc": {
          "type": "string",
          "description": "The email address to carbon copy. Default is none if not provided."
        },
        "bcc": {
          "type": "string",
          "description": "The email address to blind carbon copy. Default is none if not provided."
        }
      },
      "required": [
        "to",
        "subject",
        "body"
      ]
    }
  },
  {
    "name": "recipe_info.get_calories",
    "description": "Retrieve the amount of calories from a specific recipe in a food website.",
    "parameters": {
      "type": "dict",
      "properties": {
        "website": {
          "type": "string",
          "description": "The food website that has the recipe."
        },
        "recipe": {
          "type": "string",
          "description": "Name of the recipe."
        },
        "optional_meal_time": {
          "type": "string",
          "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is 'Dinner'"
        }
      },
      "required": [
        "website",
        "recipe"
      ]
    }
  },
  {
    "name": "calculate_emission_savings",
    "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.",
    "parameters": {
      "type": "dict",
      "properties": {
        "energy_type": {
          "type": "string",
          "description": "Type of the renewable energy source."
        },
        "usage_duration": {
          "type": "integer",
          "description": "Usage duration in months."
        },
        "region": {
          "type": "string",
          "description": "The region where you use energy. Default is 'global'."
        }
      },
      "required": [
        "energy_type",
        "usage_duration"
      ]
    }
  },
  {
    "name": "solve_quadratic_equation",
    "description": "Function solves the quadratic equation and returns its roots.",
    "parameters": {
      "type": "dict",
      "properties": {
        "a": {
          "type": "integer",
          "description": "Coefficient of x squared"
        },
        "b": {
          "type": "integer",
          "description": "Coefficient of x"
        },
        "c": {
          "type": "integer",
          "description": "Constant term in the quadratic equation."
        }
      },
      "required": [
        "a",
        "b",
        "c"
      ]
    }
  },
  {
    "name": "solve_quadratic",
    "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.",
    "parameters": {
      "type": "dict",
      "properties": {
        "a": {
          "type": "integer",
          "description": "The coefficient of the squared term in the quadratic equation."
        },
        "b": {
          "type": "integer",
          "description": "The coefficient of the linear term in the quadratic equation."
        },
        "c": {
          "type": "integer",
          "description": "The constant term in the quadratic equation."
        },
        "root_type": {
          "type": "string",
          "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."
        }
      },
      "required": [
        "a",
        "b",
        "c"
      ]
    }
  },
  {
    "name": "calculate_circumference",
    "description": "Calculates the circumference of a circle with a given radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "The radius of the circle in the unit given."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement for the radius. Default is 'cm'."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "geometry.area_circle",
    "description": "Calculate the area of a circle given the radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "The radius of the circle."
        },
        "units": {
          "type": "string",
          "description": "The units in which the radius is measured (defaults to 'meters')."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "calculate_area",
    "description": "Calculate the area of a right-angled triangle given the lengths of its base and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base": {
          "type": "integer",
          "description": "The length of the base of the right-angled triangle."
        },
        "height": {
          "type": "integer",
          "description": "The height of the right-angled triangle."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measure used. Defaults to 'cm'."
        }
      },
      "required": [
        "base",
        "height"
      ]
    }
  },
  {
    "name": "calculate_derivative",
    "description": "Calculate the derivative of a polynomial function.",
    "parameters": {
      "type": "dict",
      "properties": {
        "function": {
          "type": "string",
          "description": "The polynomial function."
        },
        "x_value": {
          "type": "float",
          "description": "The x-value at which the derivative is calculated. Optional, default to 0.00."
        }
      },
      "required": [
        "function"
      ]
    }
  },
  {
    "name": "get_prime_factors",
    "description": "Function to retrieve prime factors of a number.",
    "parameters": {
      "type": "dict",
      "properties": {
        "number": {
          "type": "integer",
          "description": "Number for which prime factors need to be calculated"
        },
        "formatted": {
          "type": "boolean",
          "description": "Return formatted string if true, array if false. Default is true."
        }
      },
      "required": [
        "number",
        "formatted"
      ]
    }
  },
  {
    "name": "math.gcd",
    "description": "Calculate the greatest common divisor (gcd) of the two integers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num1": {
          "type": "integer",
          "description": "The first number."
        },
        "num2": {
          "type": "integer",
          "description": "The second number."
        }
      },
      "required": [
        "num1",
        "num2"
      ]
    }
  },
  {
    "name": "calculate_final_velocity",
    "description": "Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "height": {
          "type": "integer",
          "description": "The height the object is dropped from, in meters."
        },
        "initial_velocity": {
          "type": "integer",
          "description": "The initial velocity of the object in m/s. Default is zero."
        },
        "gravity": {
          "type": "float",
          "description": "Acceleration due to gravity. Default value is 9.81 m/s^2, earth's gravity."
        }
      },
      "required": [
        "height"
      ]
    }
  },
  {
    "name": "kinematics.final_velocity_from_distance",
    "description": "Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.",
    "parameters": {
      "type": "dict",
      "properties": {
        "acceleration": {
          "type": "integer",
          "description": "Acceleration of the object, m/s^2."
        },
        "distance": {
          "type": "integer",
          "description": "Distance traveled by the object, m."
        },
        "initial_velocity": {
          "type": "float",
          "description": "Initial velocity of the object. Default is 0, m/s"
        }
      },
      "required": [
        "acceleration",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_final_velocity",
    "description": "Calculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_velocity": {
          "type": "integer",
          "description": "The initial velocity of the object."
        },
        "acceleration": {
          "type": "float",
          "description": "The acceleration of the object."
        },
        "time": {
          "type": "integer",
          "description": "The time of acceleration."
        }
      },
      "required": [
        "initial_velocity",
        "acceleration",
        "time"
      ]
    }
  },
  {
    "name": "get_directions",
    "description": "Retrieve directions from one location to another.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The starting point of the journey."
        },
        "end_location": {
          "type": "string",
          "description": "The destination point of the journey."
        },
        "route_type": {
          "type": "string",
          "description": "Type of route to use (e.g., 'fastest', 'scenic'). Default is 'fastest'.",
          "enum": [
            "fastest",
            "scenic"
          ]
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "vegan_restaurant.find_nearby",
    "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. New York, NY, you should format it as City, State."
        },
        "operating_hours": {
          "type": "integer",
          "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "get_shortest_driving_distance",
    "description": "Calculate the shortest driving distance between two locations.",
    "parameters": {
      "type": "dict",
      "properties": {
        "origin": {
          "type": "string",
          "description": "Starting point of the journey. You should format it as city name like Boston."
        },
        "destination": {
          "type": "string",
          "description": "End point of the journey. You should format it as city name like Boston."
        },
        "unit": {
          "type": "string",
          "description": "Preferred unit of distance (optional, default is 'km')."
        }
      },
      "required": [
        "origin",
        "destination"
      ]
    }
  },
  {
    "name": "route.estimate_time",
    "description": "Estimate the travel time for a specific route with optional stops.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The starting point for the journey. It should be format as city name such as Boston."
        },
        "end_location": {
          "type": "string",
          "description": "The destination for the journey. It should be format as city name such as Boston."
        },
        "stops": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Additional cities or points of interest to stop at during the journey. Default is an empty list."
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "calculate_electrostatic_potential",
    "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge1": {
          "type": "float",
          "description": "The quantity of charge on the first body."
        },
        "charge2": {
          "type": "float",
          "description": "The quantity of charge on the second body."
        },
        "distance": {
          "type": "float",
          "description": "The distance between the two bodies."
        },
        "constant": {
          "type": "float",
          "description": "The value of the electrostatic constant. Default is 8.99e9."
        }
      },
      "required": [
        "charge1",
        "charge2",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_electric_field",
    "description": "Calculate the electric field produced by a charge at a certain distance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge": {
          "type": "integer",
          "description": "Charge in coulombs producing the electric field."
        },
        "distance": {
          "type": "integer",
          "description": "Distance from the charge in meters where the field is being measured."
        },
        "permitivity": {
          "type": "float",
          "description": "Permitivity of the space where field is being calculated, default is 8.854e-12."
        }
      },
      "required": [
        "charge",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_magnetic_field",
    "description": "Calculate the magnetic field produced at the center of a circular loop carrying current.",
    "parameters": {
      "type": "dict",
      "properties": {
        "current": {
          "type": "integer",
          "description": "The current through the circular loop in Amperes."
        },
        "radius": {
          "type": "integer",
          "description": "The radius of the circular loop in meters."
        },
        "permeability": {
          "type": "float",
          "description": "The magnetic permeability. Default is 12.57e10 (Vacuum Permeability)."
        }
      },
      "required": [
        "current",
        "radius"
      ]
    }
  },
  {
    "name": "electromagnetic_force",
    "description": "Calculate the electromagnetic force between two charges placed at a certain distance.",
    "parameters": {
      "type": "dict",
      "properties": {
        "charge1": {
          "type": "integer",
          "description": "The magnitude of the first charge in coulombs."
        },
        "charge2": {
          "type": "integer",
          "description": "The magnitude of the second charge in coulombs."
        },
        "distance": {
          "type": "integer",
          "description": "The distance between the two charges in meters."
        },
        "medium_permittivity": {
          "type": "float",
          "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854e-12 (Vacuum Permittivity)."
        }
      },
      "required": [
        "charge1",
        "charge2",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_magnetic_field_strength",
    "description": "Calculate the magnetic field strength at a point a certain distance away from a long wire carrying a current.",
    "parameters": {
      "type": "dict",
      "properties": {
        "current": {
          "type": "integer",
          "description": "The current flowing through the wire in Amperes."
        },
        "distance": {
          "type": "integer",
          "description": "The perpendicular distance from the wire to the point where the magnetic field is being calculated."
        },
        "permeability": {
          "type": "float",
          "description": "The permeability of the medium. Default is 12.57e-7 (Vacuum Permeability)."
        }
      },
      "required": [
        "current",
        "distance"
      ]
    }
  },
  {
    "name": "calculate_final_temperature",
    "description": "Calculates the final equilibrium temperature after mixing two bodies with different masses and temperatures",
    "parameters": {
      "type": "dict",
      "properties": {
        "mass1": {
          "type": "integer",
          "description": "The mass of the first body (kg)."
        },
        "temperature1": {
          "type": "integer",
          "description": "The initial temperature of the first body (Celsius)."
        },
        "mass2": {
          "type": "integer",
          "description": "The mass of the second body (kg)."
        },
        "temperature2": {
          "type": "integer",
          "description": "The initial temperature of the second body (Celsius)."
        },
        "specific_heat_capacity": {
          "type": "float",
          "description": "The specific heat capacity of the bodies in kJ/kg/K. If not provided, will default to that of water at room temperature, which is 4.2 kJ/kg/K."
        }
      },
      "required": [
        "mass1",
        "temperature1",
        "mass2",
        "temperature2"
      ]
    }
  },
  {
    "name": "calc_absolute_pressure",
    "description": "Calculates the absolute pressure from gauge and atmospheric pressures.",
    "parameters": {
      "type": "dict",
      "properties": {
        "atm_pressure": {
          "type": "integer",
          "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."
        },
        "gauge_pressure": {
          "type": "integer",
          "description": "The gauge pressure in atmospheres (atm). Must be provided."
        }
      },
      "required": [
        "gauge_pressure"
      ]
    }
  },
  {
    "name": "calculate_entropy_change",
    "description": "Calculate the entropy change for an isothermal and reversible process.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_temp": {
          "type": "integer",
          "description": "The initial temperature in Kelvin."
        },
        "final_temp": {
          "type": "integer",
          "description": "The final temperature in Kelvin."
        },
        "heat_capacity": {
          "type": "integer",
          "description": "The heat capacity in J/K."
        },
        "isothermal": {
          "type": "boolean",
          "description": "Whether the process is isothermal. Default is True."
        }
      },
      "required": [
        "initial_temp",
        "final_temp",
        "heat_capacity"
      ]
    }
  },
  {
    "name": "calc_heat_capacity",
    "description": "Calculate the heat capacity at constant pressure of air using its temperature and volume.",
    "parameters": {
      "type": "dict",
      "properties": {
        "temp": {
          "type": "integer",
          "description": "The temperature of the gas in Kelvin."
        },
        "volume": {
          "type": "integer",
          "description": "The volume of the gas in m^3."
        },
        "gas": {
          "type": "string",
          "description": "Type of gas, with 'air' as default."
        }
      },
      "required": [
        "temp",
        "volume"
      ]
    }
  },
  {
    "name": "calculate_cell_density",
    "description": "Calculate the cell density of a biological sample based on its optical density and the experiment dilution.",
    "parameters": {
      "type": "dict",
      "properties": {
        "optical_density": {
          "type": "float",
          "description": "The optical density of the sample, usually obtained from a spectrophotometer reading."
        },
        "dilution": {
          "type": "integer",
          "description": "The dilution factor applied during the experiment."
        },
        "calibration_factor": {
          "type": "float",
          "description": "The calibration factor to adjust the density, default value is 1e9 assuming cell density is in CFU/mL."
        }
      },
      "required": [
        "optical_density",
        "dilution"
      ]
    }
  },
  {
    "name": "calculate_molecular_weight",
    "description": "Calculate the molecular weight of a compound given the compound formula.",
    "parameters": {
      "type": "dict",
      "properties": {
        "compound": {
          "type": "string",
          "description": "The molecular formula of the compound."
        },
        "to_unit": {
          "type": "string",
          "description": "The unit in which to return the result."
        }
      },
      "required": [
        "compound",
        "to_unit"
      ]
    }
  },
  {
    "name": "analyze_dna_sequence",
    "description": "Analyzes the DNA sequence based on a reference sequence and return any potential mutations.",
    "parameters": {
      "type": "dict",
      "properties": {
        "sequence": {
          "type": "string",
          "description": "The DNA sequence to be analyzed."
        },
        "reference_sequence": {
          "type": "string",
          "description": "The reference DNA sequence."
        },
        "mutation_type": {
          "type": "string",
          "enum": [
            "insertion",
            "deletion",
            "substitution"
          ],
          "description": "Type of the mutation to be looked for in the sequence. Default to 'substitution'."
        }
      },
      "required": [
        "sequence",
        "reference_sequence"
      ]
    }
  },
  {
    "name": "calculate_genotype_frequency",
    "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.",
    "parameters": {
      "type": "dict",
      "properties": {
        "allele_frequency": {
          "type": "float",
          "description": "The frequency of the dominant allele in the population."
        },
        "genotype": {
          "type": "string",
          "description": "The genotype which frequency is needed.",
          "enum": [
            "AA",
            "Aa",
            "aa"
          ]
        }
      },
      "required": [
        "allele_frequency",
        "genotype"
      ]
    }
  },
  {
    "name": "calculate_density",
    "description": "Calculate the population density of a specific country in a specific year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The country for which the density needs to be calculated."
        },
        "year": {
          "type": "string",
          "description": "The year in which the density is to be calculated."
        },
        "population": {
          "type": "integer",
          "description": "The population of the country."
        },
        "land_area": {
          "type": "integer",
          "description": "The land area of the country in square kilometers."
        }
      },
      "required": [
        "country",
        "year",
        "population",
        "land_area"
      ]
    }
  },
  {
    "name": "identify_bird",
    "description": "Identify a bird species based on certain characteristics.",
    "parameters": {
      "type": "dict",
      "properties": {
        "color": {
          "type": "string",
          "description": "Color of the bird."
        },
        "habitat": {
          "type": "string",
          "description": "Habitat of the bird."
        },
        "size": {
          "type": "string",
          "enum": [
            "small",
            "medium",
            "large"
          ],
          "description": "Size of the bird. Default is 'small'"
        }
      },
      "required": [
        "color",
        "habitat"
      ]
    }
  },
  {
    "name": "ecology.get_turtle_population",
    "description": "Get the population and species of turtles in a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The name of the location."
        },
        "year": {
          "type": "integer",
          "description": "The year of the data requested. Default is 2001."
        },
        "species": {
          "type": "boolean",
          "description": "Whether to include species information. Default is false."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "calculate_vehicle_emission",
    "description": "Calculate the annual carbon emissions produced by a specific type of vehicle based on mileage.",
    "parameters": {
      "type": "dict",
      "properties": {
        "vehicle_type": {
          "type": "string",
          "description": "The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle."
        },
        "miles_driven": {
          "type": "integer",
          "description": "The number of miles driven per year."
        },
        "emission_factor": {
          "type": "float",
          "description": "Optional emission factor to calculate emissions, in g/mile. Default factor is 355.48."
        }
      },
      "required": [
        "vehicle_type",
        "miles_driven"
      ]
    }
  },
  {
    "name": "population_projections",
    "description": "Calculates the projected population growth based on the current growth rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The country for which to calculate the population projection."
        },
        "years": {
          "type": "integer",
          "description": "Number of years for the projection."
        },
        "growth_rate": {
          "type": "float",
          "description": "Optional parameter to specify the growth rate, in percentage. Default is 1.2."
        }
      },
      "required": [
        "country",
        "years"
      ]
    }
  },
  {
    "name": "calculate_bacteria_evolution_rate",
    "description": "Calculate the evolution rate of bacteria given the starting number, duplication frequency and total duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_population": {
          "type": "integer",
          "description": "The starting population of bacteria."
        },
        "duplication_frequency": {
          "type": "integer",
          "description": "The frequency of bacteria duplication per hour."
        },
        "duration": {
          "type": "integer",
          "description": "Total duration in hours."
        },
        "generation_time": {
          "type": "integer",
          "description": "The average generation time of the bacteria in minutes. Default is 20 minutes"
        }
      },
      "required": [
        "start_population",
        "duplication_frequency",
        "duration"
      ]
    }
  },
  {
    "name": "restaurant.find_nearby",
    "description": "Locate nearby restaurants based on specific dietary preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Los Angeles, CA"
        },
        "dietary_preference": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Vegan",
              "Vegetarian",
              "Gluten-free",
              "Dairy-free",
              "Nut-free"
            ]
          },
          "description": "Dietary preference. Default is empty list."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "average_temperature",
    "description": "Retrieves the average temperature for a specific location over the defined timeframe.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city to get the average temperature for. It should format as city name such as Boston."
        },
        "days": {
          "type": "integer",
          "description": "The number of days to get the average temperature for."
        },
        "temp_unit": {
          "type": "string",
          "description": "The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'."
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "find_restaurants",
    "description": "Locate nearby restaurants based on location and food preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The specific location or area. The location should be in the format of District, City."
        },
        "food_type": {
          "type": "string",
          "description": "The type of food preferred."
        },
        "number": {
          "type": "integer",
          "description": "Number of results to return."
        },
        "dietary_requirements": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Special dietary requirements, e.g. vegan, gluten-free. Default is empty list."
        }
      },
      "required": [
        "location",
        "food_type",
        "number"
      ]
    }
  },
  {
    "name": "map_routing.fastest_route",
    "description": "Finds the fastest route from one location to another, with an option to avoid toll roads.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The starting location for the journey."
        },
        "end_location": {
          "type": "string",
          "description": "The destination for the journey."
        },
        "avoid_tolls": {
          "type": "boolean",
          "description": "Option to avoid toll roads during the journey. Default is false."
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "calculate_average",
    "description": "Calculates the average of a list of numbers.",
    "parameters": {
      "type": "dict",
      "properties": {
        "numbers": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "The list of numbers to calculate the average of."
        }
      },
      "required": [
        "numbers"
      ]
    }
  },
  {
    "name": "calculate_distance",
    "description": "Calculate the distance between two GPS coordinates.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coord1": {
          "type": "tuple",
          "description": "The first coordinate as (latitude, longitude).",
          "items": {
            "type": "float"
          }
        },
        "coord2": {
          "type": "tuple",
          "description": "The second coordinate as (latitude, longitude).",
          "items": {
            "type": "float"
          }
        },
        "unit": {
          "type": "string",
          "description": "The unit of distance. Options: 'miles', 'kilometers'."
        }
      },
      "required": [
        "coord1",
        "coord2",
        "unit"
      ]
    }
  },
  {
    "name": "geo_distance.calculate",
    "description": "Calculate the geographic distance between two given locations.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_location": {
          "type": "string",
          "description": "The starting location for the distance calculation. Specify the location in the format of City, State."
        },
        "end_location": {
          "type": "string",
          "description": "The destination location for the distance calculation. Specify the location in the format of City, State."
        },
        "units": {
          "type": "string",
          "description": "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."
        }
      },
      "required": [
        "start_location",
        "end_location"
      ]
    }
  },
  {
    "name": "city_distance.find_shortest",
    "description": "Calculates the shortest distance between two cities via available public transportation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_city": {
          "type": "string",
          "description": "The city you are starting from. The parameter is in the format of city name."
        },
        "end_city": {
          "type": "string",
          "description": "The city you are heading to.The parameter is in the format of city name."
        },
        "transportation": {
          "type": "string",
          "description": "Preferred mode of public transportation. Default is 'bus'."
        },
        "allow_transfer": {
          "type": "boolean",
          "description": "Allows transfer between different transportation if true. Default is false."
        }
      },
      "required": [
        "start_city",
        "end_city"
      ]
    }
  },
  {
    "name": "array_sort",
    "description": "Sorts a given list in ascending or descending order.",
    "parameters": {
      "type": "dict",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "The list of numbers to be sorted."
        },
        "order": {
          "type": "string",
          "enum": [
            "ascending",
            "descending"
          ],
          "description": "Order of sorting."
        }
      },
      "required": [
        "list",
        "order"
      ]
    }
  },
  {
    "name": "db_fetch_records",
    "description": "Fetch records from a specified database table based on certain conditions.",
    "parameters": {
      "type": "dict",
      "properties": {
        "database_name": {
          "type": "string",
          "description": "The name of the database."
        },
        "table_name": {
          "type": "string",
          "description": "The name of the table from which records need to be fetched."
        },
        "conditions": {
          "type": "dict",
          "properties": {
            "department": {
              "type": "string",
              "description": "The name of the department of students."
            },
            "school": {
              "type": "string",
              "description": "The name of the school students are enrolled in."
            }
          },
          "description": "The conditions based on which records are to be fetched."
        },
        "fetch_limit": {
          "type": "integer",
          "description": "Limits the number of records to be fetched. Default is 0, which means no limit."
        }
      },
      "required": [
        "database_name",
        "table_name",
        "conditions"
      ]
    }
  },
  {
    "name": "employee.fetch_data",
    "description": "Fetches the detailed data for a specific employee in a given company.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company."
        },
        "employee_id": {
          "type": "integer",
          "description": "The unique ID of the employee."
        },
        "data_field": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Personal Info",
              "Job History",
              "Payroll",
              "Attendance"
            ]
          },
          "description": "Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']"
        }
      },
      "required": [
        "company_name",
        "employee_id"
      ]
    }
  },
  {
    "name": "get_restaurant",
    "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.",
    "parameters": {
      "type": "dict",
      "properties": {
        "cuisine": {
          "type": "string",
          "description": "Cuisine of the restaurant."
        },
        "location": {
          "type": "string",
          "description": "City where restaurant is located."
        },
        "condition": {
          "type": "string",
          "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"
        }
      },
      "required": [
        "cuisine",
        "location",
        "condition"
      ]
    }
  },
  {
    "name": "imdb.find_movies_by_actor",
    "description": "Searches the database to find all movies by a specific actor within a certain year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "actor_name": {
          "type": "string",
          "description": "The name of the actor."
        },
        "year": {
          "type": "integer",
          "description": "The specific year to search in."
        },
        "category": {
          "type": "string",
          "description": "The category of the film (e.g. Drama, Comedy, etc). Default is 'all'"
        }
      },
      "required": [
        "actor_name",
        "year"
      ]
    }
  },
  {
    "name": "get_theater_movie_releases",
    "description": "Retrieve the list of movie releases in specific theaters for a specified period. in the format of city shorten name like SF.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the theaters."
        },
        "timeframe": {
          "type": "integer",
          "description": "The number of days for which releases are required from current date."
        },
        "format": {
          "type": "string",
          "description": "Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. Default is 'all'"
        }
      },
      "required": [
        "location",
        "timeframe"
      ]
    }
  },
  {
    "name": "plot_sine_wave",
    "description": "Plot a sine wave for a given frequency in a given range.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start_range": {
          "type": "float",
          "description": "Start of the range in radians. Four decimal places."
        },
        "end_range": {
          "type": "float",
          "description": "End of the range in radians. Four decimal places."
        },
        "frequency": {
          "type": "integer",
          "description": "Frequency of the sine wave in Hz."
        },
        "amplitude": {
          "type": "integer",
          "description": "Amplitude of the sine wave. Default is 1."
        },
        "phase_shift": {
          "type": "integer",
          "description": "Phase shift of the sine wave in radians. Default is 0."
        }
      },
      "required": [
        "start_range",
        "end_range",
        "frequency"
      ]
    }
  },
  {
    "name": "calculate_distance",
    "description": "Calculate the distance between two celestial bodies.",
    "parameters": {
      "type": "dict",
      "properties": {
        "body1": {
          "type": "string",
          "description": "The first celestial body."
        },
        "body2": {
          "type": "string",
          "description": "The second celestial body."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement, default is 'km'."
        }
      },
      "required": [
        "body1",
        "body2"
      ]
    }
  },
  {
    "name": "mathematics.calculate_area_under_curve",
    "description": "Calculate the area under the curve for a given polynomial function within a specified interval.",
    "parameters": {
      "type": "dict",
      "properties": {
        "polynomial": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."
        },
        "limits": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "A list of two numbers specifying the lower and upper limit for the integration interval."
        }
      },
      "required": [
        "polynomial",
        "limits"
      ]
    }
  },
  {
    "name": "predict_house_price",
    "description": "Predict the price of a house in a given area based on number of bedrooms, bathrooms and area.",
    "parameters": {
      "type": "dict",
      "properties": {
        "bedrooms": {
          "type": "integer",
          "description": "The number of bedrooms in the house."
        },
        "bathrooms": {
          "type": "integer",
          "description": "The number of bathrooms in the house."
        },
        "area": {
          "type": "integer",
          "description": "The area of the house in square feet."
        },
        "location": {
          "type": "string",
          "description": "The location of the house in the format of city name."
        }
      },
      "required": [
        "bedrooms",
        "bathrooms",
        "area",
        "location"
      ]
    }
  },
  {
    "name": "stats.t_test",
    "description": "Perform a two-sample t-test for two given arrays.",
    "parameters": {
      "type": "dict",
      "properties": {
        "array_1": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "First array of data."
        },
        "array_2": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Second array of data."
        },
        "alpha": {
          "type": "float",
          "description": "Significance level for hypothesis testing."
        }
      },
      "required": [
        "array_1",
        "array_2",
        "alpha"
      ]
    }
  },
  {
    "name": "hypothesis_testing.ttest_ind",
    "description": "Conducts a hypothesis test for two independent samples.",
    "parameters": {
      "type": "dict",
      "properties": {
        "sample1": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "First set of observations (array of numbers)."
        },
        "sample2": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Second set of observations (array of numbers)."
        },
        "significance_level": {
          "type": "float",
          "description": "Significance level of the test (default: 0.05)"
        }
      },
      "required": [
        "sample1",
        "sample2"
      ]
    }
  },
  {
    "name": "chi_squared_test",
    "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.",
    "parameters": {
      "type": "dict",
      "properties": {
        "table": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "description": "A 2x2 contingency table presented in array form."
        },
        "alpha": {
          "type": "float",
          "description": "Significance level for the Chi-Squared test. Default is 0.05."
        }
      },
      "required": [
        "table"
      ]
    }
  },
  {
    "name": "hypothesis_testing.two_sample_t_test",
    "description": "Perform a two-sample t-test to determine if there is a significant difference between the means of two independent samples.",
    "parameters": {
      "type": "dict",
      "properties": {
        "group1": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "Sample observations from group 1."
        },
        "group2": {
          "type": "array",
          "items": {
            "type": "float"
          },
          "description": "Sample observations from group 2."
        },
        "alpha": {
          "type": "float",
          "description": "Significance level for the t-test. Default is 0.05."
        }
      },
      "required": [
        "group1",
        "group2"
      ]
    }
  },
  {
    "name": "calculate_NPV",
    "description": "Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.",
    "parameters": {
      "type": "dict",
      "properties": {
        "cash_flows": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Series of future cash flows."
        },
        "discount_rate": {
          "type": "float",
          "description": "The discount rate to use."
        },
        "initial_investment": {
          "type": "integer",
          "description": "The initial investment. Default is 0 if not specified."
        }
      },
      "required": [
        "cash_flows",
        "discount_rate"
      ]
    }
  },
  {
    "name": "calculate_discounted_cash_flow",
    "description": "Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "coupon_payment": {
          "type": "integer",
          "description": "The annual coupon payment."
        },
        "period": {
          "type": "integer",
          "description": "The time frame in years for which coupon payment is made."
        },
        "discount_rate": {
          "type": "float",
          "description": "The discount rate."
        },
        "face_value": {
          "type": "integer",
          "description": "The face value of the bond, default is 1000."
        }
      },
      "required": [
        "coupon_payment",
        "period",
        "discount_rate"
      ]
    }
  },
  {
    "name": "finance_calculator.npv",
    "description": "Calculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate.",
    "parameters": {
      "type": "dict",
      "properties": {
        "cash_flows": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "A list of cash flows."
        },
        "discount_rate": {
          "type": "float",
          "description": "The annual interest rate used to discount the cash flows."
        },
        "years": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "A list of years when the cash flow occurs. Default is empty array."
        }
      },
      "required": [
        "cash_flows",
        "discount_rate"
      ]
    }
  },
  {
    "name": "estimate_mutual_fund_return",
    "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "yearly_yield": {
          "type": "float",
          "description": "The yearly yield of the mutual fund as a percentage."
        },
        "investment_amount": {
          "type": "integer",
          "description": "The initial investment amount in the mutual fund."
        },
        "years": {
          "type": "integer",
          "description": "The time period for which the investment is made in years."
        }
      },
      "required": [
        "yearly_yield",
        "investment_amount",
        "years"
      ]
    }
  },
  {
    "name": "calculate_compounded_interest",
    "description": "Calculate the compounded interest for a given principal, interest rate, and period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principal": {
          "type": "integer",
          "description": "The initial principal."
        },
        "interest_rate": {
          "type": "float",
          "description": "The annual interest rate."
        },
        "period": {
          "type": "integer",
          "description": "The period in years."
        },
        "compounding_frequency": {
          "type": "string",
          "description": "The frequency of compounding per year. Defaults to 'Annually'.",
          "enum": [
            "Annually",
            "Semiannually",
            "Quarterly",
            "Monthly",
            "Daily"
          ]
        }
      },
      "required": [
        "principal",
        "interest_rate",
        "period"
      ]
    }
  },
  {
    "name": "calculate_roi",
    "description": "Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "deposit": {
          "type": "integer",
          "description": "The initial deposit amount."
        },
        "annual_interest_rate": {
          "type": "float",
          "description": "The annual interest rate provided by the bank."
        },
        "years": {
          "type": "integer",
          "description": "The period for which the money is invested."
        }
      },
      "required": [
        "deposit",
        "annual_interest_rate",
        "years"
      ]
    }
  },
  {
    "name": "highest_grossing_banks",
    "description": "Retrieve the highest grossing banks in a specified country and year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The country to get the data from."
        },
        "year": {
          "type": "integer",
          "description": "The year to get the data from."
        },
        "top_n": {
          "type": "integer",
          "description": "Top n banks in terms of grossing. Default is 5"
        }
      },
      "required": [
        "country",
        "year"
      ]
    }
  },
  {
    "name": "calculate_compounded_interest",
    "description": "Calculate the compounded interest for a given initial deposit, interest rate, time and number of times the interest is compounded per unit time.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principal": {
          "type": "integer",
          "description": "The initial amount of money that is being invested or loaned."
        },
        "rate": {
          "type": "float",
          "description": "The annual interest rate."
        },
        "time": {
          "type": "integer",
          "description": "The number of time periods the money is invested or loaned for."
        },
        "n": {
          "type": "integer",
          "description": "The number of times that interest is compounded per unit time."
        }
      },
      "required": [
        "principal",
        "rate",
        "time",
        "n"
      ]
    }
  },
  {
    "name": "calculate_future_value",
    "description": "Calculates the future value of an investment based on the present value, interest rate, and time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "present_value": {
          "type": "integer",
          "description": "The present value or principal amount."
        },
        "annual_interest_rate": {
          "type": "float",
          "description": "The annual interest rate in decimal form. Example, 5% is 0.05."
        },
        "years": {
          "type": "integer",
          "description": "The time period in years for which the investment is made."
        },
        "compounds_per_year": {
          "type": "integer",
          "description": "The number of times the interest is compounded per year. Default is 1 (annual compounding)."
        }
      },
      "required": [
        "present_value",
        "annual_interest_rate",
        "years"
      ]
    }
  },
  {
    "name": "calculate_future_value",
    "description": "Calculate the future value of an investment given the initial amount, interest rate, and investment duration.",
    "parameters": {
      "type": "dict",
      "properties": {
        "initial_investment": {
          "type": "integer",
          "description": "The initial investment amount."
        },
        "interest_rate": {
          "type": "float",
          "description": "The annual interest rate in decimal form."
        },
        "duration": {
          "type": "integer",
          "description": "The investment duration in years."
        },
        "compounded": {
          "type": "integer",
          "description": "The number of times the interest is compounded per year. Default is 1 (annual compounding)."
        }
      },
      "required": [
        "initial_investment",
        "interest_rate",
        "duration"
      ]
    }
  },
  {
    "name": "criminal_history.check_felonies",
    "description": "This function checks if an individual has any prior felony convictions based on their full name and birth date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "full_name": {
          "type": "string",
          "description": "The full name of the individual."
        },
        "birth_date": {
          "type": "string",
          "description": "The birth date of the individual. Must be in MM-DD-YYYY format."
        },
        "state": {
          "type": "string",
          "description": "The state to search the criminal record in. Default to 'None', which the function will search across all states."
        }
      },
      "required": [
        "full_name",
        "birth_date"
      ]
    }
  },
  {
    "name": "get_criminal_records",
    "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the person."
        },
        "location": {
          "type": "string",
          "description": "The city and state, e.g. New York, NY"
        },
        "from_year": {
          "type": "integer",
          "description": "The start year of the time frame."
        },
        "to_year": {
          "type": "integer",
          "description": "The end year of the time frame."
        }
      },
      "required": [
        "name",
        "location",
        "from_year",
        "to_year"
      ]
    }
  },
  {
    "name": "get_act_details",
    "description": "Retrieve the details of a particular legal act based on its name and year of amendment if any.",
    "parameters": {
      "type": "dict",
      "properties": {
        "act_name": {
          "type": "string",
          "description": "The name of the act."
        },
        "amendment_year": {
          "type": "integer",
          "description": "Year of amendment if any. If not provided, the latest amendment year will be considered."
        }
      },
      "required": [
        "act_name",
        "amendment_year"
      ]
    }
  },
  {
    "name": "crime_statute_lookup",
    "description": "Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.",
    "parameters": {
      "type": "dict",
      "properties": {
        "jurisdiction": {
          "type": "string",
          "description": "The jurisdiction to search in, usually a state or country."
        },
        "crime": {
          "type": "string",
          "description": "The crime to search for."
        },
        "detail_level": {
          "type": "string",
          "enum": [
            "basic",
            "detailed"
          ],
          "description": "How detailed of a report to return. Optional, default is 'basic'."
        }
      },
      "required": [
        "jurisdiction",
        "crime"
      ]
    }
  },
  {
    "name": "generate_law_contract",
    "description": "Generates a customized law contract given involved parties, contract type and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "parties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parties involved in the contract."
        },
        "contract_type": {
          "type": "string",
          "description": "Type of the contract."
        },
        "location": {
          "type": "string",
          "description": "Location where the contract will be in effect."
        }
      },
      "required": [
        "parties",
        "contract_type",
        "location"
      ]
    }
  },
  {
    "name": "property_records.get",
    "description": "Fetch property records based on location, parcel number and county.",
    "parameters": {
      "type": "dict",
      "properties": {
        "address": {
          "type": "string",
          "description": "Address of the property."
        },
        "parcel_number": {
          "type": "string",
          "description": "Parcel number of the property."
        },
        "county": {
          "type": "string",
          "description": "County where the property is located."
        },
        "include_owner": {
          "type": "boolean",
          "description": "Include owner's name in the property record. Default is false.",
          "default": false
        }
      },
      "required": [
        "address",
        "parcel_number",
        "county"
      ]
    }
  },
  {
    "name": "get_crime_rate",
    "description": "Retrieve the official crime rate of a city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The name of the city."
        },
        "state": {
          "type": "string",
          "description": "The state where the city is located."
        },
        "type": {
          "type": "string",
          "description": "Optional. The type of crime. Default is 'violent'"
        },
        "year": {
          "type": "integer",
          "description": "Optional. The year for the crime rate data. Default is year 2001."
        }
      },
      "required": [
        "city",
        "state"
      ]
    }
  },
  {
    "name": "civil_cases.retrieve",
    "description": "Retrieve civil cases based on given parameters, including year, crime type, and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "year": {
          "type": "integer",
          "description": "Year of the cases"
        },
        "crime_type": {
          "type": "string",
          "description": "Type of the crime."
        },
        "location": {
          "type": "string",
          "description": "Location of the case in the format of city name."
        }
      },
      "required": [
        "year",
        "crime_type",
        "location"
      ]
    }
  },
  {
    "name": "lawyer.find_nearby",
    "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city and state, e.g. Chicago, IL."
        },
        "specialty": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Civil",
              "Divorce",
              "Immigration",
              "Business",
              "Criminal"
            ]
          },
          "description": "Specialization of the lawyer."
        },
        "fee": {
          "type": "integer",
          "description": "Hourly fee charged by lawyer"
        }
      },
      "required": [
        "city",
        "specialty",
        "fee"
      ]
    }
  },
  {
    "name": "law.civil.get_case_details",
    "description": "Retrieve the details of a Supreme Court case given its title.",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_title": {
          "type": "string",
          "description": "Title of the Supreme Court case."
        },
        "include_dissent": {
          "type": "boolean",
          "description": "If true, the output will include details of the dissenting opinion."
        }
      },
      "required": [
        "case_title",
        "include_dissent"
      ]
    }
  },
  {
    "name": "lawsuit_search",
    "description": "Search for lawsuits related to a specific company within a specific date range and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company": {
          "type": "string",
          "description": "The company related to the lawsuit."
        },
        "start_date": {
          "type": "string",
          "description": "Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY."
        },
        "location": {
          "type": "string",
          "description": "Location where the lawsuit was filed in the format of full state name."
        },
        "status": {
          "type": "string",
          "enum": [
            "ongoing",
            "settled",
            "dismissed"
          ],
          "description": "The status of the lawsuit. Default is 'ongoing'."
        }
      },
      "required": [
        "company",
        "start_date",
        "location"
      ]
    }
  },
  {
    "name": "court_case.search",
    "description": "Retrieves details about a court case using its docket number and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "docket_number": {
          "type": "string",
          "description": "The docket number for the case."
        },
        "location": {
          "type": "string",
          "description": "The location where the case is registered, in the format: state, e.g., Texas"
        },
        "full_text": {
          "type": "boolean",
          "default": "false",
          "description": "Option to return the full text of the case ruling."
        }
      },
      "required": [
        "docket_number",
        "location"
      ]
    }
  },
  {
    "name": "fetch_law_case_details",
    "description": "Fetch details of a specific law case based on case number, year and court.",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_number": {
          "type": "integer",
          "description": "The specific number of the law case."
        },
        "court": {
          "type": "string",
          "description": "The city name where the court takes place"
        },
        "year": {
          "type": "integer",
          "description": "The year in which the law case took place."
        }
      },
      "required": [
        "case_number",
        "court",
        "year"
      ]
    }
  },
  {
    "name": "legal_case.fetch",
    "description": "Fetch detailed legal case information from database.",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_id": {
          "type": "string",
          "description": "The ID of the legal case."
        },
        "details": {
          "type": "boolean",
          "description": "True if need the detail info. "
        }
      },
      "required": [
        "case_id",
        "details"
      ]
    }
  },
  {
    "name": "law_case_search",
    "description": "Search and retrieve law cases based on the topic, timeline, and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "topic": {
          "type": "string",
          "description": "The subject matter of the case."
        },
        "year_range": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The start and end year for searching cases."
        },
        "location": {
          "type": "string",
          "description": "The location where the case is being heard."
        },
        "judicial_system": {
          "type": "string",
          "description": "The specific judicial system in which to search (e.g. 'federal', 'state').",
          "default": "all"
        }
      },
      "required": [
        "topic",
        "year_range",
        "location"
      ]
    }
  },
  {
    "name": "get_top_cases",
    "description": "Retrieve a list of the most influential or landmark cases in a specific field of law.",
    "parameters": {
      "type": "dict",
      "properties": {
        "field_of_law": {
          "type": "string",
          "description": "The specific field of law e.g., constitutional law, criminal law, etc."
        },
        "top_number": {
          "type": "integer",
          "description": "The number of top cases to retrieve."
        },
        "country": {
          "type": "string",
          "description": "The country where the law cases should be retrieved from. Default is United States of America."
        }
      },
      "required": [
        "field_of_law",
        "top_number"
      ]
    }
  },
  {
    "name": "lawyer.get_experience",
    "description": "Retrieve months of experience of a Lawyer on handling certain type of law cases.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The full name of the Lawyer."
        },
        "law_type": {
          "type": "string",
          "description": "The type of law case. eg. Bankruptcy"
        }
      },
      "required": [
        "name",
        "law_type"
      ]
    }
  },
  {
    "name": "lawsuit_details.find",
    "description": "Find details of lawsuits involving a specific company from a given year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "Name of the company."
        },
        "year": {
          "type": "integer",
          "description": "Year of the lawsuit."
        },
        "case_type": {
          "type": "string",
          "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'."
        }
      },
      "required": [
        "company_name",
        "year"
      ]
    }
  },
  {
    "name": "get_lawsuit_cases",
    "description": "Retrieve all lawsuit cases related to a specific company during a particular year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company."
        },
        "year": {
          "type": "integer",
          "description": "The specific year to search for lawsuit cases."
        },
        "status": {
          "type": "string",
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."
        }
      },
      "required": [
        "company_name",
        "year"
      ]
    }
  },
  {
    "name": "get_lawsuit_details",
    "description": "Retrieve the detailed information about a lawsuit based on its case number and the court location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_number": {
          "type": "string",
          "description": "The case number of the lawsuit."
        },
        "court_location": {
          "type": "string",
          "description": "The location of the court where the case is filed."
        },
        "additional_details": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "attorneys",
              "plaintiffs",
              "defendants",
              "charges",
              "court_updates"
            ]
          },
          "description": "Optional. Array containing additional details to be fetched. Default is all."
        }
      },
      "required": [
        "case_number",
        "court_location"
      ]
    }
  },
  {
    "name": "find_latest_court_case",
    "description": "Find the latest court case between two companies.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company1": {
          "type": "string",
          "description": "The name of the first company."
        },
        "company2": {
          "type": "string",
          "description": "The name of the second company."
        },
        "country": {
          "type": "string",
          "description": "The country in which the court case is located.",
          "default": "USA"
        }
      },
      "required": [
        "company1",
        "company2"
      ]
    }
  },
  {
    "name": "lawsuits_search",
    "description": "Search for lawsuits against a specific company within a specific time and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "company_name": {
          "type": "string",
          "description": "The name of the company."
        },
        "location": {
          "type": "string",
          "description": "The location where the lawsuit was filed."
        },
        "year": {
          "type": "integer",
          "description": "The year when the lawsuit was filed."
        },
        "case_type": {
          "type": "string",
          "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. Default is 'all'."
        }
      },
      "required": [
        "company_name",
        "location",
        "year"
      ]
    }
  },
  {
    "name": "lawsuit_info",
    "description": "Retrieves details of a lawsuit given a case number",
    "parameters": {
      "type": "dict",
      "properties": {
        "case_number": {
          "type": "string",
          "description": "The unique identifier of the lawsuit case"
        },
        "year": {
          "type": "integer",
          "description": "The year in which the lawsuit case was initiated. Default is 2023 if not specified.",
          "optional": true,
          "default": 2023
        },
        "location": {
          "type": "string",
          "description": "The location or court jurisdiction where the case was filed. Default is 'all'.",
          "optional": true
        }
      },
      "required": [
        "case_number"
      ]
    }
  },
  {
    "name": "lawsuit_search",
    "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.",
    "parameters": {
      "type": "dict",
      "properties": {
        "entity": {
          "type": "string",
          "description": "The entity involved in lawsuits."
        },
        "county": {
          "type": "string",
          "description": "The jurisdiction for the lawsuit search for example Alameda county."
        },
        "state": {
          "type": "string",
          "description": "The state for the lawsuit search. Default is California."
        }
      },
      "required": [
        "entity",
        "county"
      ]
    }
  },
  {
    "name": "detailed_weather_forecast",
    "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city name that you want to get the weather for."
        },
        "duration": {
          "type": "integer",
          "description": "Duration in hours for the detailed forecast."
        },
        "include_precipitation": {
          "type": "boolean",
          "description": "Whether to include precipitation data in the forecast. Default is false."
        }
      },
      "required": [
        "location",
        "duration"
      ]
    }
  },
  {
    "name": "current_weather_condition",
    "description": "Get the current weather conditions of a specific city including temperature and humidity.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city that you want to get the current weather conditions for."
        },
        "country": {
          "type": "string",
          "description": "The country of the city you specified."
        },
        "measurement": {
          "type": "string",
          "description": "You can specify which unit to display the temperature in, 'c' for Celsius, 'f' for Fahrenheit. Default is 'c'."
        }
      },
      "required": [
        "city",
        "country"
      ]
    }
  },
  {
    "name": "get_current_weather",
    "description": "Retrieves the current temperature and humidity for a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city name to get the weather for."
        },
        "include_temperature": {
          "type": "boolean",
          "description": "Whether to include the temperature in the result. Default is true."
        },
        "include_humidity": {
          "type": "boolean",
          "description": "Whether to include the humidity in the result. Default is true."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "weather_forecast_detailed",
    "description": "Retrieve a detailed weather forecast for a specific city like Boston and time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the weather for."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for the forecast."
        },
        "details": {
          "type": "boolean",
          "description": "Provide detailed weather information or not.",
          "default": false
        }
      },
      "required": [
        "location",
        "days"
      ]
    }
  },
  {
    "name": "get_plants_for_slope",
    "description": "Retrieve the list of plants suitable for slope based on erosion control ability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "slope_type": {
          "type": "string",
          "description": "The type of slope like steep, moderate etc."
        },
        "num_results": {
          "type": "integer",
          "description": "The number of top results needed. Default is 5."
        }
      },
      "required": [
        "slope_type",
        "num_results"
      ]
    }
  },
  {
    "name": "calculate_carbon_footprint",
    "description": "Calculate the estimated carbon footprint of a lifestyle based on factors such as daily driving distance, weekly meat consumption, and yearly trash production.",
    "parameters": {
      "type": "dict",
      "properties": {
        "daily_miles": {
          "type": "integer",
          "description": "The daily driving distance in miles."
        },
        "meat_meals_per_week": {
          "type": "integer",
          "description": "The number of meat-based meals consumed per week."
        },
        "annual_trash_weight": {
          "type": "integer",
          "description": "The yearly weight of trash production in pounds."
        },
        "flights_per_year": {
          "type": "integer",
          "description": "The number of flights taken per year. Default is 0."
        }
      },
      "required": [
        "daily_miles",
        "meat_meals_per_week",
        "annual_trash_weight"
      ]
    }
  },
  {
    "name": "air_quality",
    "description": "Retrieve the air quality index for a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the air quality index for."
        },
        "date": {
          "type": "string",
          "description": "The date (month-day-year) you want to get the air quality index for."
        }
      },
      "required": [
        "location",
        "date"
      ]
    }
  },
  {
    "name": "get_air_quality_index",
    "description": "Retrieve the air quality index at a specified location and time.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location to get the air quality index for."
        },
        "time": {
          "type": "string",
          "description": "The specific time to check the air quality. Default is the current time."
        }
      },
      "required": [
        "location",
        "time"
      ]
    }
  },
  {
    "name": "calculate_daily_water_intake",
    "description": "Calculate the recommended daily water intake for a person based on their weight.",
    "parameters": {
      "type": "dict",
      "properties": {
        "weight": {
          "type": "integer",
          "description": "The weight of the person in kilograms."
        },
        "activity_level": {
          "type": "string",
          "description": "The level of physical activity of the person. Default is 'moderate'."
        },
        "climate": {
          "type": "string",
          "description": "The climate of the area where the person lives. Default is 'temperate'."
        }
      },
      "required": [
        "weight"
      ]
    }
  },
  {
    "name": "environmental_data.air_quality_index",
    "description": "Retrieves Air Quality Index (AQI) for specified location over a number of days.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "Name of the city or town to retrieve air quality index for."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for which to retrieve data. If not provided, default to today."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "calculate_emissions",
    "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.",
    "parameters": {
      "type": "dict",
      "properties": {
        "distance": {
          "type": "integer",
          "description": "The distance travelled in miles."
        },
        "fuel_type": {
          "type": "string",
          "description": "Type of fuel used by the vehicle."
        },
        "fuel_efficiency": {
          "type": "float",
          "description": "The vehicle's fuel efficiency in miles per gallon."
        },
        "efficiency_reduction": {
          "type": "integer",
          "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"
        }
      },
      "required": [
        "distance",
        "fuel_type",
        "fuel_efficiency"
      ]
    }
  },
  {
    "name": "estimate_population",
    "description": "Estimate the population of a particular species in a given country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "species": {
          "type": "string",
          "description": "The species for which population needs to be estimated."
        },
        "country": {
          "type": "string",
          "description": "The country where the species lives."
        },
        "year": {
          "type": "integer",
          "description": "The year for which population estimate is sought. Default is the current year."
        }
      },
      "required": [
        "species",
        "country"
      ]
    }
  },
  {
    "name": "calculate_emission_savings",
    "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.",
    "parameters": {
      "type": "dict",
      "properties": {
        "energy_type": {
          "type": "string",
          "description": "Type of the renewable energy source."
        },
        "usage_duration": {
          "type": "integer",
          "description": "Usage duration in months."
        },
        "region": {
          "type": "string",
          "description": "The region where you use energy. Default is 'Texas'."
        }
      },
      "required": [
        "energy_type",
        "usage_duration"
      ]
    }
  },
  {
    "name": "get_air_quality",
    "description": "Retrieve real-time air quality and pollution data for a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the air quality data for."
        },
        "detail": {
          "type": "boolean",
          "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "parks.find_nearby",
    "description": "Locate nearby parks based on specific criteria like tennis court availability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. London, UK"
        },
        "amenities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Tennis Court",
              "Picnic Area",
              "Playground",
              "Running Track"
            ]
          },
          "description": "Preferred amenities in park. Default is ['Running Track']"
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "map_service.get_directions",
    "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "start": {
          "type": "string",
          "description": "Starting location for the route."
        },
        "end": {
          "type": "string",
          "description": "Ending location for the route."
        },
        "avoid": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "tolls",
              "highways",
              "ferries"
            ]
          },
          "description": "Route features to avoid. Default is ['highways', 'ferries']"
        }
      },
      "required": [
        "start",
        "end"
      ]
    }
  },
  {
    "name": "get_news",
    "description": "Fetches the latest news on a specific topic.",
    "parameters": {
      "type": "dict",
      "properties": {
        "topic": {
          "type": "string",
          "description": "The subject for the news topic."
        },
        "quantity": {
          "type": "integer",
          "description": "Number of articles to fetch."
        },
        "region": {
          "type": "string",
          "description": "The geographical region for the news. Default is 'US'."
        }
      },
      "required": [
        "topic",
        "quantity"
      ]
    }
  },
  {
    "name": "send_email",
    "description": "Send an email to the specified email address.",
    "parameters": {
      "type": "dict",
      "properties": {
        "to": {
          "type": "string",
          "description": "The email address to send to."
        },
        "subject": {
          "type": "string",
          "description": "The subject of the email."
        },
        "body": {
          "type": "string",
          "description": "The body content of the email."
        },
        "cc": {
          "type": "string",
          "description": "The email address to carbon copy. Default is empty if not specified."
        },
        "bcc": {
          "type": "string",
          "description": "The email address to blind carbon copy. Default is empty if not specified."
        }
      },
      "required": [
        "to",
        "subject",
        "body"
      ]
    }
  },
  {
    "name": "flight.book",
    "description": "Book a direct flight for a specific date and time from departure location to destination location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "departure_location": {
          "type": "string",
          "description": "The location you are departing from."
        },
        "destination_location": {
          "type": "string",
          "description": "The location you are flying to."
        },
        "date": {
          "type": "string",
          "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."
        },
        "time": {
          "type": "string",
          "description": "Preferred time of flight. Default is 'morning'."
        },
        "direct_flight": {
          "type": "boolean",
          "description": "If set to true, only direct flights will be searched. Default is false."
        }
      },
      "required": [
        "departure_location",
        "destination_location",
        "date"
      ]
    }
  },
  {
    "name": "fMRI.analyze",
    "description": "This function takes in fMRI data to output analyzed data.",
    "parameters": {
      "type": "dict",
      "properties": {
        "data_source": {
          "type": "string",
          "description": "The path where the data is stored."
        },
        "sequence_type": {
          "type": "string",
          "description": "Type of fMRI sequence"
        },
        "smooth": {
          "type": "integer",
          "description": "Spatial smoothing FWHM. In mm."
        },
        "voxel_size": {
          "type": "integer",
          "description": "Size of isotropic voxels in mm.",
          "default": 3
        }
      },
      "required": [
        "data_source",
        "sequence_type",
        "smooth"
      ]
    }
  },
  {
    "name": "patient.get_mri_report",
    "description": "Fetch the brain MRI report of the patient for a given status.",
    "parameters": {
      "type": "dict",
      "properties": {
        "patient_id": {
          "type": "string",
          "description": "The patient identifier."
        },
        "mri_type": {
          "type": "string",
          "description": "Type of the MRI. Default to be 'brain'.",
          "enum": [
            "brain",
            "spinal",
            "chest",
            "abdominal"
          ]
        },
        "status": {
          "type": "string",
          "description": "Status of the report, could be 'in progress', 'concluded' or 'draft'.",
          "enum": [
            "in progress",
            "concluded",
            "draft"
          ]
        }
      },
      "required": [
        "patient_id",
        "status"
      ]
    }
  },
  {
    "name": "get_neuron_coordinates",
    "description": "Retrieve the coordinates of the specified neuron in the rat's brain.",
    "parameters": {
      "type": "dict",
      "properties": {
        "neuron_type": {
          "type": "string",
          "description": "Type of neuron to find. For instance, GABA, Glutamate, etc."
        },
        "brain_region": {
          "type": "string",
          "description": "The region of the brain to consider.",
          "default": "All"
        }
      },
      "required": [
        "neuron_type",
        "brain_region"
      ]
    }
  },
  {
    "name": "calculate_neuronal_activity",
    "description": "Calculate the neuronal activity (rate of firing) based on a given input synaptic rate, weight of inputs, and decay rate. Higher input or weight increases firing rate and higher decay rate decreases it.",
    "parameters": {
      "type": "dict",
      "properties": {
        "input_synaptic_rate": {
          "type": "integer",
          "description": "The synaptic input rate, usually represented as number of inputs per second."
        },
        "weight": {
          "type": "float",
          "description": "The weight of the input, denoting its influence on the neuron's state. Default is 1.0."
        },
        "decay_rate": {
          "type": "float",
          "description": "The rate at which the neuron's potential decays in the absence of inputs."
        }
      },
      "required": [
        "input_synaptic_rate",
        "decay_rate"
      ]
    }
  },
  {
    "name": "population_growth_estimate",
    "description": "Estimate the future population growth of a specific location over a specified time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to estimate the population growth for."
        },
        "years": {
          "type": "integer",
          "description": "Number of years into the future for the estimate."
        },
        "rate": {
          "type": "float",
          "description": "Expected annual growth rate in percentage. Default is 1.2."
        }
      },
      "required": [
        "location",
        "years"
      ]
    }
  },
  {
    "name": "calculate_bmi",
    "description": "Calculate the Body Mass Index based on given weight and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "weight": {
          "type": "integer",
          "description": "The weight of a person in kilograms."
        },
        "height": {
          "type": "integer",
          "description": "The height of a person in centimeters."
        },
        "unit": {
          "type": "string",
          "description": "Optional. The measurement system to be used for the result. The default is 'metric'."
        }
      },
      "required": [
        "weight",
        "height"
      ]
    }
  },
  {
    "name": "social_media_analytics.most_followed",
    "description": "Find the most followed Twitter user related to certain topics.",
    "parameters": {
      "type": "dict",
      "properties": {
        "topic": {
          "type": "string",
          "description": "The main topic of interest."
        },
        "sub_topics": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Sub-topics related to main topic. Default is empty."
        },
        "region": {
          "type": "string",
          "description": "Region of interest for twitter search. Default is 'all'."
        }
      },
      "required": [
        "topic"
      ]
    }
  },
  {
    "name": "get_personality_traits",
    "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.",
    "parameters": {
      "type": "dict",
      "properties": {
        "type": {
          "type": "string",
          "description": "The personality type."
        },
        "traits": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "strengths",
              "weaknesses"
            ]
          },
          "description": "List of traits to be retrieved, default is ['strengths']."
        }
      },
      "required": [
        "type"
      ]
    }
  },
  {
    "name": "get_bigfive_scores",
    "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.",
    "parameters": {
      "type": "dict",
      "properties": {
        "characteristics": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of user's behavioural characteristics."
        },
        "scale": {
          "type": "string",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "description": "The scoring scale of traits (default is medium)."
        }
      },
      "required": [
        "characteristics"
      ]
    }
  },
  {
    "name": "historic_leader_search",
    "description": "Retrieve information about a historical leader given a location and date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The country or region in question."
        },
        "date": {
          "type": "integer",
          "description": "The year being queried."
        },
        "title": {
          "type": "string",
          "description": "The official title of the position. Default is 'King'."
        }
      },
      "required": [
        "location",
        "date"
      ]
    }
  },
  {
    "name": "history.get_key_events",
    "description": "Retrieve key historical events within a specific period for a certain country.",
    "parameters": {
      "type": "dict",
      "properties": {
        "country": {
          "type": "string",
          "description": "The name of the country for which history is queried."
        },
        "start_year": {
          "type": "integer",
          "description": "Start year of the period for which history is queried."
        },
        "end_year": {
          "type": "integer",
          "description": "End year of the period for which history is queried."
        },
        "event_type": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "War",
              "Revolutions",
              "Diplomacy",
              "Economy"
            ]
          },
          "description": "Types of event. Default to 'all', which all types will be considered."
        }
      },
      "required": [
        "country",
        "start_year",
        "end_year"
      ]
    }
  },
  {
    "name": "monarch.getMonarchOfYear",
    "description": "Retrieve the monarch of a specific location during a specified year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location (e.g., country) whose monarch needs to be found."
        },
        "year": {
          "type": "integer",
          "description": "The year to search the monarch."
        },
        "fullName": {
          "type": "boolean",
          "default": false,
          "description": "If true, returns the full name and title of the monarch."
        }
      },
      "required": [
        "location",
        "year"
      ]
    }
  },
  {
    "name": "european_history.get_event_date",
    "description": "Retrieve the date of a specific event in European history.",
    "parameters": {
      "type": "dict",
      "properties": {
        "event_name": {
          "type": "string",
          "description": "The name of the event."
        },
        "format": {
          "type": "string",
          "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."
        }
      },
      "required": [
        "event_name"
      ]
    }
  },
  {
    "name": "history_eu.fetch_events",
    "description": "Fetches significant historical events within a specific time period in European history.",
    "parameters": {
      "type": "dict",
      "properties": {
        "century": {
          "type": "integer",
          "description": "The century you are interested in."
        },
        "region": {
          "type": "string",
          "description": "The region of Europe you are interested in.",
          "enum": [
            "Northern",
            "Southern",
            "Eastern",
            "Western"
          ]
        },
        "category": {
          "type": "string",
          "description": "Category of the historical events. Default is 'Culture'.",
          "enum": [
            "Wars",
            "Culture",
            "Politics",
            "Scientific",
            "Others"
          ]
        }
      },
      "required": [
        "century",
        "region"
      ]
    }
  },
  {
    "name": "get_event_date",
    "description": "Retrieve the date of a historical event.",
    "parameters": {
      "type": "dict",
      "properties": {
        "event": {
          "type": "string",
          "description": "The name of the historical event."
        },
        "location": {
          "type": "string",
          "description": "Location where the event took place. Default to global if not specified."
        }
      },
      "required": [
        "event"
      ]
    }
  },
  {
    "name": "us_history.get_event_info",
    "description": "Retrieve detailed information about a significant event in U.S. history.",
    "parameters": {
      "type": "dict",
      "properties": {
        "event_name": {
          "type": "string",
          "description": "The name of the event."
        },
        "specific_info": {
          "type": "string",
          "description": "Specific aspect of information related to event.",
          "enum": [
            "Start Date",
            "End Date",
            "Participants",
            "Result",
            "Notable Figures",
            "Importance in History"
          ]
        }
      },
      "required": [
        "event_name",
        "specific_info"
      ]
    }
  },
  {
    "name": "history_api.get_president_by_year",
    "description": "Get the name of the U.S. President for a specified year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "year": {
          "type": "integer",
          "description": "The year you want to know the U.S. president of."
        },
        "full_term_only": {
          "type": "boolean",
          "description": "Flag to determine if we should only return presidents that served a full term for the specified year.",
          "default": false
        }
      },
      "required": [
        "year"
      ]
    }
  },
  {
    "name": "US_President_During_Event",
    "description": "Returns the U.S. president during a specified historical event.",
    "parameters": {
      "type": "dict",
      "properties": {
        "event": {
          "type": "string",
          "description": "The historical event."
        },
        "country": {
          "type": "string",
          "description": "The country the president leads (optional parameter, defaults to 'USA' if not specified)."
        }
      },
      "required": [
        "event"
      ]
    }
  },
  {
    "name": "publication_year.find",
    "description": "Fetches the year a particular scientific work was published.",
    "parameters": {
      "type": "dict",
      "properties": {
        "author": {
          "type": "string",
          "description": "Name of the author of the work."
        },
        "work_title": {
          "type": "string",
          "description": "Title of the scientific work."
        },
        "location": {
          "type": "string",
          "description": "Place of the publication, if known. Default to 'all'."
        }
      },
      "required": [
        "author",
        "work_title"
      ]
    }
  },
  {
    "name": "discoverer.get",
    "description": "Retrieve the name of the discoverer of an element based on its name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "element_name": {
          "type": "string",
          "description": "The name of the element."
        },
        "year": {
          "type": "integer",
          "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it."
        },
        "first": {
          "type": "boolean",
          "default": true,
          "description": "Optional parameter indicating if the first discoverer's name should be retrieved."
        }
      },
      "required": [
        "element_name"
      ]
    }
  },
  {
    "name": "historical_contrib.get_contrib",
    "description": "Retrieve historical contribution made by a scientist on a specific date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "scientist": {
          "type": "string",
          "description": "The scientist whose contributions need to be searched."
        },
        "date": {
          "type": "string",
          "description": "The date when the contribution was made in yyyy-mm-dd format."
        },
        "category": {
          "type": "string",
          "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."
        }
      },
      "required": [
        "scientist",
        "date"
      ]
    }
  },
  {
    "name": "get_religion_history",
    "description": "Retrieves significant religious events, including the details of the event, its historical context, and its impacts.",
    "parameters": {
      "type": "dict",
      "properties": {
        "religion": {
          "type": "string",
          "description": "Name of the religion to be queried."
        },
        "century": {
          "type": "integer",
          "description": "The century in which the event(s) took place."
        },
        "sort_by": {
          "type": "string",
          "enum": [
            "importance",
            "chronological"
          ],
          "default": "chronological",
          "description": "Order of sorting the events. Default is chronological."
        },
        "count": {
          "type": "integer",
          "default": 5,
          "description": "Number of events to return. Default is 5."
        }
      },
      "required": [
        "religion",
        "century"
      ]
    }
  },
  {
    "name": "retrieve_religion_info",
    "description": "Retrieve the history and main beliefs of a religion.",
    "parameters": {
      "type": "dict",
      "properties": {
        "religion_name": {
          "type": "string",
          "description": "The name of the religion."
        },
        "detail_level": {
          "type": "string",
          "description": "Level of detail for the returned information, either 'summary' or 'full'.",
          "default": "summary"
        }
      },
      "required": [
        "religion_name",
        "detail_level"
      ]
    }
  },
  {
    "name": "get_religion_history",
    "description": "Retrieves historic events and facts related to a specified religion for a given period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "religion": {
          "type": "string",
          "description": "The name of the religion."
        },
        "start_year": {
          "type": "integer",
          "description": "The starting year of the period."
        },
        "end_year": {
          "type": "integer",
          "description": "The end year of the period."
        },
        "event_type": {
          "type": "string",
          "enum": [
            "all",
            "crusade",
            "schism",
            "reform"
          ],
          "description": "Optional parameter specifying the type of event. Default is 'all'."
        }
      },
      "required": [
        "religion",
        "start_year",
        "end_year"
      ]
    }
  },
  {
    "name": "generate_circle_image",
    "description": "Generates a circle image based on the given radius and color",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "The radius of the circle in pixels."
        },
        "color": {
          "type": "string",
          "description": "The color of the circle."
        },
        "background": {
          "type": "string",
          "description": "Optional: The color of the background, default is white."
        }
      },
      "required": [
        "radius",
        "color"
      ]
    }
  },
  {
    "name": "paint_requirement.calculate",
    "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).",
    "parameters": {
      "type": "dict",
      "properties": {
        "area": {
          "type": "dict",
          "properties": {
            "width": {
              "type": "integer",
              "description": "The width of the area to be painted in feet."
            },
            "height": {
              "type": "integer",
              "description": "The height of the area to be painted in feet."
            }
          },
          "description": "The area to be painted."
        },
        "paint_coverage": {
          "type": "integer",
          "description": "Coverage area per gallon of the paint in square feet.",
          "default": 350
        },
        "exclusion": {
          "type": "dict",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of the exclusion e.g window, door etc."
            },
            "area": {
              "type": "integer",
              "description": "The area of the exclusion in square feet."
            }
          },
          "description": "Area not to be painted. Default to not use any exclusion if not specified."
        }
      },
      "required": [
        "area",
        "paint_coverage"
      ]
    }
  },
  {
    "name": "draw_rectangle",
    "description": "Draw a rectangle given its width and height.",
    "parameters": {
      "type": "dict",
      "properties": {
        "width": {
          "type": "integer",
          "description": "The width of the rectangle."
        },
        "height": {
          "type": "integer",
          "description": "The height of the rectangle."
        },
        "color": {
          "type": "string",
          "description": "The color of the rectangle. Default is 'black'."
        }
      },
      "required": [
        "width",
        "height"
      ]
    }
  },
  {
    "name": "modify_painting",
    "description": "Modify an existing painting's attributes such as size, medium, and color.",
    "parameters": {
      "type": "dict",
      "properties": {
        "size": {
          "type": "string",
          "description": "The size of the painting in inches, width by height."
        },
        "medium": {
          "type": "string",
          "description": "The medium of the painting, such as oil, acrylic, etc."
        },
        "dominant_color": {
          "type": "string",
          "description": "The dominant color of the painting. Default to 'black'."
        }
      },
      "required": [
        "size",
        "medium"
      ]
    }
  },
  {
    "name": "sculpture_search",
    "description": "Find sculptures based on location and a specific time frame.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where the sculptures are located."
        },
        "time_frame": {
          "type": "string",
          "description": "The time frame during which the sculptures were made."
        },
        "material": {
          "type": "string",
          "description": "Optional material of the sculptures. Default is 'all'"
        }
      },
      "required": [
        "location",
        "time_frame"
      ]
    }
  },
  {
    "name": "find_exhibition",
    "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state where the exhibition is held, e.g., New York City, NY."
        },
        "art_form": {
          "type": "string",
          "description": "The form of art the exhibition is displaying e.g., sculpture."
        },
        "month": {
          "type": "string",
          "description": "The month of exhibition. Default value will return upcoming events if not specified."
        },
        "user_ratings": {
          "type": "string",
          "enum": [
            "low",
            "average",
            "high"
          ],
          "description": "Select exhibitions with user rating threshold. Default is 'low'"
        }
      },
      "required": [
        "location",
        "art_form"
      ]
    }
  },
  {
    "name": "sculpture_locator.find_by_artist",
    "description": "Locate the sculptures of specific artist by material and location",
    "parameters": {
      "type": "dict",
      "properties": {
        "artist": {
          "type": "string",
          "description": "Name of the Artist of the sculpture"
        },
        "material": {
          "type": "string",
          "description": "Material of the sculpture."
        },
        "location": {
          "type": "string",
          "description": "The location where you want to find the sculpture. Default is 'all' if not specified."
        }
      },
      "required": [
        "artist",
        "material"
      ]
    }
  },
  {
    "name": "calculate_compound_interest",
    "description": "Calculates the compound interest of an investment over a given time period.",
    "parameters": {
      "type": "dict",
      "properties": {
        "principle": {
          "type": "integer",
          "description": "The initial amount of the investment."
        },
        "interest_rate": {
          "type": "float",
          "description": "The yearly interest rate of the investment."
        },
        "time": {
          "type": "integer",
          "description": "The time, in years, the money is invested or borrowed for."
        },
        "compounds_per_year": {
          "type": "integer",
          "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."
        }
      },
      "required": [
        "principle",
        "interest_rate",
        "time"
      ]
    }
  },
  {
    "name": "calculate_circle_dimensions",
    "description": "Calculate the area and circumference of a circle based on the radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "radius": {
          "type": "integer",
          "description": "The radius of the circle."
        }
      },
      "required": [
        "radius"
      ]
    }
  },
  {
    "name": "museum.get_hours",
    "description": "Retrieve the open hours for a museum based on its name and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the museum."
        },
        "location": {
          "type": "string",
          "description": "The city where the museum is located."
        },
        "day": {
          "type": "string",
          "description": "Optional: Day of the week for specific open hours. Default 'Monday'."
        }
      },
      "required": [
        "name",
        "location"
      ]
    }
  },
  {
    "name": "museum_info",
    "description": "Retrieve information about the opening hours of a museum based on its name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum_name": {
          "type": "string",
          "description": "The name of the museum."
        },
        "info_type": {
          "type": "string",
          "description": "The type of information needed about the museum.",
          "default": "opening_hours"
        }
      },
      "required": [
        "museum_name"
      ]
    }
  },
  {
    "name": "museum_working_hours.get",
    "description": "Get the working hours of a museum in a specific location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum": {
          "type": "string",
          "description": "The name of the museum."
        },
        "location": {
          "type": "string",
          "description": "The location of the museum."
        },
        "day": {
          "type": "string",
          "description": "Specific day of the week. Default is 'Monday'"
        }
      },
      "required": [
        "museum",
        "location"
      ]
    }
  },
  {
    "name": "museum_info",
    "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.",
    "parameters": {
      "type": "dict",
      "properties": {
        "museum": {
          "type": "string",
          "description": "The name of the museum."
        },
        "date": {
          "type": "string",
          "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."
        },
        "information": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "opening_hours",
              "ticket_price",
              "address"
            ]
          },
          "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.",
          "default": "all"
        }
      },
      "required": [
        "museum",
        "date"
      ]
    }
  },
  {
    "name": "get_instrument_details",
    "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.",
    "parameters": {
      "type": "dict",
      "properties": {
        "instrument": {
          "type": "string",
          "description": "The name of the instrument."
        },
        "manufacturer": {
          "type": "string",
          "description": "The manufacturer of the instrument."
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "price",
              "rating"
            ]
          },
          "description": "The features to retrieve about the instrument. Default is 'price'"
        }
      },
      "required": [
        "instrument",
        "manufacturer"
      ]
    }
  },
  {
    "name": "find_instrument",
    "description": "Search for a musical instrument within specified budget and of specific type.",
    "parameters": {
      "type": "dict",
      "properties": {
        "budget": {
          "type": "integer",
          "description": "Your budget for the instrument."
        },
        "type": {
          "type": "string",
          "description": "Type of the instrument"
        },
        "make": {
          "type": "string",
          "description": "Maker of the instrument. Default to not use if not specified."
        }
      },
      "required": [
        "budget",
        "type"
      ]
    }
  },
  {
    "name": "get_instrument_info",
    "description": "Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the instrument."
        },
        "maker": {
          "type": "string",
          "description": "The name of the maker who created the instrument."
        },
        "year": {
          "type": "integer",
          "description": "The year the instrument was made."
        }
      },
      "required": [
        "name",
        "maker",
        "year"
      ]
    }
  },
  {
    "name": "find_concert",
    "description": "Locate a concert in a specified location within a certain budget.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where you are looking for a concert. In the format City, State."
        },
        "price": {
          "type": "integer",
          "description": "Maximum ticket price."
        },
        "genre": {
          "type": "string",
          "description": "Music genre of the concert. Default to 'Jazz'. ",
          "enum": [
            "Rock",
            "Pop",
            "Country",
            "Jazz",
            "Classical"
          ]
        }
      },
      "required": [
        "location",
        "price"
      ]
    }
  },
  {
    "name": "concert.get_details",
    "description": "Fetch the details for a particular concert based on the artist and location.",
    "parameters": {
      "type": "dict",
      "properties": {
        "artist": {
          "type": "string",
          "description": "Name of the artist/band who's performing."
        },
        "location": {
          "type": "string",
          "description": "City where the concert is taking place."
        },
        "date": {
          "type": "string",
          "description": "Date of the concert in 'mm-yyyy' format. Default is the current month if not specified."
        }
      },
      "required": [
        "artist",
        "location"
      ]
    }
  },
  {
    "name": "concert.search",
    "description": "Locate a concert based on specific criteria like genre, location, and date.",
    "parameters": {
      "type": "dict",
      "properties": {
        "genre": {
          "type": "string",
          "description": "Genre of the concert."
        },
        "location": {
          "type": "string",
          "description": "City of the concert."
        },
        "date": {
          "type": "string",
          "description": "Date of the concert, e.g. this weekend, today, tomorrow.",
          "enum": [
            "this weekend",
            "next weekend",
            "this month",
            "next month",
            "today",
            "tomorrow",
            "the day after"
          ]
        },
        "price_range": {
          "type": "string",
          "enum": [
            "free",
            "cheap",
            "moderate",
            "expensive"
          ],
          "description": "Expected price range of the concert tickets. Default is 'free'."
        }
      },
      "required": [
        "genre",
        "location",
        "date"
      ]
    }
  },
  {
    "name": "concert.find_details",
    "description": "Finds details of a concert event.",
    "parameters": {
      "type": "dict",
      "properties": {
        "artist": {
          "type": "string",
          "description": "Name of the artist performing."
        },
        "month": {
          "type": "string",
          "description": "Month in which the concert is happening."
        },
        "year": {
          "type": "integer",
          "description": "Year of the concert.",
          "default": 2022
        }
      },
      "required": [
        "artist",
        "month"
      ]
    }
  },
  {
    "name": "compose_melody",
    "description": "Compose a melody using the specified chord progression for a certain number of measures on specified instrument.",
    "parameters": {
      "type": "dict",
      "properties": {
        "progression": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The progression of chords."
        },
        "measures": {
          "type": "integer",
          "description": "The number of measures of the melody."
        },
        "instrument": {
          "type": "string",
          "description": "The instrument for the composition. Default is 'Piano'."
        }
      },
      "required": [
        "progression",
        "measures"
      ]
    }
  },
  {
    "name": "music_composer.create_mix",
    "description": "Create a mix of a song based on a particular music scale and duration",
    "parameters": {
      "type": "dict",
      "properties": {
        "scale": {
          "type": "string",
          "description": "The musical scale to be used. E.g: C Major, A Minor, etc."
        },
        "note_duration": {
          "type": "string",
          "description": "Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.",
          "enum": [
            "whole",
            "half",
            "quarter",
            "eighth",
            "sixteenth"
          ]
        },
        "track_length": {
          "type": "integer",
          "description": "Length of the mix track in seconds."
        }
      },
      "required": [
        "scale",
        "note_duration",
        "track_length"
      ]
    }
  },
  {
    "name": "music_generation.create_chord_progression",
    "description": "Create a chord progression in a specific key and number of chords.",
    "parameters": {
      "type": "dict",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key for the chord progression."
        },
        "chords": {
          "type": "integer",
          "description": "Number of chords in the progression."
        },
        "progression_type": {
          "type": "string",
          "description": "The type of the chord progression. Optional parameter. Default is 'major'."
        }
      },
      "required": [
        "key",
        "chords"
      ]
    }
  },
  {
    "name": "music.theory.chordProgression",
    "description": "Identifies a potential key signature for the given chord progression.",
    "parameters": {
      "type": "dict",
      "properties": {
        "progression": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."
        },
        "returnAllPossibleKeys": {
          "type": "boolean",
          "description": "Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false."
        },
        "assumeMajor": {
          "type": "boolean",
          "description": "Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true."
        }
      },
      "required": [
        "progression"
      ]
    }
  },
  {
    "name": "music_theory.key_signature",
    "description": "Return the key signature of a major or minor scale.",
    "parameters": {
      "type": "dict",
      "properties": {
        "key": {
          "type": "string",
          "description": "The root of the scale, e.g., 'C', 'F#', 'Ab'."
        },
        "scale_type": {
          "type": "string",
          "enum": [
            "major",
            "minor"
          ],
          "description": "Type of the scale, either 'major' or 'minor'. Default is 'major'."
        }
      },
      "required": [
        "key"
      ]
    }
  },
  {
    "name": "get_third_chord",
    "description": "Calculate the third major chord in a given key.",
    "parameters": {
      "type": "dict",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the scale."
        },
        "type": {
          "type": "string",
          "description": "Type of the scale, either major or minor. Default is 'major'."
        }
      },
      "required": [
        "key"
      ]
    }
  },
  {
    "name": "calculate_batting_average",
    "description": "Calculate the batting average for a baseball player based on their number of hits and at-bats.",
    "parameters": {
      "type": "dict",
      "properties": {
        "hits": {
          "type": "integer",
          "description": "The number of hits."
        },
        "at_bats": {
          "type": "integer",
          "description": "The number of at-bats."
        },
        "decimal_places": {
          "type": "integer",
          "description": "The number of decimal places to return in the batting average. Default is 3."
        }
      },
      "required": [
        "hits",
        "at_bats"
      ]
    }
  },
  {
    "name": "soccer_stat.get_player_stats",
    "description": "Retrieve soccer player statistics for a given season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "Name of the player."
        },
        "season": {
          "type": "string",
          "description": "Soccer season, usually specified by two years."
        },
        "league": {
          "type": "string",
          "description": "Optional - the soccer league, defaults to all leagues if not specified."
        }
      },
      "required": [
        "player_name",
        "season"
      ]
    }
  },
  {
    "name": "player_stats.getLastGame",
    "description": "Get last game statistics for a specific player in basketball",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The name of the basketball player."
        },
        "team": {
          "type": "string",
          "description": "The team that player currently plays for."
        },
        "metrics": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Points",
              "Rebounds",
              "Assists",
              "Blocks"
            ]
          },
          "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."
        }
      },
      "required": [
        "player_name",
        "team"
      ]
    }
  },
  {
    "name": "sports_stats.get_performance",
    "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "Name of the player."
        },
        "tournament": {
          "type": "string",
          "description": "Name of the soccer tournament."
        },
        "season": {
          "type": "string",
          "description": "Specific season in format 'YYYY-YYYY'."
        },
        "performance_indicator": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Goals Scored",
              "Assists Made",
              "Saves Made",
              "Cards Received"
            ]
          },
          "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."
        }
      },
      "required": [
        "player_name",
        "tournament",
        "season"
      ]
    }
  },
  {
    "name": "game_result.get_winner",
    "description": "Get the winner of a specific basketball game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "teams": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of two teams who played the game."
        },
        "date": {
          "type": "string",
          "description": "The date of the game, formatted as YYYY-MM-DD."
        },
        "venue": {
          "type": "string",
          "optional": true,
          "description": "Optional: The venue of the game. Default is 'home'."
        }
      },
      "required": [
        "teams",
        "date"
      ]
    }
  },
  {
    "name": "sports.match_schedule",
    "description": "Retrieve the match schedule for a specific sports team.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the sports team."
        },
        "num_matches": {
          "type": "integer",
          "description": "The number of upcoming matches you want to get."
        },
        "league": {
          "type": "string",
          "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."
        }
      },
      "required": [
        "team_name",
        "num_matches"
      ]
    }
  },
  {
    "name": "nfl_data.player_record",
    "description": "Retrieve the record of an NFL player in a specified season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The name of the NFL player."
        },
        "season_year": {
          "type": "integer",
          "description": "The year of the NFL season."
        },
        "team": {
          "type": "string",
          "description": "The NFL team that the player played for in that season. Default is all teams if not specified."
        }
      },
      "required": [
        "player_name",
        "season_year"
      ]
    }
  },
  {
    "name": "get_career_stats",
    "description": "Retrieve the career statistics of a basketball player based on the player's name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The name of the basketball player."
        },
        "team": {
          "type": "string",
          "description": "The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified."
        }
      },
      "required": [
        "player_name"
      ]
    }
  },
  {
    "name": "sports_db.find_athlete",
    "description": "Find the profile information of a sports athlete based on their full name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "The full name of the athlete."
        },
        "team": {
          "type": "string",
          "description": "The team the athlete belongs to. Default to all teams if not specified."
        },
        "sport": {
          "type": "string",
          "description": "The sport that athlete plays.",
          "enum": [
            "Basketball",
            "Baseball",
            "Football",
            "Soccer"
          ]
        }
      },
      "required": [
        "name",
        "sport"
      ]
    }
  },
  {
    "name": "player_statistic",
    "description": "Retrieves detailed player's statistics for a specific year.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_name": {
          "type": "string",
          "description": "The player's name."
        },
        "year": {
          "type": "integer",
          "description": "Year for which the statistics will be displayed."
        },
        "team_name": {
          "type": "string",
          "description": "The name of the team(optional). Default to not use it if not specified."
        }
      },
      "required": [
        "player_name",
        "year"
      ]
    }
  },
  {
    "name": "sports_celebrity.get_major_achievements",
    "description": "Returns a list of major achievements of a particular sports celebrity.",
    "parameters": {
      "type": "dict",
      "properties": {
        "celebrity_name": {
          "type": "string",
          "description": "Name of the sports celebrity."
        },
        "sports": {
          "type": "string",
          "description": "Type of sports the celebrity involved in. Default is Football."
        },
        "team": {
          "type": "string",
          "description": "Optional. Team where celebrity currently plays. Default is 'all'"
        }
      },
      "required": [
        "celebrity_name"
      ]
    }
  },
  {
    "name": "get_sport_ranking",
    "description": "Retrieve the current world ranking of a sportsperson based on the sport and player's name.",
    "parameters": {
      "type": "dict",
      "properties": {
        "sport": {
          "type": "string",
          "description": "Name of the sport."
        },
        "player_name": {
          "type": "string",
          "description": "Name of the player."
        },
        "gender": {
          "type": "string",
          "description": "Gender of the player. This is optional. The possible values are male or female.",
          "default": "all"
        }
      },
      "required": [
        "sport",
        "player_name"
      ]
    }
  },
  {
    "name": "sports_ranking",
    "description": "Fetch the ranking of a specific sports team in a specific league",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The name of the team."
        },
        "league": {
          "type": "string",
          "description": "The name of the league."
        },
        "season": {
          "type": "integer",
          "description": "Optional parameter to specify the season, default is the current season '2023' if not specified."
        }
      },
      "required": [
        "team",
        "league"
      ]
    }
  },
  {
    "name": "sports_ranking.get_team_position",
    "description": "Retrieve a team's position and stats in the basketball league for a given season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The name of the team."
        },
        "season": {
          "type": "string",
          "description": "The season for which data should be fetched."
        },
        "detailed": {
          "type": "boolean",
          "description": "Flag to retrieve detailed stats or just the position.",
          "default": false
        }
      },
      "required": [
        "team",
        "season"
      ]
    }
  },
  {
    "name": "sports_ranking",
    "description": "Get the ranking of a team in a given sports league and season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The name of the team."
        },
        "league": {
          "type": "string",
          "description": "The name of the sports league."
        },
        "season": {
          "type": "string",
          "description": "The season for which ranking needs to be obtained."
        }
      },
      "required": [
        "team",
        "league",
        "season"
      ]
    }
  },
  {
    "name": "sports_ranking.get_current",
    "description": "Retrieve the current ranking of a specific team in a particular league.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "The name of the team whose ranking is sought."
        },
        "league": {
          "type": "string",
          "description": "The league in which the team participates."
        },
        "season": {
          "type": "string",
          "description": "The season for which the ranking is sought. Defaults to the current season '2023-2024' if not provided."
        }
      },
      "required": [
        "team",
        "league"
      ]
    }
  },
  {
    "name": "team_score.get_latest",
    "description": "Retrieve the score of the most recent game for a specified sports team.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team": {
          "type": "string",
          "description": "Name of the sports team."
        },
        "include_opponent": {
          "type": "boolean",
          "description": "Include the name of the opponent team in the return.",
          "default": false
        }
      },
      "required": [
        "team"
      ]
    }
  },
  {
    "name": "sports_team.get_schedule",
    "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.",
    "parameters": {
      "type": "dict",
      "properties": {
        "team_name": {
          "type": "string",
          "description": "The name of the sports team."
        },
        "num_of_games": {
          "type": "integer",
          "description": "Number of games for which to fetch the schedule."
        },
        "league": {
          "type": "string",
          "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."
        },
        "location": {
          "type": "string",
          "description": "Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered."
        }
      },
      "required": [
        "team_name",
        "num_of_games",
        "league"
      ]
    }
  },
  {
    "name": "boardgame.get_info",
    "description": "Retrieve detailed information of a board game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the board game."
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "player count",
              "playing time",
              "age",
              "mechanics",
              "rating"
            ]
          },
          "description": "Game characteristics interested."
        },
        "language": {
          "type": "string",
          "description": "The preferred language for the game information, default is English"
        }
      },
      "required": [
        "name",
        "parameters"
      ]
    }
  },
  {
    "name": "detailed_weather_forecast",
    "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city that you want to get the weather for."
        },
        "days": {
          "type": "integer",
          "description": "Number of days for the forecast."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "high_low_temperature",
              "humidity",
              "precipitation"
            ]
          },
          "description": "Specific weather details required in the forecast."
        }
      },
      "required": [
        "location",
        "days",
        "details"
      ]
    }
  },
  {
    "name": "blackjack.check_winner",
    "description": "Checks and determines the winner in a game of blackjack.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player_cards": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Cards held by the player."
        },
        "dealer_cards": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Cards held by the dealer."
        },
        "ace_value": {
          "type": "integer",
          "description": "The value considered for the ace card, can be either 1 or 11.",
          "default": 11
        }
      },
      "required": [
        "player_cards",
        "dealer_cards"
      ]
    }
  },
  {
    "name": "find_card_in_deck",
    "description": "Locate a particular card in a deck based on rank and suit.",
    "parameters": {
      "type": "dict",
      "properties": {
        "rank": {
          "type": "string",
          "description": "Rank of the card (e.g. Ace, Two, King)."
        },
        "suit": {
          "type": "string",
          "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."
        },
        "deck": {
          "type": "array",
          "items": {
            "type": "dict",
            "properties": {
              "rank": {
                "type": "string"
              },
              "suit": {
                "type": "string"
              }
            }
          },
          "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"
        }
      },
      "required": [
        "rank",
        "suit"
      ]
    }
  },
  {
    "name": "cards.shuffle_and_draw",
    "description": "Shuffle a standard deck of 52 cards and draw a specified number of cards from the top.",
    "parameters": {
      "type": "dict",
      "properties": {
        "num_cards": {
          "type": "integer",
          "description": "Number of cards to be drawn. The default is 1 if no value is provided."
        }
      },
      "required": [
        "num_cards"
      ]
    }
  },
  {
    "name": "card_games.poker_determine_winner",
    "description": "Determines the winner in a game of Poker based on the cards in each players' hands.",
    "parameters": {
      "type": "dict",
      "properties": {
        "player1": {
          "type": "string",
          "description": "The first player's name."
        },
        "hand1": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']"
        },
        "player2": {
          "type": "string",
          "description": "The second player's name."
        },
        "hand2": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']"
        }
      },
      "required": [
        "player1",
        "hand1",
        "player2",
        "hand2"
      ]
    }
  },
  {
    "name": "deck_of_cards.odds",
    "description": "Compute the probability of drawing a specific suit from a given deck of cards.",
    "parameters": {
      "type": "dict",
      "properties": {
        "suit": {
          "type": "string",
          "description": "The card suit. Valid values include: 'spades', 'clubs', 'hearts', 'diamonds'."
        },
        "deck_type": {
          "type": "string",
          "description": "Type of deck, normal deck includes joker, and without_joker deck excludes joker.",
          "default": "normal"
        }
      },
      "required": [
        "suit",
        "deck_type"
      ]
    }
  },
  {
    "name": "game_list.get_games",
    "description": "Get a list of video games based on release year, multiplayer functionality and ESRB rating",
    "parameters": {
      "type": "dict",
      "properties": {
        "release_year": {
          "type": "integer",
          "description": "The year the game was released."
        },
        "multiplayer": {
          "type": "boolean",
          "description": "Whether the game has multiplayer functionality."
        },
        "ESRB_rating": {
          "type": "string",
          "description": "The ESRB rating of the game."
        }
      },
      "required": [
        "release_year",
        "multiplayer",
        "ESRB_rating"
      ]
    }
  },
  {
    "name": "get_game_item_stats",
    "description": "Retrieve the statistics of a specific item in a specific video game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The game to retrieve information from."
        },
        "item": {
          "type": "string",
          "description": "The name of the item in the game."
        },
        "stat": {
          "type": "string",
          "description": "Specific statistic required."
        }
      },
      "required": [
        "game",
        "item",
        "stat"
      ]
    }
  },
  {
    "name": "game_valuation",
    "description": "Get the current market value of a vintage video game.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game_name": {
          "type": "string",
          "description": "The name of the game."
        },
        "release_year": {
          "type": "integer",
          "description": "The year the game was released."
        },
        "condition": {
          "type": "string",
          "enum": [
            "New",
            "Like New",
            "Used",
            "Fair",
            "Poor"
          ],
          "description": "The condition of the game. Default is 'Used'."
        }
      },
      "required": [
        "game_name",
        "release_year"
      ]
    }
  },
  {
    "name": "get_highest_scoring_player",
    "description": "Retrieve the highest scoring player in a specific game and season.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game": {
          "type": "string",
          "description": "The game in which you want to find the highest scoring player."
        },
        "season": {
          "type": "string",
          "description": "The season during which the high score was achieved."
        }
      },
      "required": [
        "game",
        "season"
      ]
    }
  },
  {
    "name": "multiplayer_game_finder",
    "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.",
    "parameters": {
      "type": "dict",
      "properties": {
        "platform": {
          "type": "string",
          "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."
        },
        "rating": {
          "type": "float",
          "description": "Desired minimum game rating on a 5.0 scale."
        },
        "genre": {
          "type": "string",
          "description": "Desired game genre, e.g. Action, Adventure, Racing. Default is 'Action'.",
          "enum": [
            "Action",
            "Adventure",
            "Racing",
            "Strategy",
            "Simulation"
          ]
        }
      },
      "required": [
        "platform",
        "rating"
      ]
    }
  },
  {
    "name": "gamespot.getAverageUserScore",
    "description": "Retrieve the average user score of a game from GameSpot.",
    "parameters": {
      "type": "dict",
      "properties": {
        "game_name": {
          "type": "string",
          "description": "The name of the game."
        },
        "platform": {
          "type": "string",
          "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)",
          "default": "all platforms"
        }
      },
      "required": [
        "game_name",
        "platform"
      ]
    }
  },
  {
    "name": "find_recipes",
    "description": "Find recipes based on dietary restrictions, meal type, and preferred ingredients.",
    "parameters": {
      "type": "dict",
      "properties": {
        "diet": {
          "type": "string",
          "description": "The dietary restrictions, e.g., 'vegan', 'gluten-free'."
        },
        "meal_type": {
          "type": "string",
          "description": "The type of meal, e.g., 'dinner', 'breakfast'."
        },
        "ingredients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The preferred ingredients. If left blank, it will default to return general recipes."
        }
      },
      "required": [
        "diet",
        "meal_type"
      ]
    }
  },
  {
    "name": "get_vegan_recipe",
    "description": "Retrieve a vegan soup recipe based on the provided cooking time.",
    "parameters": {
      "type": "dict",
      "properties": {
        "dish_type": {
          "type": "string",
          "description": "The type of dish, e.g. soup, dessert, etc.",
          "enum": [
            "soup",
            "main dish",
            "dessert",
            "salad"
          ]
        },
        "cooking_time": {
          "type": "integer",
          "description": "The maximum cooking time for the recipe in minutes."
        },
        "ingredient_preference": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided."
        }
      },
      "required": [
        "dish_type",
        "cooking_time"
      ]
    }
  },
  {
    "name": "recipe_info.get_calories",
    "description": "Retrieve the amount of calories from a specific recipe in a food website.",
    "parameters": {
      "type": "dict",
      "properties": {
        "website": {
          "type": "string",
          "description": "The food website that has the recipe."
        },
        "recipe": {
          "type": "string",
          "description": "Name of the recipe."
        },
        "optional_meal_time": {
          "type": "string",
          "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."
        }
      },
      "required": [
        "website",
        "recipe"
      ]
    }
  },
  {
    "name": "recipe_finder.find",
    "description": "Find a recipe based on dietary preferences, number of servings, and preparation time.",
    "parameters": {
      "type": "dict",
      "properties": {
        "servings": {
          "type": "integer",
          "description": "The number of people that the recipe should serve."
        },
        "diet": {
          "type": "string",
          "description": "Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc."
        },
        "prep_time": {
          "type": "integer",
          "description": "The maximum amount of time (in minutes) the preparation should take. Default is 60 minutes."
        }
      },
      "required": [
        "servings",
        "diet"
      ]
    }
  },
  {
    "name": "get_recipe",
    "description": "Fetch the recipe for a specific dish along with preparation steps.",
    "parameters": {
      "type": "dict",
      "properties": {
        "dish_name": {
          "type": "string",
          "description": "Name of the dish whose recipe needs to be fetched."
        },
        "diet_preference": {
          "type": "string",
          "description": "Preferred dietary consideration like vegan, vegetarian, gluten-free etc. Default is none.",
          "default": "none"
        }
      },
      "required": [
        "dish_name"
      ]
    }
  },
  {
    "name": "recipe_search",
    "description": "Search for a cooking recipe based on specific dietary needs and time constraint.",
    "parameters": {
      "type": "dict",
      "properties": {
        "diet": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Gluten Free",
              "Dairy Free",
              "Vegan",
              "Vegetarian"
            ]
          },
          "description": "Specific dietary need."
        },
        "time_limit": {
          "type": "integer",
          "description": "The maximum time to prepare the recipe in minutes. Default is 60 minutes."
        },
        "dish": {
          "type": "string",
          "description": "The name of the dish to search for. Default is not use if not specified."
        }
      },
      "required": [
        "dish",
        "diet"
      ]
    }
  },
  {
    "name": "restaurant_finder",
    "description": "Locate restaurants based on certain criteria such as cuisine, city, and dietary preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "City where you are looking for the restaurant."
        },
        "cuisine": {
          "type": "string",
          "description": "Type of cuisine you are interested in."
        },
        "diet": {
          "type": "string",
          "description": "Dietary preferences. e.g. 'Vegetarian', 'Gluten-free', etc. Default 'Vegetarian'."
        }
      },
      "required": [
        "city",
        "cuisine"
      ]
    }
  },
  {
    "name": "get_best_sushi_places",
    "description": "Returns the best sushi places given the city, review_rate and top number.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city in which to look for the sushi places."
        },
        "top": {
          "type": "integer",
          "description": "The number of top sushi places to be returned."
        },
        "review_rate": {
          "type": "float",
          "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."
        }
      },
      "required": [
        "city",
        "top"
      ]
    }
  },
  {
    "name": "restaurant_search.find_closest",
    "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city, for instance Boston, MA"
        },
        "cuisine": {
          "type": "string",
          "description": "Type of food like Sushi."
        },
        "amenities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Patio",
              "Wi-Fi",
              "Happy Hour",
              "Wheelchair Accessible"
            ]
          },
          "description": "Preferred amenities in the restaurant. Default 'Wi-Fi'."
        }
      },
      "required": [
        "location",
        "cuisine"
      ]
    }
  },
  {
    "name": "find_restaurant",
    "description": "Locate nearby restaurants based on user defined criteria",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location where user wants to search for a restaurant."
        },
        "type": {
          "type": "string",
          "description": "The type of the cuisine/restaurant."
        },
        "diet_option": {
          "type": "string",
          "description": "Special dietary preferences."
        }
      },
      "required": [
        "location",
        "type",
        "diet_option"
      ]
    }
  },
  {
    "name": "recipe.unit_conversion",
    "description": "Convert a value from one kitchen unit to another for cooking purposes.",
    "parameters": {
      "type": "dict",
      "properties": {
        "value": {
          "type": "integer",
          "description": "The value to be converted."
        },
        "from_unit": {
          "type": "string",
          "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."
        },
        "to_unit": {
          "type": "string",
          "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."
        },
        "precision": {
          "type": "integer",
          "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 1."
        }
      },
      "required": [
        "value",
        "from_unit",
        "to_unit"
      ]
    }
  },
  {
    "name": "calculate_cooking_time",
    "description": "Calculate the cooking time for a roast chicken.",
    "parameters": {
      "type": "dict",
      "properties": {
        "weight_kg": {
          "type": "float",
          "description": "The weight of the chicken in kilograms."
        },
        "cooking_method": {
          "type": "string",
          "description": "The method of cooking, defaults to 'roast'."
        },
        "temp_celsius": {
          "type": "integer",
          "description": "The cooking temperature in degrees celsius, defaults to 180."
        }
      },
      "required": [
        "weight_kg"
      ]
    }
  },
  {
    "name": "grocery_store.find_nearby",
    "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Houston, TX"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Organic",
              "Vegetables",
              "Fruits",
              "Dairy",
              "Seafood",
              "Bakery"
            ]
          },
          "description": "Categories of items to be found in the grocery store. Default is all if not specified."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "whole_foods.find_top_brands",
    "description": "Get top brands based on a specific product from Whole Foods",
    "parameters": {
      "type": "dict",
      "properties": {
        "product": {
          "type": "string",
          "description": "The product for which the top brands should be fetched."
        },
        "number": {
          "type": "integer",
          "description": "Number of top brands to be fetched. Default is 5"
        },
        "organic": {
          "type": "boolean",
          "description": "If the product should be organic. Default is false"
        }
      },
      "required": [
        "product"
      ]
    }
  },
  {
    "name": "walmart.purchase",
    "description": "Retrieve information of items from Walmart including stock availability.",
    "parameters": {
      "type": "dict",
      "properties": {
        "loc": {
          "type": "string",
          "description": "Location of the nearest Walmart."
        },
        "product_list": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Items to be purchased listed in an array."
        },
        "pack_size": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."
        }
      },
      "required": [
        "loc",
        "product_list"
      ]
    }
  },
  {
    "name": "grocery_info.nutritional_info",
    "description": "Retrieve nutritional information for a given food item from a particular store",
    "parameters": {
      "type": "dict",
      "properties": {
        "store": {
          "type": "string",
          "description": "The store where the item is available"
        },
        "food": {
          "type": "string",
          "description": "Food item for which information is needed."
        },
        "information": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Protein",
              "Calories",
              "Carbohydrates",
              "Fat",
              "Fiber"
            ]
          },
          "description": "Nutritional details required."
        }
      },
      "required": [
        "store",
        "food",
        "information"
      ]
    }
  },
  {
    "name": "walmart.check_price",
    "description": "Calculate total price for given items and their quantities at Walmart.",
    "parameters": {
      "type": "dict",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of items to be priced."
        },
        "quantities": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Quantity of each item corresponding to the items list."
        },
        "store_location": {
          "type": "string",
          "description": "The store location for specific pricing (optional). Default to all if not specified."
        }
      },
      "required": [
        "items",
        "quantities"
      ]
    }
  },
  {
    "name": "time_zone_converter",
    "description": "Retrieve the current time of a specific city.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city you want to know the current time for."
        },
        "country": {
          "type": "string",
          "description": "The country where the city is located."
        },
        "display_format": {
          "type": "string",
          "description": "The time display format: '12h' or '24h'. Default is '24h'."
        }
      },
      "required": [
        "city",
        "country"
      ]
    }
  },
  {
    "name": "get_current_time",
    "description": "Retrieve the current time in a specific time zone.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The name of the city."
        },
        "country": {
          "type": "string",
          "description": "The name of the country."
        },
        "timezone": {
          "type": "string",
          "description": "The optional timezone to get current time. Default "
        }
      },
      "required": [
        "location",
        "country"
      ]
    }
  },
  {
    "name": "hotel_booking",
    "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city where you want to book the hotel."
        },
        "room_type": {
          "type": "string",
          "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."
        },
        "duration": {
          "type": "integer",
          "description": "The number of nights you want to book the hotel for."
        },
        "start_date": {
          "type": "string",
          "description": "The date when your stay begins."
        },
        "preferences": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "pet_friendly",
              "gym",
              "swimming_pool",
              "free_breakfast",
              "parking"
            ]
          },
          "description": "Optional preferences of stay at the hotel. Default to use all if not specified."
        }
      },
      "required": [
        "location",
        "room_type",
        "duration",
        "start_date"
      ]
    }
  },
  {
    "name": "book_room",
    "description": "Book a room in a specified hotel.",
    "parameters": {
      "type": "dict",
      "properties": {
        "hotel_name": {
          "type": "string",
          "description": "The name of the hotel."
        },
        "room_type": {
          "type": "string",
          "description": "The type of room to be booked."
        },
        "num_nights": {
          "type": "integer",
          "description": "The number of nights to book the room for."
        }
      },
      "required": [
        "hotel_name",
        "room_type",
        "num_nights"
      ]
    }
  },
  {
    "name": "hotel_booking.book",
    "description": "Book a hotel room given the city, date, and the number of adults and children.",
    "parameters": {
      "type": "dict",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city where the hotel is located."
        },
        "from_date": {
          "type": "string",
          "description": "The start date of the booking. The format is MM-DD-YYYY."
        },
        "to_date": {
          "type": "string",
          "description": "The end date of the booking. The format is MM-DD-YYYY."
        },
        "adults": {
          "type": "integer",
          "description": "The number of adults for the booking."
        },
        "children": {
          "type": "integer",
          "description": "The number of children for the booking."
        },
        "room_type": {
          "type": "string",
          "description": "The type of the room, default is 'Standard'. Options are 'Standard', 'Deluxe', 'Suite'.",
          "default": "Standard"
        }
      },
      "required": [
        "city",
        "from_date",
        "to_date",
        "adults",
        "children"
      ]
    }
  },
  {
    "name": "hotel_bookings.book_room",
    "description": "Book a hotel room based on specific criteria like location, room type, and check-in and check-out dates.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state where you want to book the hotel, e.g. Los Angeles, CA"
        },
        "room_type": {
          "type": "string",
          "description": "Preferred type of room in the hotel, e.g. king size, queen size, deluxe, suite etc."
        },
        "check_in_date": {
          "type": "string",
          "description": "Check-in date for the hotel. Format - DD-MM-YYYY."
        },
        "no_of_nights": {
          "type": "integer",
          "description": "Number of nights for the stay."
        },
        "no_of_rooms": {
          "type": "integer",
          "description": "Number of rooms to book. Default is 1.",
          "default": 1
        }
      },
      "required": [
        "location",
        "room_type",
        "check_in_date",
        "no_of_nights"
      ]
    }
  },
  {
    "name": "currency_converter",
    "description": "Calculates the current cost in target currency given the amount in base currency and exchange rate",
    "parameters": {
      "type": "dict",
      "properties": {
        "base_currency": {
          "type": "string",
          "description": "The currency to convert from."
        },
        "target_currency": {
          "type": "string",
          "description": "The currency to convert to."
        },
        "amount": {
          "type": "float",
          "description": "The amount in base currency"
        }
      },
      "required": [
        "base_currency",
        "target_currency",
        "amount"
      ]
    }
  },
  {
    "name": "get_exchange_rate_with_fee",
    "description": "Retrieve the exchange rate between two currencies including transaction fee.",
    "parameters": {
      "type": "dict",
      "properties": {
        "base_currency": {
          "type": "string",
          "description": "The base currency."
        },
        "target_currency": {
          "type": "string",
          "description": "The target currency."
        },
        "fee": {
          "type": "float",
          "description": "The transaction fee in percentage. Default is 0%."
        }
      },
      "required": [
        "base_currency",
        "target_currency",
        "fee"
      ]
    }
  },
  {
    "name": "latest_exchange_rate",
    "description": "Retrieve the latest exchange rate between two specified currencies.",
    "parameters": {
      "type": "dict",
      "properties": {
        "source_currency": {
          "type": "string",
          "description": "The currency you are converting from."
        },
        "target_currency": {
          "type": "string",
          "description": "The currency you are converting to."
        },
        "amount": {
          "type": "float",
          "description": "The amount to be converted. If omitted, default to exchange rate of 1 unit source currency"
        }
      },
      "required": [
        "source_currency",
        "target_currency"
      ]
    }
  },
  {
    "name": "parking_lot.find_nearest",
    "description": "Locate the nearest parking lot based on a specific location and radius.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The reference location e.g. Central Park, NY"
        },
        "radius": {
          "type": "integer",
          "description": "The maximum distance from the location in miles. Default is 5 miles"
        },
        "type": {
          "type": "string",
          "description": "The type of parking lot. Default is 'public'."
        }
      },
      "required": [
        "location",
        "radius"
      ]
    }
  },
  {
    "name": "hospital.locate",
    "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. Denver, CO"
        },
        "radius": {
          "type": "integer",
          "description": "The radius within which you want to find the hospital in kms."
        },
        "department": {
          "type": "string",
          "description": "Specific department within the hospital. Default is 'General Medicine'.",
          "enum": [
            "General Medicine",
            "Emergency",
            "Pediatrics",
            "Cardiology",
            "Orthopedics"
          ]
        }
      },
      "required": [
        "location",
        "radius"
      ]
    }
  },
  {
    "name": "distance_calculator.calculate",
    "description": "Calculate the distance between two locations, considering terrain.",
    "parameters": {
      "type": "dict",
      "properties": {
        "origin": {
          "type": "string",
          "description": "Starting location of the distance measurement."
        },
        "destination": {
          "type": "string",
          "description": "Destination location of the distance measurement."
        },
        "consider_terrain": {
          "type": "boolean",
          "description": "Whether to account for terrain in distance calculation, defaults to false."
        }
      },
      "required": [
        "origin",
        "destination"
      ]
    }
  },
  {
    "name": "restaurant_search",
    "description": "Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.",
    "parameters": {
      "type": "dict",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and state, e.g. New York City, NY"
        },
        "cuisine": {
          "type": "string",
          "description": "Preferred type of cuisine e.g., Italian, Indian, American, etc."
        },
        "rating": {
          "type": "integer",
          "description": "Minimum average customer rating out of 5"
        },
        "accepts_credit_cards": {
          "type": "boolean",
          "description": "If the restaurant should accept credit cards."
        }
      },
      "required": [
        "location",
        "cuisine",
        "rating",
        "accepts_credit_cards"
      ]
    }
  }
]